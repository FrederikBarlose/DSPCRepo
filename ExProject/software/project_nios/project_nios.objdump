
project_nios.elf:     file format elf32-littlenios2
project_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04008020

Program Header:
    LOAD off    0x00001000 vaddr 0x04008000 paddr 0x04008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04008020 paddr 0x04008020 align 2**12
         filesz 0x00000bb0 memsz 0x00000bb0 flags r-x
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x04008bd0 align 2**12
         filesz 0x00000114 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04008000  04008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04008020  04008020  00002114  2**0
                  CONTENTS
  2 .text         00000bb0  04008020  04008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00000000  04008bd0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00000024  04008bf4  00002024  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000114  04008ce4  00002114  2**2
                  ALLOC, SMALL_DATA
  6 .fpga_sdram   00000000  00000124  00000124  00002114  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  04008ce4  04008ce4  00002114  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002a8  00000000  00000000  00002138  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000035a7  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012c6  00000000  00000000  00005987  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000159b  00000000  00000000  00006c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000390  00000000  00000000  000081e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000f92  00000000  00000000  00008578  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001300  00000000  00000000  0000950a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000a80c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000220  00000000  00000000  0000a820  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000bbae  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0000bbb1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000bbb6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000bbb7  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000bbb8  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000bbbc  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000bbc0  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0000bbc4  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0000bbcf  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0000bbda  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0000bbe5  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000025  00000000  00000000  0000bbef  2**0
                  CONTENTS, READONLY
 30 .jdi          00004aa3  00000000  00000000  0000bc14  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006c43b  00000000  00000000  000106b7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04008000 l    d  .entry	00000000 .entry
04008020 l    d  .exceptions	00000000 .exceptions
04008020 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000024 l    d  .rwdata	00000000 .rwdata
00000114 l    d  .bss	00000000 .bss
00000124 l    d  .fpga_sdram	00000000 .fpga_sdram
04008ce4 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../project_nios_bsp//obj/HAL/src/crt0.o
04008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
04008108 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000024 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
04008aa4 g     F .text	0000002c alt_main
04008bf4 g       *ABS*	00000000 __flash_rwdata_start
040080bc g     F .text	0000004c printf
04008ad0 g     F .text	00000038 alt_putstr
04008bc8 g     F .text	00000008 altera_nios2_gen2_irq_init
04008000 g     F .entry	0000000c __reset
04008020 g       *ABS*	00000000 __flash_exceptions_start
00000114 g     O .bss	00000004 errno
0000011c g     O .bss	00000004 alt_argv
00008104 g       *ABS*	00000000 _gp
04008080 g     F .text	0000003c _printf_r
040088e0 g     F .text	00000064 .hidden __udivsi3
00000000 g       *ABS*	00000000 __alt_mem_fpga_sdram
00000104 g     O .rwdata	00000004 _global_impure_ptr
00000124 g       *ABS*	00000000 __bss_end
04008bc0 g     F .text	00000004 alt_dcache_flush_all
00000114 g       *ABS*	00000000 __ram_rwdata_end
04008b08 g     F .text	00000060 write
00000024 g       *ABS*	00000000 __ram_rodata_end
0000010c g     O .rwdata	00000004 jtag_uart_0
04008944 g     F .text	00000058 .hidden __umodsi3
00000124 g       *ABS*	00000000 end
04000000 g       *ABS*	00000000 __alt_stack_pointer
04008b8c g     F .text	00000034 altera_avalon_jtag_uart_write
04008174 g     F .text	0000052c ___vfprintf_internal_r
04008020 g     F .text	0000003c _start
04008b88 g     F .text	00000004 alt_sys_init
0400899c g     F .text	00000028 .hidden __mulsi3
00000024 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
04008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00000124 g       *ABS*	00000000 __alt_stack_base
040086bc g     F .text	000000b8 __sfvwrite_small_dev
00000114 g       *ABS*	00000000 __bss_start
0400805c g     F .text	00000024 main
00000118 g     O .bss	00000004 alt_envp
00000110 g     O .rwdata	00000004 alt_errno
040087e8 g     F .text	00000084 .hidden __divsi3
04008bd0 g       *ABS*	00000000 __flash_rodata_start
04008b68 g     F .text	00000020 alt_irq_init
04008790 g     F .text	00000058 _write_r
00000108 g     O .rwdata	00000004 _impure_ptr
00000120 g     O .bss	00000004 alt_argc
04008020 g       *ABS*	00000000 __ram_exceptions_start
00000114 g       *ABS*	00000000 _edata
00000124 g       *ABS*	00000000 _end
04008020 g       *ABS*	00000000 __ram_exceptions_end
0400886c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
0400800c g       .entry	00000000 _exit
04008774 g     F .text	0000001c strlen
04008bc4 g     F .text	00000004 alt_icache_flush_all
040086a0 g     F .text	0000001c __vfprintf_internal
040089c4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4008000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4008004:	08600814 	ori	at,at,32800
    jmp r1
 4008008:	0800683a 	jmp	at

0400800c <_exit>:
	...

Disassembly of section .text:

04008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4008020:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4008024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4008028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 400802c:	d6a04114 	ori	gp,gp,33028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4008030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4008034:	10804514 	ori	r2,r2,276

    movhi r3, %hi(__bss_end)
 4008038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 400803c:	18c04914 	ori	r3,r3,292

    beq r2, r3, 1f
 4008040:	10c00326 	beq	r2,r3,4008050 <_start+0x30>

0:
    stw zero, (r2)
 4008044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4008048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400804c:	10fffd36 	bltu	r2,r3,4008044 <__flash_rwdata_start+0xfffff450>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4008050:	40089c40 	call	40089c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4008054:	4008aa40 	call	4008aa4 <alt_main>

04008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4008058:	003fff06 	br	4008058 <__flash_rwdata_start+0xfffff464>

0400805c <main>:
#include "sys/alt_stdio.h"
#include  <stdio.h>

int main()
{ 
  alt_putstr("Hello maco me to you\n");
 400805c:	01000034 	movhi	r4,0

#include "sys/alt_stdio.h"
#include  <stdio.h>

int main()
{ 
 4008060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello maco me to you\n");
 4008064:	21000004 	addi	r4,r4,0

#include "sys/alt_stdio.h"
#include  <stdio.h>

int main()
{ 
 4008068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello maco me to you\n");
 400806c:	4008ad00 	call	4008ad0 <alt_putstr>
  printf("macorinies");
 4008070:	01000034 	movhi	r4,0
 4008074:	21000604 	addi	r4,r4,24
 4008078:	40080bc0 	call	40080bc <printf>
 400807c:	003fff06 	br	400807c <__flash_rwdata_start+0xfffff488>

04008080 <_printf_r>:
 4008080:	defffd04 	addi	sp,sp,-12
 4008084:	dfc00015 	stw	ra,0(sp)
 4008088:	d9800115 	stw	r6,4(sp)
 400808c:	d9c00215 	stw	r7,8(sp)
 4008090:	20c00217 	ldw	r3,8(r4)
 4008094:	01810074 	movhi	r6,1025
 4008098:	31a1af04 	addi	r6,r6,-31044
 400809c:	19800115 	stw	r6,4(r3)
 40080a0:	280d883a 	mov	r6,r5
 40080a4:	21400217 	ldw	r5,8(r4)
 40080a8:	d9c00104 	addi	r7,sp,4
 40080ac:	40081740 	call	4008174 <___vfprintf_internal_r>
 40080b0:	dfc00017 	ldw	ra,0(sp)
 40080b4:	dec00304 	addi	sp,sp,12
 40080b8:	f800283a 	ret

040080bc <printf>:
 40080bc:	defffc04 	addi	sp,sp,-16
 40080c0:	dfc00015 	stw	ra,0(sp)
 40080c4:	d9400115 	stw	r5,4(sp)
 40080c8:	d9800215 	stw	r6,8(sp)
 40080cc:	d9c00315 	stw	r7,12(sp)
 40080d0:	00800034 	movhi	r2,0
 40080d4:	10804204 	addi	r2,r2,264
 40080d8:	10800017 	ldw	r2,0(r2)
 40080dc:	01410074 	movhi	r5,1025
 40080e0:	2961af04 	addi	r5,r5,-31044
 40080e4:	10c00217 	ldw	r3,8(r2)
 40080e8:	d9800104 	addi	r6,sp,4
 40080ec:	19400115 	stw	r5,4(r3)
 40080f0:	200b883a 	mov	r5,r4
 40080f4:	11000217 	ldw	r4,8(r2)
 40080f8:	40086a00 	call	40086a0 <__vfprintf_internal>
 40080fc:	dfc00017 	ldw	ra,0(sp)
 4008100:	dec00404 	addi	sp,sp,16
 4008104:	f800283a 	ret

04008108 <print_repeat>:
 4008108:	defffb04 	addi	sp,sp,-20
 400810c:	dc800315 	stw	r18,12(sp)
 4008110:	dc400215 	stw	r17,8(sp)
 4008114:	dc000115 	stw	r16,4(sp)
 4008118:	dfc00415 	stw	ra,16(sp)
 400811c:	2025883a 	mov	r18,r4
 4008120:	2823883a 	mov	r17,r5
 4008124:	d9800005 	stb	r6,0(sp)
 4008128:	3821883a 	mov	r16,r7
 400812c:	04000a0e 	bge	zero,r16,4008158 <print_repeat+0x50>
 4008130:	88800117 	ldw	r2,4(r17)
 4008134:	01c00044 	movi	r7,1
 4008138:	d80d883a 	mov	r6,sp
 400813c:	880b883a 	mov	r5,r17
 4008140:	9009883a 	mov	r4,r18
 4008144:	103ee83a 	callr	r2
 4008148:	843fffc4 	addi	r16,r16,-1
 400814c:	103ff726 	beq	r2,zero,400812c <__flash_rwdata_start+0xfffff538>
 4008150:	00bfffc4 	movi	r2,-1
 4008154:	00000106 	br	400815c <print_repeat+0x54>
 4008158:	0005883a 	mov	r2,zero
 400815c:	dfc00417 	ldw	ra,16(sp)
 4008160:	dc800317 	ldw	r18,12(sp)
 4008164:	dc400217 	ldw	r17,8(sp)
 4008168:	dc000117 	ldw	r16,4(sp)
 400816c:	dec00504 	addi	sp,sp,20
 4008170:	f800283a 	ret

04008174 <___vfprintf_internal_r>:
 4008174:	deffe504 	addi	sp,sp,-108
 4008178:	d8c00804 	addi	r3,sp,32
 400817c:	ddc01815 	stw	r23,96(sp)
 4008180:	dd801715 	stw	r22,92(sp)
 4008184:	dd401615 	stw	r21,88(sp)
 4008188:	dd001515 	stw	r20,84(sp)
 400818c:	dcc01415 	stw	r19,80(sp)
 4008190:	dc801315 	stw	r18,76(sp)
 4008194:	dc401215 	stw	r17,72(sp)
 4008198:	dc001115 	stw	r16,68(sp)
 400819c:	dfc01a15 	stw	ra,104(sp)
 40081a0:	df001915 	stw	fp,100(sp)
 40081a4:	2029883a 	mov	r20,r4
 40081a8:	2823883a 	mov	r17,r5
 40081ac:	382d883a 	mov	r22,r7
 40081b0:	d9800f15 	stw	r6,60(sp)
 40081b4:	0021883a 	mov	r16,zero
 40081b8:	d8000e15 	stw	zero,56(sp)
 40081bc:	d8000a15 	stw	zero,40(sp)
 40081c0:	002b883a 	mov	r21,zero
 40081c4:	0027883a 	mov	r19,zero
 40081c8:	0025883a 	mov	r18,zero
 40081cc:	d8000c15 	stw	zero,48(sp)
 40081d0:	d8000b15 	stw	zero,44(sp)
 40081d4:	002f883a 	mov	r23,zero
 40081d8:	d8c00915 	stw	r3,36(sp)
 40081dc:	d8c00f17 	ldw	r3,60(sp)
 40081e0:	19000003 	ldbu	r4,0(r3)
 40081e4:	20803fcc 	andi	r2,r4,255
 40081e8:	1080201c 	xori	r2,r2,128
 40081ec:	10bfe004 	addi	r2,r2,-128
 40081f0:	10011e26 	beq	r2,zero,400866c <___vfprintf_internal_r+0x4f8>
 40081f4:	00c00044 	movi	r3,1
 40081f8:	b8c01426 	beq	r23,r3,400824c <___vfprintf_internal_r+0xd8>
 40081fc:	1dc00216 	blt	r3,r23,4008208 <___vfprintf_internal_r+0x94>
 4008200:	b8000626 	beq	r23,zero,400821c <___vfprintf_internal_r+0xa8>
 4008204:	00011506 	br	400865c <___vfprintf_internal_r+0x4e8>
 4008208:	01400084 	movi	r5,2
 400820c:	b9401d26 	beq	r23,r5,4008284 <___vfprintf_internal_r+0x110>
 4008210:	014000c4 	movi	r5,3
 4008214:	b9402b26 	beq	r23,r5,40082c4 <___vfprintf_internal_r+0x150>
 4008218:	00011006 	br	400865c <___vfprintf_internal_r+0x4e8>
 400821c:	01400944 	movi	r5,37
 4008220:	1140fc26 	beq	r2,r5,4008614 <___vfprintf_internal_r+0x4a0>
 4008224:	88800117 	ldw	r2,4(r17)
 4008228:	d9000005 	stb	r4,0(sp)
 400822c:	01c00044 	movi	r7,1
 4008230:	d80d883a 	mov	r6,sp
 4008234:	880b883a 	mov	r5,r17
 4008238:	a009883a 	mov	r4,r20
 400823c:	103ee83a 	callr	r2
 4008240:	1000d81e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 4008244:	84000044 	addi	r16,r16,1
 4008248:	00010406 	br	400865c <___vfprintf_internal_r+0x4e8>
 400824c:	01400c04 	movi	r5,48
 4008250:	1140fa26 	beq	r2,r5,400863c <___vfprintf_internal_r+0x4c8>
 4008254:	01400944 	movi	r5,37
 4008258:	11400a1e 	bne	r2,r5,4008284 <___vfprintf_internal_r+0x110>
 400825c:	d8800005 	stb	r2,0(sp)
 4008260:	88800117 	ldw	r2,4(r17)
 4008264:	b80f883a 	mov	r7,r23
 4008268:	d80d883a 	mov	r6,sp
 400826c:	880b883a 	mov	r5,r17
 4008270:	a009883a 	mov	r4,r20
 4008274:	103ee83a 	callr	r2
 4008278:	1000ca1e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 400827c:	84000044 	addi	r16,r16,1
 4008280:	0000f506 	br	4008658 <___vfprintf_internal_r+0x4e4>
 4008284:	25fff404 	addi	r23,r4,-48
 4008288:	bdc03fcc 	andi	r23,r23,255
 400828c:	00c00244 	movi	r3,9
 4008290:	1dc00936 	bltu	r3,r23,40082b8 <___vfprintf_internal_r+0x144>
 4008294:	00bfffc4 	movi	r2,-1
 4008298:	90800426 	beq	r18,r2,40082ac <___vfprintf_internal_r+0x138>
 400829c:	01400284 	movi	r5,10
 40082a0:	9009883a 	mov	r4,r18
 40082a4:	400899c0 	call	400899c <__mulsi3>
 40082a8:	00000106 	br	40082b0 <___vfprintf_internal_r+0x13c>
 40082ac:	0005883a 	mov	r2,zero
 40082b0:	b8a5883a 	add	r18,r23,r2
 40082b4:	0000e206 	br	4008640 <___vfprintf_internal_r+0x4cc>
 40082b8:	01400b84 	movi	r5,46
 40082bc:	1140e426 	beq	r2,r5,4008650 <___vfprintf_internal_r+0x4dc>
 40082c0:	05c00084 	movi	r23,2
 40082c4:	213ff404 	addi	r4,r4,-48
 40082c8:	27003fcc 	andi	fp,r4,255
 40082cc:	00c00244 	movi	r3,9
 40082d0:	1f000936 	bltu	r3,fp,40082f8 <___vfprintf_internal_r+0x184>
 40082d4:	00bfffc4 	movi	r2,-1
 40082d8:	98800426 	beq	r19,r2,40082ec <___vfprintf_internal_r+0x178>
 40082dc:	01400284 	movi	r5,10
 40082e0:	9809883a 	mov	r4,r19
 40082e4:	400899c0 	call	400899c <__mulsi3>
 40082e8:	00000106 	br	40082f0 <___vfprintf_internal_r+0x17c>
 40082ec:	0005883a 	mov	r2,zero
 40082f0:	e0a7883a 	add	r19,fp,r2
 40082f4:	0000d906 	br	400865c <___vfprintf_internal_r+0x4e8>
 40082f8:	00c01b04 	movi	r3,108
 40082fc:	10c0d226 	beq	r2,r3,4008648 <___vfprintf_internal_r+0x4d4>
 4008300:	013fffc4 	movi	r4,-1
 4008304:	99000226 	beq	r19,r4,4008310 <___vfprintf_internal_r+0x19c>
 4008308:	d8000b15 	stw	zero,44(sp)
 400830c:	00000106 	br	4008314 <___vfprintf_internal_r+0x1a0>
 4008310:	04c00044 	movi	r19,1
 4008314:	01001a44 	movi	r4,105
 4008318:	11001626 	beq	r2,r4,4008374 <___vfprintf_internal_r+0x200>
 400831c:	20800916 	blt	r4,r2,4008344 <___vfprintf_internal_r+0x1d0>
 4008320:	010018c4 	movi	r4,99
 4008324:	11008826 	beq	r2,r4,4008548 <___vfprintf_internal_r+0x3d4>
 4008328:	01001904 	movi	r4,100
 400832c:	11001126 	beq	r2,r4,4008374 <___vfprintf_internal_r+0x200>
 4008330:	01001604 	movi	r4,88
 4008334:	1100c81e 	bne	r2,r4,4008658 <___vfprintf_internal_r+0x4e4>
 4008338:	00c00044 	movi	r3,1
 400833c:	d8c00e15 	stw	r3,56(sp)
 4008340:	00001506 	br	4008398 <___vfprintf_internal_r+0x224>
 4008344:	01001cc4 	movi	r4,115
 4008348:	11009826 	beq	r2,r4,40085ac <___vfprintf_internal_r+0x438>
 400834c:	20800416 	blt	r4,r2,4008360 <___vfprintf_internal_r+0x1ec>
 4008350:	01001bc4 	movi	r4,111
 4008354:	1100c01e 	bne	r2,r4,4008658 <___vfprintf_internal_r+0x4e4>
 4008358:	05400204 	movi	r21,8
 400835c:	00000f06 	br	400839c <___vfprintf_internal_r+0x228>
 4008360:	01001d44 	movi	r4,117
 4008364:	11000d26 	beq	r2,r4,400839c <___vfprintf_internal_r+0x228>
 4008368:	01001e04 	movi	r4,120
 400836c:	11000a26 	beq	r2,r4,4008398 <___vfprintf_internal_r+0x224>
 4008370:	0000b906 	br	4008658 <___vfprintf_internal_r+0x4e4>
 4008374:	d8c00a17 	ldw	r3,40(sp)
 4008378:	b7000104 	addi	fp,r22,4
 400837c:	18000726 	beq	r3,zero,400839c <___vfprintf_internal_r+0x228>
 4008380:	df000d15 	stw	fp,52(sp)
 4008384:	b5c00017 	ldw	r23,0(r22)
 4008388:	b800080e 	bge	r23,zero,40083ac <___vfprintf_internal_r+0x238>
 400838c:	05efc83a 	sub	r23,zero,r23
 4008390:	02400044 	movi	r9,1
 4008394:	00000606 	br	40083b0 <___vfprintf_internal_r+0x23c>
 4008398:	05400404 	movi	r21,16
 400839c:	b0c00104 	addi	r3,r22,4
 40083a0:	d8c00d15 	stw	r3,52(sp)
 40083a4:	b5c00017 	ldw	r23,0(r22)
 40083a8:	d8000a15 	stw	zero,40(sp)
 40083ac:	0013883a 	mov	r9,zero
 40083b0:	d839883a 	mov	fp,sp
 40083b4:	b8001726 	beq	r23,zero,4008414 <___vfprintf_internal_r+0x2a0>
 40083b8:	a80b883a 	mov	r5,r21
 40083bc:	b809883a 	mov	r4,r23
 40083c0:	da401015 	stw	r9,64(sp)
 40083c4:	40088e00 	call	40088e0 <__udivsi3>
 40083c8:	a80b883a 	mov	r5,r21
 40083cc:	1009883a 	mov	r4,r2
 40083d0:	102d883a 	mov	r22,r2
 40083d4:	400899c0 	call	400899c <__mulsi3>
 40083d8:	b885c83a 	sub	r2,r23,r2
 40083dc:	00c00244 	movi	r3,9
 40083e0:	da401017 	ldw	r9,64(sp)
 40083e4:	18800216 	blt	r3,r2,40083f0 <___vfprintf_internal_r+0x27c>
 40083e8:	10800c04 	addi	r2,r2,48
 40083ec:	00000506 	br	4008404 <___vfprintf_internal_r+0x290>
 40083f0:	d8c00e17 	ldw	r3,56(sp)
 40083f4:	18000226 	beq	r3,zero,4008400 <___vfprintf_internal_r+0x28c>
 40083f8:	10800dc4 	addi	r2,r2,55
 40083fc:	00000106 	br	4008404 <___vfprintf_internal_r+0x290>
 4008400:	108015c4 	addi	r2,r2,87
 4008404:	e0800005 	stb	r2,0(fp)
 4008408:	b02f883a 	mov	r23,r22
 400840c:	e7000044 	addi	fp,fp,1
 4008410:	003fe806 	br	40083b4 <__flash_rwdata_start+0xfffff7c0>
 4008414:	e6efc83a 	sub	r23,fp,sp
 4008418:	9dc5c83a 	sub	r2,r19,r23
 400841c:	0080090e 	bge	zero,r2,4008444 <___vfprintf_internal_r+0x2d0>
 4008420:	e085883a 	add	r2,fp,r2
 4008424:	01400c04 	movi	r5,48
 4008428:	d8c00917 	ldw	r3,36(sp)
 400842c:	e009883a 	mov	r4,fp
 4008430:	e0c0032e 	bgeu	fp,r3,4008440 <___vfprintf_internal_r+0x2cc>
 4008434:	e7000044 	addi	fp,fp,1
 4008438:	21400005 	stb	r5,0(r4)
 400843c:	e0bffa1e 	bne	fp,r2,4008428 <__flash_rwdata_start+0xfffff834>
 4008440:	e6efc83a 	sub	r23,fp,sp
 4008444:	d8c00b17 	ldw	r3,44(sp)
 4008448:	4dd1883a 	add	r8,r9,r23
 400844c:	922dc83a 	sub	r22,r18,r8
 4008450:	18001626 	beq	r3,zero,40084ac <___vfprintf_internal_r+0x338>
 4008454:	48000a26 	beq	r9,zero,4008480 <___vfprintf_internal_r+0x30c>
 4008458:	00800b44 	movi	r2,45
 400845c:	d8800805 	stb	r2,32(sp)
 4008460:	88800117 	ldw	r2,4(r17)
 4008464:	01c00044 	movi	r7,1
 4008468:	d9800804 	addi	r6,sp,32
 400846c:	880b883a 	mov	r5,r17
 4008470:	a009883a 	mov	r4,r20
 4008474:	103ee83a 	callr	r2
 4008478:	10004a1e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 400847c:	84000044 	addi	r16,r16,1
 4008480:	0580070e 	bge	zero,r22,40084a0 <___vfprintf_internal_r+0x32c>
 4008484:	b00f883a 	mov	r7,r22
 4008488:	01800c04 	movi	r6,48
 400848c:	880b883a 	mov	r5,r17
 4008490:	a009883a 	mov	r4,r20
 4008494:	40081080 	call	4008108 <print_repeat>
 4008498:	1000421e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 400849c:	85a1883a 	add	r16,r16,r22
 40084a0:	e02d883a 	mov	r22,fp
 40084a4:	bf2fc83a 	sub	r23,r23,fp
 40084a8:	00002006 	br	400852c <___vfprintf_internal_r+0x3b8>
 40084ac:	0580090e 	bge	zero,r22,40084d4 <___vfprintf_internal_r+0x360>
 40084b0:	b00f883a 	mov	r7,r22
 40084b4:	01800804 	movi	r6,32
 40084b8:	880b883a 	mov	r5,r17
 40084bc:	a009883a 	mov	r4,r20
 40084c0:	da401015 	stw	r9,64(sp)
 40084c4:	40081080 	call	4008108 <print_repeat>
 40084c8:	da401017 	ldw	r9,64(sp)
 40084cc:	1000351e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 40084d0:	85a1883a 	add	r16,r16,r22
 40084d4:	483ff226 	beq	r9,zero,40084a0 <__flash_rwdata_start+0xfffff8ac>
 40084d8:	00800b44 	movi	r2,45
 40084dc:	d8800805 	stb	r2,32(sp)
 40084e0:	88800117 	ldw	r2,4(r17)
 40084e4:	01c00044 	movi	r7,1
 40084e8:	d9800804 	addi	r6,sp,32
 40084ec:	880b883a 	mov	r5,r17
 40084f0:	a009883a 	mov	r4,r20
 40084f4:	103ee83a 	callr	r2
 40084f8:	10002a1e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 40084fc:	84000044 	addi	r16,r16,1
 4008500:	003fe706 	br	40084a0 <__flash_rwdata_start+0xfffff8ac>
 4008504:	b5bfffc4 	addi	r22,r22,-1
 4008508:	b0800003 	ldbu	r2,0(r22)
 400850c:	01c00044 	movi	r7,1
 4008510:	d9800804 	addi	r6,sp,32
 4008514:	d8800805 	stb	r2,32(sp)
 4008518:	88800117 	ldw	r2,4(r17)
 400851c:	880b883a 	mov	r5,r17
 4008520:	a009883a 	mov	r4,r20
 4008524:	103ee83a 	callr	r2
 4008528:	10001e1e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 400852c:	8585c83a 	sub	r2,r16,r22
 4008530:	b5c9883a 	add	r4,r22,r23
 4008534:	e085883a 	add	r2,fp,r2
 4008538:	013ff216 	blt	zero,r4,4008504 <__flash_rwdata_start+0xfffff910>
 400853c:	1021883a 	mov	r16,r2
 4008540:	dd800d17 	ldw	r22,52(sp)
 4008544:	00004406 	br	4008658 <___vfprintf_internal_r+0x4e4>
 4008548:	00800044 	movi	r2,1
 400854c:	1480080e 	bge	r2,r18,4008570 <___vfprintf_internal_r+0x3fc>
 4008550:	95ffffc4 	addi	r23,r18,-1
 4008554:	b80f883a 	mov	r7,r23
 4008558:	01800804 	movi	r6,32
 400855c:	880b883a 	mov	r5,r17
 4008560:	a009883a 	mov	r4,r20
 4008564:	40081080 	call	4008108 <print_repeat>
 4008568:	10000e1e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 400856c:	85e1883a 	add	r16,r16,r23
 4008570:	b0800017 	ldw	r2,0(r22)
 4008574:	01c00044 	movi	r7,1
 4008578:	d80d883a 	mov	r6,sp
 400857c:	d8800005 	stb	r2,0(sp)
 4008580:	88800117 	ldw	r2,4(r17)
 4008584:	880b883a 	mov	r5,r17
 4008588:	a009883a 	mov	r4,r20
 400858c:	b5c00104 	addi	r23,r22,4
 4008590:	103ee83a 	callr	r2
 4008594:	1000031e 	bne	r2,zero,40085a4 <___vfprintf_internal_r+0x430>
 4008598:	84000044 	addi	r16,r16,1
 400859c:	b82d883a 	mov	r22,r23
 40085a0:	00002d06 	br	4008658 <___vfprintf_internal_r+0x4e4>
 40085a4:	00bfffc4 	movi	r2,-1
 40085a8:	00003106 	br	4008670 <___vfprintf_internal_r+0x4fc>
 40085ac:	b5c00017 	ldw	r23,0(r22)
 40085b0:	b7000104 	addi	fp,r22,4
 40085b4:	b809883a 	mov	r4,r23
 40085b8:	40087740 	call	4008774 <strlen>
 40085bc:	9091c83a 	sub	r8,r18,r2
 40085c0:	102d883a 	mov	r22,r2
 40085c4:	0200090e 	bge	zero,r8,40085ec <___vfprintf_internal_r+0x478>
 40085c8:	400f883a 	mov	r7,r8
 40085cc:	01800804 	movi	r6,32
 40085d0:	880b883a 	mov	r5,r17
 40085d4:	a009883a 	mov	r4,r20
 40085d8:	da001015 	stw	r8,64(sp)
 40085dc:	40081080 	call	4008108 <print_repeat>
 40085e0:	da001017 	ldw	r8,64(sp)
 40085e4:	103fef1e 	bne	r2,zero,40085a4 <__flash_rwdata_start+0xfffff9b0>
 40085e8:	8221883a 	add	r16,r16,r8
 40085ec:	88800117 	ldw	r2,4(r17)
 40085f0:	b00f883a 	mov	r7,r22
 40085f4:	b80d883a 	mov	r6,r23
 40085f8:	880b883a 	mov	r5,r17
 40085fc:	a009883a 	mov	r4,r20
 4008600:	103ee83a 	callr	r2
 4008604:	103fe71e 	bne	r2,zero,40085a4 <__flash_rwdata_start+0xfffff9b0>
 4008608:	85a1883a 	add	r16,r16,r22
 400860c:	e02d883a 	mov	r22,fp
 4008610:	00001106 	br	4008658 <___vfprintf_internal_r+0x4e4>
 4008614:	00c00044 	movi	r3,1
 4008618:	04ffffc4 	movi	r19,-1
 400861c:	d8000e15 	stw	zero,56(sp)
 4008620:	d8c00a15 	stw	r3,40(sp)
 4008624:	05400284 	movi	r21,10
 4008628:	9825883a 	mov	r18,r19
 400862c:	d8000c15 	stw	zero,48(sp)
 4008630:	d8000b15 	stw	zero,44(sp)
 4008634:	182f883a 	mov	r23,r3
 4008638:	00000806 	br	400865c <___vfprintf_internal_r+0x4e8>
 400863c:	ddc00b15 	stw	r23,44(sp)
 4008640:	05c00084 	movi	r23,2
 4008644:	00000506 	br	400865c <___vfprintf_internal_r+0x4e8>
 4008648:	00c00044 	movi	r3,1
 400864c:	d8c00c15 	stw	r3,48(sp)
 4008650:	05c000c4 	movi	r23,3
 4008654:	00000106 	br	400865c <___vfprintf_internal_r+0x4e8>
 4008658:	002f883a 	mov	r23,zero
 400865c:	d8c00f17 	ldw	r3,60(sp)
 4008660:	18c00044 	addi	r3,r3,1
 4008664:	d8c00f15 	stw	r3,60(sp)
 4008668:	003edc06 	br	40081dc <__flash_rwdata_start+0xfffff5e8>
 400866c:	8005883a 	mov	r2,r16
 4008670:	dfc01a17 	ldw	ra,104(sp)
 4008674:	df001917 	ldw	fp,100(sp)
 4008678:	ddc01817 	ldw	r23,96(sp)
 400867c:	dd801717 	ldw	r22,92(sp)
 4008680:	dd401617 	ldw	r21,88(sp)
 4008684:	dd001517 	ldw	r20,84(sp)
 4008688:	dcc01417 	ldw	r19,80(sp)
 400868c:	dc801317 	ldw	r18,76(sp)
 4008690:	dc401217 	ldw	r17,72(sp)
 4008694:	dc001117 	ldw	r16,68(sp)
 4008698:	dec01b04 	addi	sp,sp,108
 400869c:	f800283a 	ret

040086a0 <__vfprintf_internal>:
 40086a0:	00800034 	movhi	r2,0
 40086a4:	10804204 	addi	r2,r2,264
 40086a8:	300f883a 	mov	r7,r6
 40086ac:	280d883a 	mov	r6,r5
 40086b0:	200b883a 	mov	r5,r4
 40086b4:	11000017 	ldw	r4,0(r2)
 40086b8:	40081741 	jmpi	4008174 <___vfprintf_internal_r>

040086bc <__sfvwrite_small_dev>:
 40086bc:	2880000b 	ldhu	r2,0(r5)
 40086c0:	1080020c 	andi	r2,r2,8
 40086c4:	10002126 	beq	r2,zero,400874c <__sfvwrite_small_dev+0x90>
 40086c8:	2880008f 	ldh	r2,2(r5)
 40086cc:	defffa04 	addi	sp,sp,-24
 40086d0:	dc000015 	stw	r16,0(sp)
 40086d4:	dfc00515 	stw	ra,20(sp)
 40086d8:	dd000415 	stw	r20,16(sp)
 40086dc:	dcc00315 	stw	r19,12(sp)
 40086e0:	dc800215 	stw	r18,8(sp)
 40086e4:	dc400115 	stw	r17,4(sp)
 40086e8:	2821883a 	mov	r16,r5
 40086ec:	10001216 	blt	r2,zero,4008738 <__sfvwrite_small_dev+0x7c>
 40086f0:	2027883a 	mov	r19,r4
 40086f4:	3025883a 	mov	r18,r6
 40086f8:	3823883a 	mov	r17,r7
 40086fc:	05010004 	movi	r20,1024
 4008700:	04400b0e 	bge	zero,r17,4008730 <__sfvwrite_small_dev+0x74>
 4008704:	880f883a 	mov	r7,r17
 4008708:	a440010e 	bge	r20,r17,4008710 <__sfvwrite_small_dev+0x54>
 400870c:	01c10004 	movi	r7,1024
 4008710:	8140008f 	ldh	r5,2(r16)
 4008714:	900d883a 	mov	r6,r18
 4008718:	9809883a 	mov	r4,r19
 400871c:	40087900 	call	4008790 <_write_r>
 4008720:	0080050e 	bge	zero,r2,4008738 <__sfvwrite_small_dev+0x7c>
 4008724:	88a3c83a 	sub	r17,r17,r2
 4008728:	90a5883a 	add	r18,r18,r2
 400872c:	003ff406 	br	4008700 <__flash_rwdata_start+0xfffffb0c>
 4008730:	0005883a 	mov	r2,zero
 4008734:	00000706 	br	4008754 <__sfvwrite_small_dev+0x98>
 4008738:	8080000b 	ldhu	r2,0(r16)
 400873c:	10801014 	ori	r2,r2,64
 4008740:	8080000d 	sth	r2,0(r16)
 4008744:	00bfffc4 	movi	r2,-1
 4008748:	00000206 	br	4008754 <__sfvwrite_small_dev+0x98>
 400874c:	00bfffc4 	movi	r2,-1
 4008750:	f800283a 	ret
 4008754:	dfc00517 	ldw	ra,20(sp)
 4008758:	dd000417 	ldw	r20,16(sp)
 400875c:	dcc00317 	ldw	r19,12(sp)
 4008760:	dc800217 	ldw	r18,8(sp)
 4008764:	dc400117 	ldw	r17,4(sp)
 4008768:	dc000017 	ldw	r16,0(sp)
 400876c:	dec00604 	addi	sp,sp,24
 4008770:	f800283a 	ret

04008774 <strlen>:
 4008774:	2005883a 	mov	r2,r4
 4008778:	10c00007 	ldb	r3,0(r2)
 400877c:	18000226 	beq	r3,zero,4008788 <strlen+0x14>
 4008780:	10800044 	addi	r2,r2,1
 4008784:	003ffc06 	br	4008778 <__flash_rwdata_start+0xfffffb84>
 4008788:	1105c83a 	sub	r2,r2,r4
 400878c:	f800283a 	ret

04008790 <_write_r>:
 4008790:	defffd04 	addi	sp,sp,-12
 4008794:	dc000015 	stw	r16,0(sp)
 4008798:	04000034 	movhi	r16,0
 400879c:	dc400115 	stw	r17,4(sp)
 40087a0:	84004504 	addi	r16,r16,276
 40087a4:	2023883a 	mov	r17,r4
 40087a8:	2809883a 	mov	r4,r5
 40087ac:	300b883a 	mov	r5,r6
 40087b0:	380d883a 	mov	r6,r7
 40087b4:	dfc00215 	stw	ra,8(sp)
 40087b8:	80000015 	stw	zero,0(r16)
 40087bc:	4008b080 	call	4008b08 <write>
 40087c0:	00ffffc4 	movi	r3,-1
 40087c4:	10c0031e 	bne	r2,r3,40087d4 <_write_r+0x44>
 40087c8:	80c00017 	ldw	r3,0(r16)
 40087cc:	18000126 	beq	r3,zero,40087d4 <_write_r+0x44>
 40087d0:	88c00015 	stw	r3,0(r17)
 40087d4:	dfc00217 	ldw	ra,8(sp)
 40087d8:	dc400117 	ldw	r17,4(sp)
 40087dc:	dc000017 	ldw	r16,0(sp)
 40087e0:	dec00304 	addi	sp,sp,12
 40087e4:	f800283a 	ret

040087e8 <__divsi3>:
 40087e8:	20001b16 	blt	r4,zero,4008858 <__divsi3+0x70>
 40087ec:	000f883a 	mov	r7,zero
 40087f0:	28001616 	blt	r5,zero,400884c <__divsi3+0x64>
 40087f4:	200d883a 	mov	r6,r4
 40087f8:	29001a2e 	bgeu	r5,r4,4008864 <__divsi3+0x7c>
 40087fc:	00800804 	movi	r2,32
 4008800:	00c00044 	movi	r3,1
 4008804:	00000106 	br	400880c <__divsi3+0x24>
 4008808:	10000d26 	beq	r2,zero,4008840 <__divsi3+0x58>
 400880c:	294b883a 	add	r5,r5,r5
 4008810:	10bfffc4 	addi	r2,r2,-1
 4008814:	18c7883a 	add	r3,r3,r3
 4008818:	293ffb36 	bltu	r5,r4,4008808 <__flash_rwdata_start+0xfffffc14>
 400881c:	0005883a 	mov	r2,zero
 4008820:	18000726 	beq	r3,zero,4008840 <__divsi3+0x58>
 4008824:	0005883a 	mov	r2,zero
 4008828:	31400236 	bltu	r6,r5,4008834 <__divsi3+0x4c>
 400882c:	314dc83a 	sub	r6,r6,r5
 4008830:	10c4b03a 	or	r2,r2,r3
 4008834:	1806d07a 	srli	r3,r3,1
 4008838:	280ad07a 	srli	r5,r5,1
 400883c:	183ffa1e 	bne	r3,zero,4008828 <__flash_rwdata_start+0xfffffc34>
 4008840:	38000126 	beq	r7,zero,4008848 <__divsi3+0x60>
 4008844:	0085c83a 	sub	r2,zero,r2
 4008848:	f800283a 	ret
 400884c:	014bc83a 	sub	r5,zero,r5
 4008850:	39c0005c 	xori	r7,r7,1
 4008854:	003fe706 	br	40087f4 <__flash_rwdata_start+0xfffffc00>
 4008858:	0109c83a 	sub	r4,zero,r4
 400885c:	01c00044 	movi	r7,1
 4008860:	003fe306 	br	40087f0 <__flash_rwdata_start+0xfffffbfc>
 4008864:	00c00044 	movi	r3,1
 4008868:	003fee06 	br	4008824 <__flash_rwdata_start+0xfffffc30>

0400886c <__modsi3>:
 400886c:	20001716 	blt	r4,zero,40088cc <__modsi3+0x60>
 4008870:	000f883a 	mov	r7,zero
 4008874:	2005883a 	mov	r2,r4
 4008878:	28001216 	blt	r5,zero,40088c4 <__modsi3+0x58>
 400887c:	2900162e 	bgeu	r5,r4,40088d8 <__modsi3+0x6c>
 4008880:	01800804 	movi	r6,32
 4008884:	00c00044 	movi	r3,1
 4008888:	00000106 	br	4008890 <__modsi3+0x24>
 400888c:	30000a26 	beq	r6,zero,40088b8 <__modsi3+0x4c>
 4008890:	294b883a 	add	r5,r5,r5
 4008894:	31bfffc4 	addi	r6,r6,-1
 4008898:	18c7883a 	add	r3,r3,r3
 400889c:	293ffb36 	bltu	r5,r4,400888c <__flash_rwdata_start+0xfffffc98>
 40088a0:	18000526 	beq	r3,zero,40088b8 <__modsi3+0x4c>
 40088a4:	1806d07a 	srli	r3,r3,1
 40088a8:	11400136 	bltu	r2,r5,40088b0 <__modsi3+0x44>
 40088ac:	1145c83a 	sub	r2,r2,r5
 40088b0:	280ad07a 	srli	r5,r5,1
 40088b4:	183ffb1e 	bne	r3,zero,40088a4 <__flash_rwdata_start+0xfffffcb0>
 40088b8:	38000126 	beq	r7,zero,40088c0 <__modsi3+0x54>
 40088bc:	0085c83a 	sub	r2,zero,r2
 40088c0:	f800283a 	ret
 40088c4:	014bc83a 	sub	r5,zero,r5
 40088c8:	003fec06 	br	400887c <__flash_rwdata_start+0xfffffc88>
 40088cc:	0109c83a 	sub	r4,zero,r4
 40088d0:	01c00044 	movi	r7,1
 40088d4:	003fe706 	br	4008874 <__flash_rwdata_start+0xfffffc80>
 40088d8:	00c00044 	movi	r3,1
 40088dc:	003ff106 	br	40088a4 <__flash_rwdata_start+0xfffffcb0>

040088e0 <__udivsi3>:
 40088e0:	200d883a 	mov	r6,r4
 40088e4:	2900152e 	bgeu	r5,r4,400893c <__udivsi3+0x5c>
 40088e8:	28001416 	blt	r5,zero,400893c <__udivsi3+0x5c>
 40088ec:	00800804 	movi	r2,32
 40088f0:	00c00044 	movi	r3,1
 40088f4:	00000206 	br	4008900 <__udivsi3+0x20>
 40088f8:	10000e26 	beq	r2,zero,4008934 <__udivsi3+0x54>
 40088fc:	28000516 	blt	r5,zero,4008914 <__udivsi3+0x34>
 4008900:	294b883a 	add	r5,r5,r5
 4008904:	10bfffc4 	addi	r2,r2,-1
 4008908:	18c7883a 	add	r3,r3,r3
 400890c:	293ffa36 	bltu	r5,r4,40088f8 <__flash_rwdata_start+0xfffffd04>
 4008910:	18000826 	beq	r3,zero,4008934 <__udivsi3+0x54>
 4008914:	0005883a 	mov	r2,zero
 4008918:	31400236 	bltu	r6,r5,4008924 <__udivsi3+0x44>
 400891c:	314dc83a 	sub	r6,r6,r5
 4008920:	10c4b03a 	or	r2,r2,r3
 4008924:	1806d07a 	srli	r3,r3,1
 4008928:	280ad07a 	srli	r5,r5,1
 400892c:	183ffa1e 	bne	r3,zero,4008918 <__flash_rwdata_start+0xfffffd24>
 4008930:	f800283a 	ret
 4008934:	0005883a 	mov	r2,zero
 4008938:	f800283a 	ret
 400893c:	00c00044 	movi	r3,1
 4008940:	003ff406 	br	4008914 <__flash_rwdata_start+0xfffffd20>

04008944 <__umodsi3>:
 4008944:	2005883a 	mov	r2,r4
 4008948:	2900122e 	bgeu	r5,r4,4008994 <__umodsi3+0x50>
 400894c:	28001116 	blt	r5,zero,4008994 <__umodsi3+0x50>
 4008950:	01800804 	movi	r6,32
 4008954:	00c00044 	movi	r3,1
 4008958:	00000206 	br	4008964 <__umodsi3+0x20>
 400895c:	30000c26 	beq	r6,zero,4008990 <__umodsi3+0x4c>
 4008960:	28000516 	blt	r5,zero,4008978 <__umodsi3+0x34>
 4008964:	294b883a 	add	r5,r5,r5
 4008968:	31bfffc4 	addi	r6,r6,-1
 400896c:	18c7883a 	add	r3,r3,r3
 4008970:	293ffa36 	bltu	r5,r4,400895c <__flash_rwdata_start+0xfffffd68>
 4008974:	18000626 	beq	r3,zero,4008990 <__umodsi3+0x4c>
 4008978:	1806d07a 	srli	r3,r3,1
 400897c:	11400136 	bltu	r2,r5,4008984 <__umodsi3+0x40>
 4008980:	1145c83a 	sub	r2,r2,r5
 4008984:	280ad07a 	srli	r5,r5,1
 4008988:	183ffb1e 	bne	r3,zero,4008978 <__flash_rwdata_start+0xfffffd84>
 400898c:	f800283a 	ret
 4008990:	f800283a 	ret
 4008994:	00c00044 	movi	r3,1
 4008998:	003ff706 	br	4008978 <__flash_rwdata_start+0xfffffd84>

0400899c <__mulsi3>:
 400899c:	0005883a 	mov	r2,zero
 40089a0:	20000726 	beq	r4,zero,40089c0 <__mulsi3+0x24>
 40089a4:	20c0004c 	andi	r3,r4,1
 40089a8:	2008d07a 	srli	r4,r4,1
 40089ac:	18000126 	beq	r3,zero,40089b4 <__mulsi3+0x18>
 40089b0:	1145883a 	add	r2,r2,r5
 40089b4:	294b883a 	add	r5,r5,r5
 40089b8:	203ffa1e 	bne	r4,zero,40089a4 <__flash_rwdata_start+0xfffffdb0>
 40089bc:	f800283a 	ret
 40089c0:	f800283a 	ret

040089c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40089c4:	deffff04 	addi	sp,sp,-4
 40089c8:	01000034 	movhi	r4,0
 40089cc:	01410074 	movhi	r5,1025
 40089d0:	dfc00015 	stw	ra,0(sp)
 40089d4:	21000904 	addi	r4,r4,36
 40089d8:	2962fd04 	addi	r5,r5,-29708

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40089dc:	2140061e 	bne	r4,r5,40089f8 <alt_load+0x34>
 40089e0:	01010074 	movhi	r4,1025
 40089e4:	01410074 	movhi	r5,1025
 40089e8:	21200804 	addi	r4,r4,-32736
 40089ec:	29600804 	addi	r5,r5,-32736
 40089f0:	2140121e 	bne	r4,r5,4008a3c <alt_load+0x78>
 40089f4:	00000b06 	br	4008a24 <alt_load+0x60>
 40089f8:	00c00034 	movhi	r3,0
 40089fc:	18c04504 	addi	r3,r3,276
 4008a00:	1907c83a 	sub	r3,r3,r4
 4008a04:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4008a08:	10fff526 	beq	r2,r3,40089e0 <__flash_rwdata_start+0xfffffdec>
    {
      *to++ = *from++;
 4008a0c:	114f883a 	add	r7,r2,r5
 4008a10:	39c00017 	ldw	r7,0(r7)
 4008a14:	110d883a 	add	r6,r2,r4
 4008a18:	10800104 	addi	r2,r2,4
 4008a1c:	31c00015 	stw	r7,0(r6)
 4008a20:	003ff906 	br	4008a08 <__flash_rwdata_start+0xfffffe14>
 4008a24:	01000034 	movhi	r4,0
 4008a28:	01410074 	movhi	r5,1025
 4008a2c:	21000004 	addi	r4,r4,0
 4008a30:	2962f404 	addi	r5,r5,-29744

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4008a34:	2140101e 	bne	r4,r5,4008a78 <alt_load+0xb4>
 4008a38:	00000b06 	br	4008a68 <alt_load+0xa4>
 4008a3c:	00c10074 	movhi	r3,1025
 4008a40:	18e00804 	addi	r3,r3,-32736
 4008a44:	1907c83a 	sub	r3,r3,r4
 4008a48:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4008a4c:	10fff526 	beq	r2,r3,4008a24 <__flash_rwdata_start+0xfffffe30>
    {
      *to++ = *from++;
 4008a50:	114f883a 	add	r7,r2,r5
 4008a54:	39c00017 	ldw	r7,0(r7)
 4008a58:	110d883a 	add	r6,r2,r4
 4008a5c:	10800104 	addi	r2,r2,4
 4008a60:	31c00015 	stw	r7,0(r6)
 4008a64:	003ff906 	br	4008a4c <__flash_rwdata_start+0xfffffe58>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4008a68:	4008bc00 	call	4008bc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 4008a6c:	dfc00017 	ldw	ra,0(sp)
 4008a70:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4008a74:	4008bc41 	jmpi	4008bc4 <alt_icache_flush_all>
 4008a78:	00c00034 	movhi	r3,0
 4008a7c:	18c00904 	addi	r3,r3,36
 4008a80:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4008a84:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4008a88:	18bff726 	beq	r3,r2,4008a68 <__flash_rwdata_start+0xfffffe74>
    {
      *to++ = *from++;
 4008a8c:	114f883a 	add	r7,r2,r5
 4008a90:	39c00017 	ldw	r7,0(r7)
 4008a94:	110d883a 	add	r6,r2,r4
 4008a98:	10800104 	addi	r2,r2,4
 4008a9c:	31c00015 	stw	r7,0(r6)
 4008aa0:	003ff906 	br	4008a88 <__flash_rwdata_start+0xfffffe94>

04008aa4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4008aa4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4008aa8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4008aac:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4008ab0:	4008b680 	call	4008b68 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4008ab4:	4008b880 	call	4008b88 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4008ab8:	d1a00517 	ldw	r6,-32748(gp)
 4008abc:	d1600617 	ldw	r5,-32744(gp)
 4008ac0:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 4008ac4:	dfc00017 	ldw	ra,0(sp)
 4008ac8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4008acc:	400805c1 	jmpi	400805c <main>

04008ad0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4008ad0:	defffe04 	addi	sp,sp,-8
 4008ad4:	dc000015 	stw	r16,0(sp)
 4008ad8:	dfc00115 	stw	ra,4(sp)
 4008adc:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4008ae0:	40087740 	call	4008774 <strlen>
 4008ae4:	01000034 	movhi	r4,0
 4008ae8:	000f883a 	mov	r7,zero
 4008aec:	100d883a 	mov	r6,r2
 4008af0:	800b883a 	mov	r5,r16
 4008af4:	21004304 	addi	r4,r4,268
#else
    return fputs(str, stdout);
#endif
#endif
}
 4008af8:	dfc00117 	ldw	ra,4(sp)
 4008afc:	dc000017 	ldw	r16,0(sp)
 4008b00:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4008b04:	4008b8c1 	jmpi	4008b8c <altera_avalon_jtag_uart_write>

04008b08 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 4008b08:	00800044 	movi	r2,1
 4008b0c:	20800226 	beq	r4,r2,4008b18 <write+0x10>
 4008b10:	00800084 	movi	r2,2
 4008b14:	2080041e 	bne	r4,r2,4008b28 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 4008b18:	01000034 	movhi	r4,0
 4008b1c:	000f883a 	mov	r7,zero
 4008b20:	21004304 	addi	r4,r4,268
 4008b24:	4008b8c1 	jmpi	4008b8c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4008b28:	d0a00317 	ldw	r2,-32756(gp)
 4008b2c:	10000926 	beq	r2,zero,4008b54 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4008b30:	deffff04 	addi	sp,sp,-4
 4008b34:	dfc00015 	stw	ra,0(sp)
 4008b38:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4008b3c:	00c01444 	movi	r3,81
 4008b40:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4008b44:	00bfffc4 	movi	r2,-1
 4008b48:	dfc00017 	ldw	ra,0(sp)
 4008b4c:	dec00104 	addi	sp,sp,4
 4008b50:	f800283a 	ret
 4008b54:	d0a00404 	addi	r2,gp,-32752
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4008b58:	00c01444 	movi	r3,81
 4008b5c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4008b60:	00bfffc4 	movi	r2,-1
 4008b64:	f800283a 	ret

04008b68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4008b68:	deffff04 	addi	sp,sp,-4
 4008b6c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 4008b70:	4008bc80 	call	4008bc8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4008b74:	00800044 	movi	r2,1
 4008b78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4008b7c:	dfc00017 	ldw	ra,0(sp)
 4008b80:	dec00104 	addi	sp,sp,4
 4008b84:	f800283a 	ret

04008b88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4008b88:	f800283a 	ret

04008b8c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4008b8c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4008b90:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4008b94:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4008b98:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4008b9c:	2980072e 	bgeu	r5,r6,4008bbc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4008ba0:	38c00037 	ldwio	r3,0(r7)
 4008ba4:	18ffffec 	andhi	r3,r3,65535
 4008ba8:	183ffc26 	beq	r3,zero,4008b9c <__flash_rwdata_start+0xffffffa8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4008bac:	28c00007 	ldb	r3,0(r5)
 4008bb0:	20c00035 	stwio	r3,0(r4)
 4008bb4:	29400044 	addi	r5,r5,1
 4008bb8:	003ff806 	br	4008b9c <__flash_rwdata_start+0xffffffa8>

  return count;
}
 4008bbc:	f800283a 	ret

04008bc0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4008bc0:	f800283a 	ret

04008bc4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4008bc4:	f800283a 	ret

04008bc8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4008bc8:	000170fa 	wrctl	ienable,zero
 4008bcc:	f800283a 	ret
