
uart_coef_fir.elf:     file format elf32-littlenios2
uart_coef_fir.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04008230

Program Header:
    LOAD off    0x00001000 vaddr 0x04008000 paddr 0x04008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04008020 paddr 0x04008020 align 2**12
         filesz 0x00005830 memsz 0x00005830 flags r-x
    LOAD off    0x00007000 vaddr 0x00000000 paddr 0x0400d850 align 2**12
         filesz 0x00001abc memsz 0x00001c10 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04008000  04008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04008020  04008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005620  04008230  04008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00000000  0400d850  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00000050  0400d8a0  00007050  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00001abc  0400f30c  00008abc  2**2
                  ALLOC, SMALL_DATA
  6 .fpga_sdram   00000000  00001c10  00001c10  00008abc  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  0400f30c  0400f30c  00008abc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008abc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  00008ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000164c2  00000000  00000000  00009510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006026  00000000  00000000  0001f9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000690a  00000000  00000000  000259f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000015a0  00000000  00000000  0002c304  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027e2  00000000  00000000  0002d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  00030086  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00034b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00034b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000377da  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000377dd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000377e2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000377e3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000377e4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000377e8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000377ec  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000377f0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000377fb  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00037806  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00037811  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  0003781b  2**0
                  CONTENTS, READONLY
 30 .jdi          000000e4  00000000  00000000  0003784b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00070bc3  00000000  00000000  0003792f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04008000 l    d  .entry	00000000 .entry
04008020 l    d  .exceptions	00000000 .exceptions
04008230 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000050 l    d  .rwdata	00000000 .rwdata
00001abc l    d  .bss	00000000 .bss
00001c10 l    d  .fpga_sdram	00000000 .fpga_sdram
0400f30c l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../uart_coef_fir_bsp//obj/HAL/src/crt0.o
04008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0400840c l     F .text	00000008 __fp_unlock
04008420 l     F .text	0000019c __sinit.part.1
040085bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000050 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0400b0ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400b1c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400b1ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400b2e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400b3c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400b4b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400b690 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001aac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400b904 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400ba40 l     F .text	00000034 alt_dev_reg
00000a24 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400bd34 l     F .text	0000020c altera_avalon_jtag_uart_irq
0400bf40 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400c578 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400c7b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400cc18 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400cd78 l     F .text	0000003c alt_get_errno
0400cdb4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001ae4 g     O .bss	00000004 alt_instruction_exception_handler
0400ae7c g     F .text	00000054 _isatty_r
0400b5cc g     F .text	0000007c alt_main
040082a0 g     F .text	000000c0 _puts_r
00001b10 g     O .bss	00000100 alt_irq
0400aba4 g     F .text	00000060 _lseek_r
0400d8a0 g       *ABS*	00000000 __flash_rwdata_start
00001c10 g       *ABS*	00000000 __alt_heap_start
0400a158 g     F .text	0000005c __sseek
0400876c g     F .text	00000010 __sinit
040085c4 g     F .text	00000078 __sfmoreglue
0400b66c g     F .text	00000024 __malloc_unlock
04009844 g     F .text	0000015c memmove
04008754 g     F .text	00000018 _cleanup
0400d1a0 g     F .text	00000024 altera_nios2_gen2_irq_init
04008000 g     F .entry	0000000c __reset
04008020 g       *ABS*	00000000 __flash_exceptions_start
0400ae20 g     F .text	0000005c _fstat_r
00001ac8 g     O .bss	00000004 errno
0400a0d4 g     F .text	00000008 __seofread
00001ad0 g     O .bss	00000004 alt_argv
00009a84 g       *ABS*	00000000 _gp
000008a4 g     O .rwdata	00000180 alt_fd_list
0400d1c4 g     F .text	00000090 alt_find_dev
040096fc g     F .text	00000148 memcpy
04008414 g     F .text	0000000c _cleanup_r
0400ccfc g     F .text	0000007c alt_io_redirect
0400d850 g       *ABS*	00000000 __DTOR_END__
04008360 g     F .text	00000014 puts
0400d420 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400c138 g     F .text	0000021c altera_avalon_jtag_uart_read
0400afc8 g     F .text	00000064 .hidden __udivsi3
0400b31c g     F .text	000000ac isatty
00001ac4 g     O .bss	00000004 __malloc_top_pad
040087bc g     F .text	000004c8 __sfvwrite_r
0400a02c g     F .text	00000054 _sbrk_r
0400adc0 g     F .text	00000060 _read_r
00001aa4 g     O .rwdata	00000004 alt_max_fd
0400a3c4 g     F .text	000000f0 _fclose_r
0400a740 g     F .text	00000030 fflush
00001ac0 g     O .bss	00000004 __malloc_max_sbrked_mem
0400b4f0 g     F .text	000000dc lseek
00000000 g       *ABS*	00000000 __alt_mem_fpga_sdram
00001a84 g     O .rwdata	00000004 _global_impure_ptr
04009ac8 g     F .text	00000564 _realloc_r
00001c10 g       *ABS*	00000000 __bss_end
0400cb28 g     F .text	000000f0 alt_iic_isr_register
0400d098 g     F .text	00000108 alt_tick
0400878c g     F .text	00000018 __fp_lock_all
0400cadc g     F .text	0000004c alt_ic_irq_enabled
0400cffc g     F .text	0000009c alt_alarm_stop
00001ad8 g     O .bss	00000004 alt_irq_active
040080fc g     F .exceptions	000000d4 alt_irq_handler
0000087c g     O .rwdata	00000028 alt_dev_null
0400c798 g     F .text	00000020 alt_dcache_flush_all
00001abc g       *ABS*	00000000 __ram_rwdata_end
00001a9c g     O .rwdata	00000008 alt_dev_list
0400b940 g     F .text	00000100 write
00000050 g       *ABS*	00000000 __ram_rodata_end
0400b228 g     F .text	000000b8 fstat
0400b02c g     F .text	00000058 .hidden __umodsi3
00001c10 g       *ABS*	00000000 end
0400bc74 g     F .text	000000c0 altera_avalon_jtag_uart_init
040081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0400d850 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0400c5f0 g     F .text	0000007c alt_avalon_timer_sc_init
0400c354 g     F .text	00000224 altera_avalon_jtag_uart_write
0400877c g     F .text	00000004 __sfp_lock_acquire
04009618 g     F .text	000000e4 memchr
0400a894 g     F .text	00000310 _free_r
0400d69c g     F .text	00000180 __call_exitprocs
00001a8c g     O .rwdata	00000004 __malloc_sbrk_base
04008230 g     F .text	0000003c _start
00001adc g     O .bss	00000004 _alt_tick_rate
00001ae0 g     O .bss	00000004 _alt_nticks
0400b6cc g     F .text	00000104 read
0400baac g     F .text	00000064 alt_sys_init
0400d584 g     F .text	00000118 __register_exitproc
0400bfe0 g     F .text	00000068 altera_avalon_jtag_uart_close
0400b084 g     F .text	00000028 .hidden __mulsi3
00000050 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001ae8 g     O .bss	00000028 __malloc_current_mallinfo
04008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0400bb10 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400d35c g     F .text	000000c4 alt_get_fd
0400a370 g     F .text	00000054 _close_r
0400d508 g     F .text	0000007c memcmp
0400bbd0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001c10 g       *ABS*	00000000 __alt_stack_base
0400bc20 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400a21c g     F .text	00000154 __swsetup_r
0400863c g     F .text	00000118 __sfp
00000474 g     O .rwdata	00000408 __malloc_av_
04008788 g     F .text	00000004 __sinit_lock_release
0400a080 g     F .text	00000054 __sread
0400d254 g     F .text	00000108 alt_find_file
0400c7f4 g     F .text	000000a4 alt_dev_llist_insert
0400b648 g     F .text	00000024 __malloc_lock
0400b854 g     F .text	000000b0 sbrk
0400a6e4 g     F .text	0000005c _fflush_r
00001abc g       *ABS*	00000000 __bss_start
040099a0 g     F .text	00000128 memset
0400826c g     F .text	00000034 main
00001ad4 g     O .bss	00000004 alt_envp
00001abc g     O .bss	00000004 __malloc_max_total_mem
0400bb70 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400a1b4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0400a4b4 g     F .text	00000014 fclose
04008e0c g     F .text	0000080c _malloc_r
00001aa8 g     O .rwdata	00000004 alt_errno
04008c84 g     F .text	000000c4 _fwalk
0400aed0 g     F .text	00000084 .hidden __divsi3
0400a770 g     F .text	00000124 _malloc_trim_r
0400d850 g       *ABS*	00000000 __CTOR_END__
0400d850 g       *ABS*	00000000 __flash_rodata_start
0400d850 g       *ABS*	00000000 __DTOR_LIST__
0400ba74 g     F .text	00000038 alt_irq_init
0400b7d0 g     F .text	00000084 alt_release_fd
0400d4bc g     F .text	00000014 atexit
0400a1bc g     F .text	00000060 _write_r
00001a88 g     O .rwdata	00000004 _impure_ptr
00001acc g     O .bss	00000004 alt_argc
0400a4c8 g     F .text	0000021c __sflush_r
0400c8f8 g     F .text	00000060 _do_dtors
04008020 g       .exceptions	00000000 alt_irq_entry
040087a4 g     F .text	00000018 __fp_unlock_all
00001a94 g     O .rwdata	00000008 alt_fs_list
04008020 g       *ABS*	00000000 __ram_exceptions_start
0400c978 g     F .text	00000050 alt_ic_isr_register
00001abc g       *ABS*	00000000 _edata
00001c10 g       *ABS*	00000000 _end
04008230 g       *ABS*	00000000 __ram_exceptions_end
0400c048 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400ca50 g     F .text	0000008c alt_ic_irq_disable
0400a0dc g     F .text	0000007c __swrite
00001a90 g     O .rwdata	00000004 __malloc_trim_threshold
0400d4d0 g     F .text	00000038 exit
04008d48 g     F .text	000000c4 _fwalk_reent
0400af54 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04008020 g     F .exceptions	00000000 alt_exception
04008780 g     F .text	00000004 __sfp_lock_release
0400d81c g     F .text	00000034 _exit
0400c66c g     F .text	0000012c alt_alarm_start
0400ac04 g     F .text	000001bc __smakebuf_r
04008374 g     F .text	00000098 strlen
0400cea0 g     F .text	0000015c open
0400c958 g     F .text	00000020 alt_icache_flush_all
00001ab0 g     O .rwdata	00000004 alt_priority_mask
0400c9c8 g     F .text	00000088 alt_ic_irq_enable
00001ab4 g     O .rwdata	00000008 alt_alarm_list
0400c898 g     F .text	00000060 _do_ctors
0400b0e8 g     F .text	000000d8 close
0400b430 g     F .text	00000084 alt_load
04008784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4008000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4008004:	08608c14 	ori	at,at,33328
    jmp r1
 4008008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4008020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4008024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4008028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4008030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4008034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4008038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4008040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4008044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4008048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4008050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4008054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4008058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4008060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4008064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4008068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4008070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4008074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4008078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400807c:	10000326 	beq	r2,zero,400808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4008080:	20000226 	beq	r4,zero,400808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4008084:	40080fc0 	call	40080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4008088:	00000706 	br	40080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4008090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4008094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4008098:	40081d00 	call	40081d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400809c:	1000021e 	bne	r2,zero,40080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40080f8:	ef80083a 	eret

040080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40080fc:	defff904 	addi	sp,sp,-28
 4008100:	dfc00615 	stw	ra,24(sp)
 4008104:	df000515 	stw	fp,20(sp)
 4008108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4008110:	0005313a 	rdctl	r2,ipending
 4008114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4008118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4008120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4008124:	00800044 	movi	r2,1
 4008128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400812c:	e0fffb17 	ldw	r3,-20(fp)
 4008130:	e0bffc17 	ldw	r2,-16(fp)
 4008134:	1884703a 	and	r2,r3,r2
 4008138:	10001426 	beq	r2,zero,400818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400813c:	00800034 	movhi	r2,0
 4008140:	1086c404 	addi	r2,r2,6928
 4008144:	e0fffd17 	ldw	r3,-12(fp)
 4008148:	180690fa 	slli	r3,r3,3
 400814c:	10c5883a 	add	r2,r2,r3
 4008150:	10c00017 	ldw	r3,0(r2)
 4008154:	00800034 	movhi	r2,0
 4008158:	1086c404 	addi	r2,r2,6928
 400815c:	e13ffd17 	ldw	r4,-12(fp)
 4008160:	200890fa 	slli	r4,r4,3
 4008164:	1105883a 	add	r2,r2,r4
 4008168:	10800104 	addi	r2,r2,4
 400816c:	10800017 	ldw	r2,0(r2)
 4008170:	1009883a 	mov	r4,r2
 4008174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4008178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400817c:	0005313a 	rdctl	r2,ipending
 4008180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4008184:	e0bfff17 	ldw	r2,-4(fp)
 4008188:	00000706 	br	40081a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400818c:	e0bffc17 	ldw	r2,-16(fp)
 4008190:	1085883a 	add	r2,r2,r2
 4008194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4008198:	e0bffd17 	ldw	r2,-12(fp)
 400819c:	10800044 	addi	r2,r2,1
 40081a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40081a4:	003fe106 	br	400812c <__flash_rwdata_start+0xffffa88c>

    active = alt_irq_pending ();
 40081a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40081ac:	e0bffb17 	ldw	r2,-20(fp)
 40081b0:	103fdb1e 	bne	r2,zero,4008120 <__flash_rwdata_start+0xffffa880>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40081b4:	0001883a 	nop
}
 40081b8:	0001883a 	nop
 40081bc:	e037883a 	mov	sp,fp
 40081c0:	dfc00117 	ldw	ra,4(sp)
 40081c4:	df000017 	ldw	fp,0(sp)
 40081c8:	dec00204 	addi	sp,sp,8
 40081cc:	f800283a 	ret

040081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40081d0:	defffb04 	addi	sp,sp,-20
 40081d4:	dfc00415 	stw	ra,16(sp)
 40081d8:	df000315 	stw	fp,12(sp)
 40081dc:	df000304 	addi	fp,sp,12
 40081e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40081e4:	00bfffc4 	movi	r2,-1
 40081e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40081ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40081f0:	d0a01817 	ldw	r2,-32672(gp)
 40081f4:	10000726 	beq	r2,zero,4008214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40081f8:	d0a01817 	ldw	r2,-32672(gp)
 40081fc:	e0fffd17 	ldw	r3,-12(fp)
 4008200:	e1bffe17 	ldw	r6,-8(fp)
 4008204:	e17fff17 	ldw	r5,-4(fp)
 4008208:	1809883a 	mov	r4,r3
 400820c:	103ee83a 	callr	r2
 4008210:	00000206 	br	400821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4008214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4008218:	0005883a 	mov	r2,zero
}
 400821c:	e037883a 	mov	sp,fp
 4008220:	dfc00117 	ldw	ra,4(sp)
 4008224:	df000017 	ldw	fp,0(sp)
 4008228:	dec00204 	addi	sp,sp,8
 400822c:	f800283a 	ret

Disassembly of section .text:

04008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4008230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4008234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4008238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 400823c:	d6a6a114 	ori	gp,gp,39556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4008240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4008244:	1086af14 	ori	r2,r2,6844

    movhi r3, %hi(__bss_end)
 4008248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 400824c:	18c70414 	ori	r3,r3,7184

    beq r2, r3, 1f
 4008250:	10c00326 	beq	r2,r3,4008260 <_start+0x30>

0:
    stw zero, (r2)
 4008254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4008258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400825c:	10fffd36 	bltu	r2,r3,4008254 <__flash_rwdata_start+0xffffa9b4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4008260:	400b4300 	call	400b430 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4008264:	400b5cc0 	call	400b5cc <alt_main>

04008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4008268:	003fff06 	br	4008268 <__flash_rwdata_start+0xffffa9c8>

0400826c <main>:
 */

#include <stdio.h>

int main()
{
 400826c:	defffe04 	addi	sp,sp,-8
 4008270:	dfc00115 	stw	ra,4(sp)
 4008274:	df000015 	stw	fp,0(sp)
 4008278:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 400827c:	01000034 	movhi	r4,0
 4008280:	21000004 	addi	r4,r4,0
 4008284:	40083600 	call	4008360 <puts>

  return 0;
 4008288:	0005883a 	mov	r2,zero
}
 400828c:	e037883a 	mov	sp,fp
 4008290:	dfc00117 	ldw	ra,4(sp)
 4008294:	df000017 	ldw	fp,0(sp)
 4008298:	dec00204 	addi	sp,sp,8
 400829c:	f800283a 	ret

040082a0 <_puts_r>:
 40082a0:	defff604 	addi	sp,sp,-40
 40082a4:	dc000715 	stw	r16,28(sp)
 40082a8:	2021883a 	mov	r16,r4
 40082ac:	2809883a 	mov	r4,r5
 40082b0:	dc400815 	stw	r17,32(sp)
 40082b4:	dfc00915 	stw	ra,36(sp)
 40082b8:	2823883a 	mov	r17,r5
 40082bc:	40083740 	call	4008374 <strlen>
 40082c0:	10c00044 	addi	r3,r2,1
 40082c4:	d8800115 	stw	r2,4(sp)
 40082c8:	00800034 	movhi	r2,0
 40082cc:	10800504 	addi	r2,r2,20
 40082d0:	d8800215 	stw	r2,8(sp)
 40082d4:	00800044 	movi	r2,1
 40082d8:	d8800315 	stw	r2,12(sp)
 40082dc:	00800084 	movi	r2,2
 40082e0:	dc400015 	stw	r17,0(sp)
 40082e4:	d8c00615 	stw	r3,24(sp)
 40082e8:	dec00415 	stw	sp,16(sp)
 40082ec:	d8800515 	stw	r2,20(sp)
 40082f0:	80000226 	beq	r16,zero,40082fc <_puts_r+0x5c>
 40082f4:	80800e17 	ldw	r2,56(r16)
 40082f8:	10001426 	beq	r2,zero,400834c <_puts_r+0xac>
 40082fc:	81400217 	ldw	r5,8(r16)
 4008300:	2880030b 	ldhu	r2,12(r5)
 4008304:	10c8000c 	andi	r3,r2,8192
 4008308:	1800061e 	bne	r3,zero,4008324 <_puts_r+0x84>
 400830c:	29001917 	ldw	r4,100(r5)
 4008310:	00f7ffc4 	movi	r3,-8193
 4008314:	10880014 	ori	r2,r2,8192
 4008318:	20c6703a 	and	r3,r4,r3
 400831c:	2880030d 	sth	r2,12(r5)
 4008320:	28c01915 	stw	r3,100(r5)
 4008324:	d9800404 	addi	r6,sp,16
 4008328:	8009883a 	mov	r4,r16
 400832c:	40087bc0 	call	40087bc <__sfvwrite_r>
 4008330:	1000091e 	bne	r2,zero,4008358 <_puts_r+0xb8>
 4008334:	00800284 	movi	r2,10
 4008338:	dfc00917 	ldw	ra,36(sp)
 400833c:	dc400817 	ldw	r17,32(sp)
 4008340:	dc000717 	ldw	r16,28(sp)
 4008344:	dec00a04 	addi	sp,sp,40
 4008348:	f800283a 	ret
 400834c:	8009883a 	mov	r4,r16
 4008350:	400876c0 	call	400876c <__sinit>
 4008354:	003fe906 	br	40082fc <__flash_rwdata_start+0xffffaa5c>
 4008358:	00bfffc4 	movi	r2,-1
 400835c:	003ff606 	br	4008338 <__flash_rwdata_start+0xffffaa98>

04008360 <puts>:
 4008360:	00800034 	movhi	r2,0
 4008364:	1086a204 	addi	r2,r2,6792
 4008368:	200b883a 	mov	r5,r4
 400836c:	11000017 	ldw	r4,0(r2)
 4008370:	40082a01 	jmpi	40082a0 <_puts_r>

04008374 <strlen>:
 4008374:	208000cc 	andi	r2,r4,3
 4008378:	10002026 	beq	r2,zero,40083fc <strlen+0x88>
 400837c:	20800007 	ldb	r2,0(r4)
 4008380:	10002026 	beq	r2,zero,4008404 <strlen+0x90>
 4008384:	2005883a 	mov	r2,r4
 4008388:	00000206 	br	4008394 <strlen+0x20>
 400838c:	10c00007 	ldb	r3,0(r2)
 4008390:	18001826 	beq	r3,zero,40083f4 <strlen+0x80>
 4008394:	10800044 	addi	r2,r2,1
 4008398:	10c000cc 	andi	r3,r2,3
 400839c:	183ffb1e 	bne	r3,zero,400838c <__flash_rwdata_start+0xffffaaec>
 40083a0:	10c00017 	ldw	r3,0(r2)
 40083a4:	01ffbff4 	movhi	r7,65279
 40083a8:	39ffbfc4 	addi	r7,r7,-257
 40083ac:	00ca303a 	nor	r5,zero,r3
 40083b0:	01a02074 	movhi	r6,32897
 40083b4:	19c7883a 	add	r3,r3,r7
 40083b8:	31a02004 	addi	r6,r6,-32640
 40083bc:	1946703a 	and	r3,r3,r5
 40083c0:	1986703a 	and	r3,r3,r6
 40083c4:	1800091e 	bne	r3,zero,40083ec <strlen+0x78>
 40083c8:	10800104 	addi	r2,r2,4
 40083cc:	10c00017 	ldw	r3,0(r2)
 40083d0:	19cb883a 	add	r5,r3,r7
 40083d4:	00c6303a 	nor	r3,zero,r3
 40083d8:	28c6703a 	and	r3,r5,r3
 40083dc:	1986703a 	and	r3,r3,r6
 40083e0:	183ff926 	beq	r3,zero,40083c8 <__flash_rwdata_start+0xffffab28>
 40083e4:	00000106 	br	40083ec <strlen+0x78>
 40083e8:	10800044 	addi	r2,r2,1
 40083ec:	10c00007 	ldb	r3,0(r2)
 40083f0:	183ffd1e 	bne	r3,zero,40083e8 <__flash_rwdata_start+0xffffab48>
 40083f4:	1105c83a 	sub	r2,r2,r4
 40083f8:	f800283a 	ret
 40083fc:	2005883a 	mov	r2,r4
 4008400:	003fe706 	br	40083a0 <__flash_rwdata_start+0xffffab00>
 4008404:	0005883a 	mov	r2,zero
 4008408:	f800283a 	ret

0400840c <__fp_unlock>:
 400840c:	0005883a 	mov	r2,zero
 4008410:	f800283a 	ret

04008414 <_cleanup_r>:
 4008414:	01410074 	movhi	r5,1025
 4008418:	2968f104 	addi	r5,r5,-23612
 400841c:	4008d481 	jmpi	4008d48 <_fwalk_reent>

04008420 <__sinit.part.1>:
 4008420:	defff704 	addi	sp,sp,-36
 4008424:	00c10074 	movhi	r3,1025
 4008428:	dfc00815 	stw	ra,32(sp)
 400842c:	ddc00715 	stw	r23,28(sp)
 4008430:	dd800615 	stw	r22,24(sp)
 4008434:	dd400515 	stw	r21,20(sp)
 4008438:	dd000415 	stw	r20,16(sp)
 400843c:	dcc00315 	stw	r19,12(sp)
 4008440:	dc800215 	stw	r18,8(sp)
 4008444:	dc400115 	stw	r17,4(sp)
 4008448:	dc000015 	stw	r16,0(sp)
 400844c:	18e10504 	addi	r3,r3,-31724
 4008450:	24000117 	ldw	r16,4(r4)
 4008454:	20c00f15 	stw	r3,60(r4)
 4008458:	2080bb04 	addi	r2,r4,748
 400845c:	00c000c4 	movi	r3,3
 4008460:	20c0b915 	stw	r3,740(r4)
 4008464:	2080ba15 	stw	r2,744(r4)
 4008468:	2000b815 	stw	zero,736(r4)
 400846c:	05c00204 	movi	r23,8
 4008470:	00800104 	movi	r2,4
 4008474:	2025883a 	mov	r18,r4
 4008478:	b80d883a 	mov	r6,r23
 400847c:	81001704 	addi	r4,r16,92
 4008480:	000b883a 	mov	r5,zero
 4008484:	80000015 	stw	zero,0(r16)
 4008488:	80000115 	stw	zero,4(r16)
 400848c:	80000215 	stw	zero,8(r16)
 4008490:	8080030d 	sth	r2,12(r16)
 4008494:	80001915 	stw	zero,100(r16)
 4008498:	8000038d 	sth	zero,14(r16)
 400849c:	80000415 	stw	zero,16(r16)
 40084a0:	80000515 	stw	zero,20(r16)
 40084a4:	80000615 	stw	zero,24(r16)
 40084a8:	40099a00 	call	40099a0 <memset>
 40084ac:	05810074 	movhi	r22,1025
 40084b0:	94400217 	ldw	r17,8(r18)
 40084b4:	05410074 	movhi	r21,1025
 40084b8:	05010074 	movhi	r20,1025
 40084bc:	04c10074 	movhi	r19,1025
 40084c0:	b5a82004 	addi	r22,r22,-24448
 40084c4:	ad683704 	addi	r21,r21,-24356
 40084c8:	a5285604 	addi	r20,r20,-24232
 40084cc:	9ce86d04 	addi	r19,r19,-24140
 40084d0:	85800815 	stw	r22,32(r16)
 40084d4:	85400915 	stw	r21,36(r16)
 40084d8:	85000a15 	stw	r20,40(r16)
 40084dc:	84c00b15 	stw	r19,44(r16)
 40084e0:	84000715 	stw	r16,28(r16)
 40084e4:	00800284 	movi	r2,10
 40084e8:	8880030d 	sth	r2,12(r17)
 40084ec:	00800044 	movi	r2,1
 40084f0:	b80d883a 	mov	r6,r23
 40084f4:	89001704 	addi	r4,r17,92
 40084f8:	000b883a 	mov	r5,zero
 40084fc:	88000015 	stw	zero,0(r17)
 4008500:	88000115 	stw	zero,4(r17)
 4008504:	88000215 	stw	zero,8(r17)
 4008508:	88001915 	stw	zero,100(r17)
 400850c:	8880038d 	sth	r2,14(r17)
 4008510:	88000415 	stw	zero,16(r17)
 4008514:	88000515 	stw	zero,20(r17)
 4008518:	88000615 	stw	zero,24(r17)
 400851c:	40099a00 	call	40099a0 <memset>
 4008520:	94000317 	ldw	r16,12(r18)
 4008524:	00800484 	movi	r2,18
 4008528:	8c400715 	stw	r17,28(r17)
 400852c:	8d800815 	stw	r22,32(r17)
 4008530:	8d400915 	stw	r21,36(r17)
 4008534:	8d000a15 	stw	r20,40(r17)
 4008538:	8cc00b15 	stw	r19,44(r17)
 400853c:	8080030d 	sth	r2,12(r16)
 4008540:	00800084 	movi	r2,2
 4008544:	80000015 	stw	zero,0(r16)
 4008548:	80000115 	stw	zero,4(r16)
 400854c:	80000215 	stw	zero,8(r16)
 4008550:	80001915 	stw	zero,100(r16)
 4008554:	8080038d 	sth	r2,14(r16)
 4008558:	80000415 	stw	zero,16(r16)
 400855c:	80000515 	stw	zero,20(r16)
 4008560:	80000615 	stw	zero,24(r16)
 4008564:	b80d883a 	mov	r6,r23
 4008568:	000b883a 	mov	r5,zero
 400856c:	81001704 	addi	r4,r16,92
 4008570:	40099a00 	call	40099a0 <memset>
 4008574:	00800044 	movi	r2,1
 4008578:	84000715 	stw	r16,28(r16)
 400857c:	85800815 	stw	r22,32(r16)
 4008580:	85400915 	stw	r21,36(r16)
 4008584:	85000a15 	stw	r20,40(r16)
 4008588:	84c00b15 	stw	r19,44(r16)
 400858c:	90800e15 	stw	r2,56(r18)
 4008590:	dfc00817 	ldw	ra,32(sp)
 4008594:	ddc00717 	ldw	r23,28(sp)
 4008598:	dd800617 	ldw	r22,24(sp)
 400859c:	dd400517 	ldw	r21,20(sp)
 40085a0:	dd000417 	ldw	r20,16(sp)
 40085a4:	dcc00317 	ldw	r19,12(sp)
 40085a8:	dc800217 	ldw	r18,8(sp)
 40085ac:	dc400117 	ldw	r17,4(sp)
 40085b0:	dc000017 	ldw	r16,0(sp)
 40085b4:	dec00904 	addi	sp,sp,36
 40085b8:	f800283a 	ret

040085bc <__fp_lock>:
 40085bc:	0005883a 	mov	r2,zero
 40085c0:	f800283a 	ret

040085c4 <__sfmoreglue>:
 40085c4:	defffc04 	addi	sp,sp,-16
 40085c8:	dc800215 	stw	r18,8(sp)
 40085cc:	2825883a 	mov	r18,r5
 40085d0:	dc000015 	stw	r16,0(sp)
 40085d4:	01401a04 	movi	r5,104
 40085d8:	2021883a 	mov	r16,r4
 40085dc:	913fffc4 	addi	r4,r18,-1
 40085e0:	dfc00315 	stw	ra,12(sp)
 40085e4:	dc400115 	stw	r17,4(sp)
 40085e8:	400b0840 	call	400b084 <__mulsi3>
 40085ec:	8009883a 	mov	r4,r16
 40085f0:	11401d04 	addi	r5,r2,116
 40085f4:	1023883a 	mov	r17,r2
 40085f8:	4008e0c0 	call	4008e0c <_malloc_r>
 40085fc:	1021883a 	mov	r16,r2
 4008600:	10000726 	beq	r2,zero,4008620 <__sfmoreglue+0x5c>
 4008604:	11000304 	addi	r4,r2,12
 4008608:	10000015 	stw	zero,0(r2)
 400860c:	14800115 	stw	r18,4(r2)
 4008610:	11000215 	stw	r4,8(r2)
 4008614:	89801a04 	addi	r6,r17,104
 4008618:	000b883a 	mov	r5,zero
 400861c:	40099a00 	call	40099a0 <memset>
 4008620:	8005883a 	mov	r2,r16
 4008624:	dfc00317 	ldw	ra,12(sp)
 4008628:	dc800217 	ldw	r18,8(sp)
 400862c:	dc400117 	ldw	r17,4(sp)
 4008630:	dc000017 	ldw	r16,0(sp)
 4008634:	dec00404 	addi	sp,sp,16
 4008638:	f800283a 	ret

0400863c <__sfp>:
 400863c:	defffb04 	addi	sp,sp,-20
 4008640:	dc000015 	stw	r16,0(sp)
 4008644:	04000034 	movhi	r16,0
 4008648:	8406a104 	addi	r16,r16,6788
 400864c:	dcc00315 	stw	r19,12(sp)
 4008650:	2027883a 	mov	r19,r4
 4008654:	81000017 	ldw	r4,0(r16)
 4008658:	dfc00415 	stw	ra,16(sp)
 400865c:	dc800215 	stw	r18,8(sp)
 4008660:	20800e17 	ldw	r2,56(r4)
 4008664:	dc400115 	stw	r17,4(sp)
 4008668:	1000021e 	bne	r2,zero,4008674 <__sfp+0x38>
 400866c:	40084200 	call	4008420 <__sinit.part.1>
 4008670:	81000017 	ldw	r4,0(r16)
 4008674:	2480b804 	addi	r18,r4,736
 4008678:	047fffc4 	movi	r17,-1
 400867c:	91000117 	ldw	r4,4(r18)
 4008680:	94000217 	ldw	r16,8(r18)
 4008684:	213fffc4 	addi	r4,r4,-1
 4008688:	20000a16 	blt	r4,zero,40086b4 <__sfp+0x78>
 400868c:	8080030f 	ldh	r2,12(r16)
 4008690:	10000c26 	beq	r2,zero,40086c4 <__sfp+0x88>
 4008694:	80c01d04 	addi	r3,r16,116
 4008698:	00000206 	br	40086a4 <__sfp+0x68>
 400869c:	18bfe60f 	ldh	r2,-104(r3)
 40086a0:	10000826 	beq	r2,zero,40086c4 <__sfp+0x88>
 40086a4:	213fffc4 	addi	r4,r4,-1
 40086a8:	1c3ffd04 	addi	r16,r3,-12
 40086ac:	18c01a04 	addi	r3,r3,104
 40086b0:	247ffa1e 	bne	r4,r17,400869c <__flash_rwdata_start+0xffffadfc>
 40086b4:	90800017 	ldw	r2,0(r18)
 40086b8:	10001d26 	beq	r2,zero,4008730 <__sfp+0xf4>
 40086bc:	1025883a 	mov	r18,r2
 40086c0:	003fee06 	br	400867c <__flash_rwdata_start+0xffffaddc>
 40086c4:	00bfffc4 	movi	r2,-1
 40086c8:	8080038d 	sth	r2,14(r16)
 40086cc:	00800044 	movi	r2,1
 40086d0:	8080030d 	sth	r2,12(r16)
 40086d4:	80001915 	stw	zero,100(r16)
 40086d8:	80000015 	stw	zero,0(r16)
 40086dc:	80000215 	stw	zero,8(r16)
 40086e0:	80000115 	stw	zero,4(r16)
 40086e4:	80000415 	stw	zero,16(r16)
 40086e8:	80000515 	stw	zero,20(r16)
 40086ec:	80000615 	stw	zero,24(r16)
 40086f0:	01800204 	movi	r6,8
 40086f4:	000b883a 	mov	r5,zero
 40086f8:	81001704 	addi	r4,r16,92
 40086fc:	40099a00 	call	40099a0 <memset>
 4008700:	8005883a 	mov	r2,r16
 4008704:	80000c15 	stw	zero,48(r16)
 4008708:	80000d15 	stw	zero,52(r16)
 400870c:	80001115 	stw	zero,68(r16)
 4008710:	80001215 	stw	zero,72(r16)
 4008714:	dfc00417 	ldw	ra,16(sp)
 4008718:	dcc00317 	ldw	r19,12(sp)
 400871c:	dc800217 	ldw	r18,8(sp)
 4008720:	dc400117 	ldw	r17,4(sp)
 4008724:	dc000017 	ldw	r16,0(sp)
 4008728:	dec00504 	addi	sp,sp,20
 400872c:	f800283a 	ret
 4008730:	01400104 	movi	r5,4
 4008734:	9809883a 	mov	r4,r19
 4008738:	40085c40 	call	40085c4 <__sfmoreglue>
 400873c:	90800015 	stw	r2,0(r18)
 4008740:	103fde1e 	bne	r2,zero,40086bc <__flash_rwdata_start+0xffffae1c>
 4008744:	00800304 	movi	r2,12
 4008748:	98800015 	stw	r2,0(r19)
 400874c:	0005883a 	mov	r2,zero
 4008750:	003ff006 	br	4008714 <__flash_rwdata_start+0xffffae74>

04008754 <_cleanup>:
 4008754:	00800034 	movhi	r2,0
 4008758:	1086a104 	addi	r2,r2,6788
 400875c:	11000017 	ldw	r4,0(r2)
 4008760:	01410074 	movhi	r5,1025
 4008764:	2968f104 	addi	r5,r5,-23612
 4008768:	4008d481 	jmpi	4008d48 <_fwalk_reent>

0400876c <__sinit>:
 400876c:	20800e17 	ldw	r2,56(r4)
 4008770:	10000126 	beq	r2,zero,4008778 <__sinit+0xc>
 4008774:	f800283a 	ret
 4008778:	40084201 	jmpi	4008420 <__sinit.part.1>

0400877c <__sfp_lock_acquire>:
 400877c:	f800283a 	ret

04008780 <__sfp_lock_release>:
 4008780:	f800283a 	ret

04008784 <__sinit_lock_acquire>:
 4008784:	f800283a 	ret

04008788 <__sinit_lock_release>:
 4008788:	f800283a 	ret

0400878c <__fp_lock_all>:
 400878c:	00800034 	movhi	r2,0
 4008790:	1086a204 	addi	r2,r2,6792
 4008794:	11000017 	ldw	r4,0(r2)
 4008798:	01410074 	movhi	r5,1025
 400879c:	29616f04 	addi	r5,r5,-31300
 40087a0:	4008c841 	jmpi	4008c84 <_fwalk>

040087a4 <__fp_unlock_all>:
 40087a4:	00800034 	movhi	r2,0
 40087a8:	1086a204 	addi	r2,r2,6792
 40087ac:	11000017 	ldw	r4,0(r2)
 40087b0:	01410074 	movhi	r5,1025
 40087b4:	29610304 	addi	r5,r5,-31732
 40087b8:	4008c841 	jmpi	4008c84 <_fwalk>

040087bc <__sfvwrite_r>:
 40087bc:	30800217 	ldw	r2,8(r6)
 40087c0:	10006726 	beq	r2,zero,4008960 <__sfvwrite_r+0x1a4>
 40087c4:	28c0030b 	ldhu	r3,12(r5)
 40087c8:	defff404 	addi	sp,sp,-48
 40087cc:	dd400715 	stw	r21,28(sp)
 40087d0:	dd000615 	stw	r20,24(sp)
 40087d4:	dc000215 	stw	r16,8(sp)
 40087d8:	dfc00b15 	stw	ra,44(sp)
 40087dc:	df000a15 	stw	fp,40(sp)
 40087e0:	ddc00915 	stw	r23,36(sp)
 40087e4:	dd800815 	stw	r22,32(sp)
 40087e8:	dcc00515 	stw	r19,20(sp)
 40087ec:	dc800415 	stw	r18,16(sp)
 40087f0:	dc400315 	stw	r17,12(sp)
 40087f4:	1880020c 	andi	r2,r3,8
 40087f8:	2821883a 	mov	r16,r5
 40087fc:	202b883a 	mov	r21,r4
 4008800:	3029883a 	mov	r20,r6
 4008804:	10002726 	beq	r2,zero,40088a4 <__sfvwrite_r+0xe8>
 4008808:	28800417 	ldw	r2,16(r5)
 400880c:	10002526 	beq	r2,zero,40088a4 <__sfvwrite_r+0xe8>
 4008810:	1880008c 	andi	r2,r3,2
 4008814:	a4400017 	ldw	r17,0(r20)
 4008818:	10002a26 	beq	r2,zero,40088c4 <__sfvwrite_r+0x108>
 400881c:	05a00034 	movhi	r22,32768
 4008820:	0027883a 	mov	r19,zero
 4008824:	0025883a 	mov	r18,zero
 4008828:	b5bf0004 	addi	r22,r22,-1024
 400882c:	980d883a 	mov	r6,r19
 4008830:	a809883a 	mov	r4,r21
 4008834:	90004626 	beq	r18,zero,4008950 <__sfvwrite_r+0x194>
 4008838:	900f883a 	mov	r7,r18
 400883c:	b480022e 	bgeu	r22,r18,4008848 <__sfvwrite_r+0x8c>
 4008840:	01e00034 	movhi	r7,32768
 4008844:	39ff0004 	addi	r7,r7,-1024
 4008848:	80800917 	ldw	r2,36(r16)
 400884c:	81400717 	ldw	r5,28(r16)
 4008850:	103ee83a 	callr	r2
 4008854:	00805a0e 	bge	zero,r2,40089c0 <__sfvwrite_r+0x204>
 4008858:	a0c00217 	ldw	r3,8(r20)
 400885c:	98a7883a 	add	r19,r19,r2
 4008860:	90a5c83a 	sub	r18,r18,r2
 4008864:	1885c83a 	sub	r2,r3,r2
 4008868:	a0800215 	stw	r2,8(r20)
 400886c:	103fef1e 	bne	r2,zero,400882c <__flash_rwdata_start+0xffffaf8c>
 4008870:	0005883a 	mov	r2,zero
 4008874:	dfc00b17 	ldw	ra,44(sp)
 4008878:	df000a17 	ldw	fp,40(sp)
 400887c:	ddc00917 	ldw	r23,36(sp)
 4008880:	dd800817 	ldw	r22,32(sp)
 4008884:	dd400717 	ldw	r21,28(sp)
 4008888:	dd000617 	ldw	r20,24(sp)
 400888c:	dcc00517 	ldw	r19,20(sp)
 4008890:	dc800417 	ldw	r18,16(sp)
 4008894:	dc400317 	ldw	r17,12(sp)
 4008898:	dc000217 	ldw	r16,8(sp)
 400889c:	dec00c04 	addi	sp,sp,48
 40088a0:	f800283a 	ret
 40088a4:	800b883a 	mov	r5,r16
 40088a8:	a809883a 	mov	r4,r21
 40088ac:	400a21c0 	call	400a21c <__swsetup_r>
 40088b0:	1000ee1e 	bne	r2,zero,4008c6c <__sfvwrite_r+0x4b0>
 40088b4:	80c0030b 	ldhu	r3,12(r16)
 40088b8:	a4400017 	ldw	r17,0(r20)
 40088bc:	1880008c 	andi	r2,r3,2
 40088c0:	103fd61e 	bne	r2,zero,400881c <__flash_rwdata_start+0xffffaf7c>
 40088c4:	1880004c 	andi	r2,r3,1
 40088c8:	1000421e 	bne	r2,zero,40089d4 <__sfvwrite_r+0x218>
 40088cc:	0039883a 	mov	fp,zero
 40088d0:	0025883a 	mov	r18,zero
 40088d4:	90001a26 	beq	r18,zero,4008940 <__sfvwrite_r+0x184>
 40088d8:	1880800c 	andi	r2,r3,512
 40088dc:	84c00217 	ldw	r19,8(r16)
 40088e0:	10002126 	beq	r2,zero,4008968 <__sfvwrite_r+0x1ac>
 40088e4:	982f883a 	mov	r23,r19
 40088e8:	94c09636 	bltu	r18,r19,4008b44 <__sfvwrite_r+0x388>
 40088ec:	1881200c 	andi	r2,r3,1152
 40088f0:	1000a11e 	bne	r2,zero,4008b78 <__sfvwrite_r+0x3bc>
 40088f4:	81000017 	ldw	r4,0(r16)
 40088f8:	b80d883a 	mov	r6,r23
 40088fc:	e00b883a 	mov	r5,fp
 4008900:	40098440 	call	4009844 <memmove>
 4008904:	80c00217 	ldw	r3,8(r16)
 4008908:	81000017 	ldw	r4,0(r16)
 400890c:	9005883a 	mov	r2,r18
 4008910:	1ce7c83a 	sub	r19,r3,r19
 4008914:	25cf883a 	add	r7,r4,r23
 4008918:	84c00215 	stw	r19,8(r16)
 400891c:	81c00015 	stw	r7,0(r16)
 4008920:	a0c00217 	ldw	r3,8(r20)
 4008924:	e0b9883a 	add	fp,fp,r2
 4008928:	90a5c83a 	sub	r18,r18,r2
 400892c:	18a7c83a 	sub	r19,r3,r2
 4008930:	a4c00215 	stw	r19,8(r20)
 4008934:	983fce26 	beq	r19,zero,4008870 <__flash_rwdata_start+0xffffafd0>
 4008938:	80c0030b 	ldhu	r3,12(r16)
 400893c:	903fe61e 	bne	r18,zero,40088d8 <__flash_rwdata_start+0xffffb038>
 4008940:	8f000017 	ldw	fp,0(r17)
 4008944:	8c800117 	ldw	r18,4(r17)
 4008948:	8c400204 	addi	r17,r17,8
 400894c:	003fe106 	br	40088d4 <__flash_rwdata_start+0xffffb034>
 4008950:	8cc00017 	ldw	r19,0(r17)
 4008954:	8c800117 	ldw	r18,4(r17)
 4008958:	8c400204 	addi	r17,r17,8
 400895c:	003fb306 	br	400882c <__flash_rwdata_start+0xffffaf8c>
 4008960:	0005883a 	mov	r2,zero
 4008964:	f800283a 	ret
 4008968:	81000017 	ldw	r4,0(r16)
 400896c:	80800417 	ldw	r2,16(r16)
 4008970:	11005a36 	bltu	r2,r4,4008adc <__sfvwrite_r+0x320>
 4008974:	85c00517 	ldw	r23,20(r16)
 4008978:	95c05836 	bltu	r18,r23,4008adc <__sfvwrite_r+0x320>
 400897c:	00a00034 	movhi	r2,32768
 4008980:	10bfffc4 	addi	r2,r2,-1
 4008984:	9009883a 	mov	r4,r18
 4008988:	1480012e 	bgeu	r2,r18,4008990 <__sfvwrite_r+0x1d4>
 400898c:	1009883a 	mov	r4,r2
 4008990:	b80b883a 	mov	r5,r23
 4008994:	400aed00 	call	400aed0 <__divsi3>
 4008998:	b80b883a 	mov	r5,r23
 400899c:	1009883a 	mov	r4,r2
 40089a0:	400b0840 	call	400b084 <__mulsi3>
 40089a4:	81400717 	ldw	r5,28(r16)
 40089a8:	80c00917 	ldw	r3,36(r16)
 40089ac:	100f883a 	mov	r7,r2
 40089b0:	e00d883a 	mov	r6,fp
 40089b4:	a809883a 	mov	r4,r21
 40089b8:	183ee83a 	callr	r3
 40089bc:	00bfd816 	blt	zero,r2,4008920 <__flash_rwdata_start+0xffffb080>
 40089c0:	8080030b 	ldhu	r2,12(r16)
 40089c4:	10801014 	ori	r2,r2,64
 40089c8:	8080030d 	sth	r2,12(r16)
 40089cc:	00bfffc4 	movi	r2,-1
 40089d0:	003fa806 	br	4008874 <__flash_rwdata_start+0xffffafd4>
 40089d4:	0027883a 	mov	r19,zero
 40089d8:	0011883a 	mov	r8,zero
 40089dc:	0039883a 	mov	fp,zero
 40089e0:	0025883a 	mov	r18,zero
 40089e4:	90001f26 	beq	r18,zero,4008a64 <__sfvwrite_r+0x2a8>
 40089e8:	40005a26 	beq	r8,zero,4008b54 <__sfvwrite_r+0x398>
 40089ec:	982d883a 	mov	r22,r19
 40089f0:	94c0012e 	bgeu	r18,r19,40089f8 <__sfvwrite_r+0x23c>
 40089f4:	902d883a 	mov	r22,r18
 40089f8:	81000017 	ldw	r4,0(r16)
 40089fc:	80800417 	ldw	r2,16(r16)
 4008a00:	b02f883a 	mov	r23,r22
 4008a04:	81c00517 	ldw	r7,20(r16)
 4008a08:	1100032e 	bgeu	r2,r4,4008a18 <__sfvwrite_r+0x25c>
 4008a0c:	80c00217 	ldw	r3,8(r16)
 4008a10:	38c7883a 	add	r3,r7,r3
 4008a14:	1d801816 	blt	r3,r22,4008a78 <__sfvwrite_r+0x2bc>
 4008a18:	b1c03e16 	blt	r22,r7,4008b14 <__sfvwrite_r+0x358>
 4008a1c:	80800917 	ldw	r2,36(r16)
 4008a20:	81400717 	ldw	r5,28(r16)
 4008a24:	e00d883a 	mov	r6,fp
 4008a28:	da000115 	stw	r8,4(sp)
 4008a2c:	a809883a 	mov	r4,r21
 4008a30:	103ee83a 	callr	r2
 4008a34:	102f883a 	mov	r23,r2
 4008a38:	da000117 	ldw	r8,4(sp)
 4008a3c:	00bfe00e 	bge	zero,r2,40089c0 <__flash_rwdata_start+0xffffb120>
 4008a40:	9de7c83a 	sub	r19,r19,r23
 4008a44:	98001f26 	beq	r19,zero,4008ac4 <__sfvwrite_r+0x308>
 4008a48:	a0800217 	ldw	r2,8(r20)
 4008a4c:	e5f9883a 	add	fp,fp,r23
 4008a50:	95e5c83a 	sub	r18,r18,r23
 4008a54:	15efc83a 	sub	r23,r2,r23
 4008a58:	a5c00215 	stw	r23,8(r20)
 4008a5c:	b83f8426 	beq	r23,zero,4008870 <__flash_rwdata_start+0xffffafd0>
 4008a60:	903fe11e 	bne	r18,zero,40089e8 <__flash_rwdata_start+0xffffb148>
 4008a64:	8f000017 	ldw	fp,0(r17)
 4008a68:	8c800117 	ldw	r18,4(r17)
 4008a6c:	0011883a 	mov	r8,zero
 4008a70:	8c400204 	addi	r17,r17,8
 4008a74:	003fdb06 	br	40089e4 <__flash_rwdata_start+0xffffb144>
 4008a78:	180d883a 	mov	r6,r3
 4008a7c:	e00b883a 	mov	r5,fp
 4008a80:	da000115 	stw	r8,4(sp)
 4008a84:	d8c00015 	stw	r3,0(sp)
 4008a88:	40098440 	call	4009844 <memmove>
 4008a8c:	d8c00017 	ldw	r3,0(sp)
 4008a90:	80800017 	ldw	r2,0(r16)
 4008a94:	800b883a 	mov	r5,r16
 4008a98:	a809883a 	mov	r4,r21
 4008a9c:	10c5883a 	add	r2,r2,r3
 4008aa0:	80800015 	stw	r2,0(r16)
 4008aa4:	d8c00015 	stw	r3,0(sp)
 4008aa8:	400a6e40 	call	400a6e4 <_fflush_r>
 4008aac:	d8c00017 	ldw	r3,0(sp)
 4008ab0:	da000117 	ldw	r8,4(sp)
 4008ab4:	103fc21e 	bne	r2,zero,40089c0 <__flash_rwdata_start+0xffffb120>
 4008ab8:	182f883a 	mov	r23,r3
 4008abc:	9de7c83a 	sub	r19,r19,r23
 4008ac0:	983fe11e 	bne	r19,zero,4008a48 <__flash_rwdata_start+0xffffb1a8>
 4008ac4:	800b883a 	mov	r5,r16
 4008ac8:	a809883a 	mov	r4,r21
 4008acc:	400a6e40 	call	400a6e4 <_fflush_r>
 4008ad0:	103fbb1e 	bne	r2,zero,40089c0 <__flash_rwdata_start+0xffffb120>
 4008ad4:	0011883a 	mov	r8,zero
 4008ad8:	003fdb06 	br	4008a48 <__flash_rwdata_start+0xffffb1a8>
 4008adc:	94c0012e 	bgeu	r18,r19,4008ae4 <__sfvwrite_r+0x328>
 4008ae0:	9027883a 	mov	r19,r18
 4008ae4:	980d883a 	mov	r6,r19
 4008ae8:	e00b883a 	mov	r5,fp
 4008aec:	40098440 	call	4009844 <memmove>
 4008af0:	80800217 	ldw	r2,8(r16)
 4008af4:	80c00017 	ldw	r3,0(r16)
 4008af8:	14c5c83a 	sub	r2,r2,r19
 4008afc:	1cc7883a 	add	r3,r3,r19
 4008b00:	80800215 	stw	r2,8(r16)
 4008b04:	80c00015 	stw	r3,0(r16)
 4008b08:	10004326 	beq	r2,zero,4008c18 <__sfvwrite_r+0x45c>
 4008b0c:	9805883a 	mov	r2,r19
 4008b10:	003f8306 	br	4008920 <__flash_rwdata_start+0xffffb080>
 4008b14:	b00d883a 	mov	r6,r22
 4008b18:	e00b883a 	mov	r5,fp
 4008b1c:	da000115 	stw	r8,4(sp)
 4008b20:	40098440 	call	4009844 <memmove>
 4008b24:	80800217 	ldw	r2,8(r16)
 4008b28:	80c00017 	ldw	r3,0(r16)
 4008b2c:	da000117 	ldw	r8,4(sp)
 4008b30:	1585c83a 	sub	r2,r2,r22
 4008b34:	1dad883a 	add	r22,r3,r22
 4008b38:	80800215 	stw	r2,8(r16)
 4008b3c:	85800015 	stw	r22,0(r16)
 4008b40:	003fbf06 	br	4008a40 <__flash_rwdata_start+0xffffb1a0>
 4008b44:	81000017 	ldw	r4,0(r16)
 4008b48:	9027883a 	mov	r19,r18
 4008b4c:	902f883a 	mov	r23,r18
 4008b50:	003f6906 	br	40088f8 <__flash_rwdata_start+0xffffb058>
 4008b54:	900d883a 	mov	r6,r18
 4008b58:	01400284 	movi	r5,10
 4008b5c:	e009883a 	mov	r4,fp
 4008b60:	40096180 	call	4009618 <memchr>
 4008b64:	10003e26 	beq	r2,zero,4008c60 <__sfvwrite_r+0x4a4>
 4008b68:	10800044 	addi	r2,r2,1
 4008b6c:	1727c83a 	sub	r19,r2,fp
 4008b70:	02000044 	movi	r8,1
 4008b74:	003f9d06 	br	40089ec <__flash_rwdata_start+0xffffb14c>
 4008b78:	80800517 	ldw	r2,20(r16)
 4008b7c:	81400417 	ldw	r5,16(r16)
 4008b80:	81c00017 	ldw	r7,0(r16)
 4008b84:	10a7883a 	add	r19,r2,r2
 4008b88:	9885883a 	add	r2,r19,r2
 4008b8c:	1026d7fa 	srli	r19,r2,31
 4008b90:	396dc83a 	sub	r22,r7,r5
 4008b94:	b1000044 	addi	r4,r22,1
 4008b98:	9885883a 	add	r2,r19,r2
 4008b9c:	1027d07a 	srai	r19,r2,1
 4008ba0:	2485883a 	add	r2,r4,r18
 4008ba4:	980d883a 	mov	r6,r19
 4008ba8:	9880022e 	bgeu	r19,r2,4008bb4 <__sfvwrite_r+0x3f8>
 4008bac:	1027883a 	mov	r19,r2
 4008bb0:	100d883a 	mov	r6,r2
 4008bb4:	18c1000c 	andi	r3,r3,1024
 4008bb8:	18001c26 	beq	r3,zero,4008c2c <__sfvwrite_r+0x470>
 4008bbc:	300b883a 	mov	r5,r6
 4008bc0:	a809883a 	mov	r4,r21
 4008bc4:	4008e0c0 	call	4008e0c <_malloc_r>
 4008bc8:	102f883a 	mov	r23,r2
 4008bcc:	10002926 	beq	r2,zero,4008c74 <__sfvwrite_r+0x4b8>
 4008bd0:	81400417 	ldw	r5,16(r16)
 4008bd4:	b00d883a 	mov	r6,r22
 4008bd8:	1009883a 	mov	r4,r2
 4008bdc:	40096fc0 	call	40096fc <memcpy>
 4008be0:	8080030b 	ldhu	r2,12(r16)
 4008be4:	00fedfc4 	movi	r3,-1153
 4008be8:	10c4703a 	and	r2,r2,r3
 4008bec:	10802014 	ori	r2,r2,128
 4008bf0:	8080030d 	sth	r2,12(r16)
 4008bf4:	bd89883a 	add	r4,r23,r22
 4008bf8:	9d8fc83a 	sub	r7,r19,r22
 4008bfc:	85c00415 	stw	r23,16(r16)
 4008c00:	84c00515 	stw	r19,20(r16)
 4008c04:	81000015 	stw	r4,0(r16)
 4008c08:	9027883a 	mov	r19,r18
 4008c0c:	81c00215 	stw	r7,8(r16)
 4008c10:	902f883a 	mov	r23,r18
 4008c14:	003f3806 	br	40088f8 <__flash_rwdata_start+0xffffb058>
 4008c18:	800b883a 	mov	r5,r16
 4008c1c:	a809883a 	mov	r4,r21
 4008c20:	400a6e40 	call	400a6e4 <_fflush_r>
 4008c24:	103fb926 	beq	r2,zero,4008b0c <__flash_rwdata_start+0xffffb26c>
 4008c28:	003f6506 	br	40089c0 <__flash_rwdata_start+0xffffb120>
 4008c2c:	a809883a 	mov	r4,r21
 4008c30:	4009ac80 	call	4009ac8 <_realloc_r>
 4008c34:	102f883a 	mov	r23,r2
 4008c38:	103fee1e 	bne	r2,zero,4008bf4 <__flash_rwdata_start+0xffffb354>
 4008c3c:	81400417 	ldw	r5,16(r16)
 4008c40:	a809883a 	mov	r4,r21
 4008c44:	400a8940 	call	400a894 <_free_r>
 4008c48:	8080030b 	ldhu	r2,12(r16)
 4008c4c:	00ffdfc4 	movi	r3,-129
 4008c50:	1884703a 	and	r2,r3,r2
 4008c54:	00c00304 	movi	r3,12
 4008c58:	a8c00015 	stw	r3,0(r21)
 4008c5c:	003f5906 	br	40089c4 <__flash_rwdata_start+0xffffb124>
 4008c60:	94c00044 	addi	r19,r18,1
 4008c64:	02000044 	movi	r8,1
 4008c68:	003f6006 	br	40089ec <__flash_rwdata_start+0xffffb14c>
 4008c6c:	00bfffc4 	movi	r2,-1
 4008c70:	003f0006 	br	4008874 <__flash_rwdata_start+0xffffafd4>
 4008c74:	00800304 	movi	r2,12
 4008c78:	a8800015 	stw	r2,0(r21)
 4008c7c:	8080030b 	ldhu	r2,12(r16)
 4008c80:	003f5006 	br	40089c4 <__flash_rwdata_start+0xffffb124>

04008c84 <_fwalk>:
 4008c84:	defff704 	addi	sp,sp,-36
 4008c88:	dd000415 	stw	r20,16(sp)
 4008c8c:	dfc00815 	stw	ra,32(sp)
 4008c90:	ddc00715 	stw	r23,28(sp)
 4008c94:	dd800615 	stw	r22,24(sp)
 4008c98:	dd400515 	stw	r21,20(sp)
 4008c9c:	dcc00315 	stw	r19,12(sp)
 4008ca0:	dc800215 	stw	r18,8(sp)
 4008ca4:	dc400115 	stw	r17,4(sp)
 4008ca8:	dc000015 	stw	r16,0(sp)
 4008cac:	2500b804 	addi	r20,r4,736
 4008cb0:	a0002326 	beq	r20,zero,4008d40 <_fwalk+0xbc>
 4008cb4:	282b883a 	mov	r21,r5
 4008cb8:	002f883a 	mov	r23,zero
 4008cbc:	05800044 	movi	r22,1
 4008cc0:	04ffffc4 	movi	r19,-1
 4008cc4:	a4400117 	ldw	r17,4(r20)
 4008cc8:	a4800217 	ldw	r18,8(r20)
 4008ccc:	8c7fffc4 	addi	r17,r17,-1
 4008cd0:	88000d16 	blt	r17,zero,4008d08 <_fwalk+0x84>
 4008cd4:	94000304 	addi	r16,r18,12
 4008cd8:	94800384 	addi	r18,r18,14
 4008cdc:	8080000b 	ldhu	r2,0(r16)
 4008ce0:	8c7fffc4 	addi	r17,r17,-1
 4008ce4:	813ffd04 	addi	r4,r16,-12
 4008ce8:	b080042e 	bgeu	r22,r2,4008cfc <_fwalk+0x78>
 4008cec:	9080000f 	ldh	r2,0(r18)
 4008cf0:	14c00226 	beq	r2,r19,4008cfc <_fwalk+0x78>
 4008cf4:	a83ee83a 	callr	r21
 4008cf8:	b8aeb03a 	or	r23,r23,r2
 4008cfc:	84001a04 	addi	r16,r16,104
 4008d00:	94801a04 	addi	r18,r18,104
 4008d04:	8cfff51e 	bne	r17,r19,4008cdc <__flash_rwdata_start+0xffffb43c>
 4008d08:	a5000017 	ldw	r20,0(r20)
 4008d0c:	a03fed1e 	bne	r20,zero,4008cc4 <__flash_rwdata_start+0xffffb424>
 4008d10:	b805883a 	mov	r2,r23
 4008d14:	dfc00817 	ldw	ra,32(sp)
 4008d18:	ddc00717 	ldw	r23,28(sp)
 4008d1c:	dd800617 	ldw	r22,24(sp)
 4008d20:	dd400517 	ldw	r21,20(sp)
 4008d24:	dd000417 	ldw	r20,16(sp)
 4008d28:	dcc00317 	ldw	r19,12(sp)
 4008d2c:	dc800217 	ldw	r18,8(sp)
 4008d30:	dc400117 	ldw	r17,4(sp)
 4008d34:	dc000017 	ldw	r16,0(sp)
 4008d38:	dec00904 	addi	sp,sp,36
 4008d3c:	f800283a 	ret
 4008d40:	002f883a 	mov	r23,zero
 4008d44:	003ff206 	br	4008d10 <__flash_rwdata_start+0xffffb470>

04008d48 <_fwalk_reent>:
 4008d48:	defff704 	addi	sp,sp,-36
 4008d4c:	dd000415 	stw	r20,16(sp)
 4008d50:	dfc00815 	stw	ra,32(sp)
 4008d54:	ddc00715 	stw	r23,28(sp)
 4008d58:	dd800615 	stw	r22,24(sp)
 4008d5c:	dd400515 	stw	r21,20(sp)
 4008d60:	dcc00315 	stw	r19,12(sp)
 4008d64:	dc800215 	stw	r18,8(sp)
 4008d68:	dc400115 	stw	r17,4(sp)
 4008d6c:	dc000015 	stw	r16,0(sp)
 4008d70:	2500b804 	addi	r20,r4,736
 4008d74:	a0002326 	beq	r20,zero,4008e04 <_fwalk_reent+0xbc>
 4008d78:	282b883a 	mov	r21,r5
 4008d7c:	2027883a 	mov	r19,r4
 4008d80:	002f883a 	mov	r23,zero
 4008d84:	05800044 	movi	r22,1
 4008d88:	04bfffc4 	movi	r18,-1
 4008d8c:	a4400117 	ldw	r17,4(r20)
 4008d90:	a4000217 	ldw	r16,8(r20)
 4008d94:	8c7fffc4 	addi	r17,r17,-1
 4008d98:	88000c16 	blt	r17,zero,4008dcc <_fwalk_reent+0x84>
 4008d9c:	84000304 	addi	r16,r16,12
 4008da0:	8080000b 	ldhu	r2,0(r16)
 4008da4:	8c7fffc4 	addi	r17,r17,-1
 4008da8:	817ffd04 	addi	r5,r16,-12
 4008dac:	b080052e 	bgeu	r22,r2,4008dc4 <_fwalk_reent+0x7c>
 4008db0:	8080008f 	ldh	r2,2(r16)
 4008db4:	9809883a 	mov	r4,r19
 4008db8:	14800226 	beq	r2,r18,4008dc4 <_fwalk_reent+0x7c>
 4008dbc:	a83ee83a 	callr	r21
 4008dc0:	b8aeb03a 	or	r23,r23,r2
 4008dc4:	84001a04 	addi	r16,r16,104
 4008dc8:	8cbff51e 	bne	r17,r18,4008da0 <__flash_rwdata_start+0xffffb500>
 4008dcc:	a5000017 	ldw	r20,0(r20)
 4008dd0:	a03fee1e 	bne	r20,zero,4008d8c <__flash_rwdata_start+0xffffb4ec>
 4008dd4:	b805883a 	mov	r2,r23
 4008dd8:	dfc00817 	ldw	ra,32(sp)
 4008ddc:	ddc00717 	ldw	r23,28(sp)
 4008de0:	dd800617 	ldw	r22,24(sp)
 4008de4:	dd400517 	ldw	r21,20(sp)
 4008de8:	dd000417 	ldw	r20,16(sp)
 4008dec:	dcc00317 	ldw	r19,12(sp)
 4008df0:	dc800217 	ldw	r18,8(sp)
 4008df4:	dc400117 	ldw	r17,4(sp)
 4008df8:	dc000017 	ldw	r16,0(sp)
 4008dfc:	dec00904 	addi	sp,sp,36
 4008e00:	f800283a 	ret
 4008e04:	002f883a 	mov	r23,zero
 4008e08:	003ff206 	br	4008dd4 <__flash_rwdata_start+0xffffb534>

04008e0c <_malloc_r>:
 4008e0c:	defff504 	addi	sp,sp,-44
 4008e10:	dc800315 	stw	r18,12(sp)
 4008e14:	dfc00a15 	stw	ra,40(sp)
 4008e18:	df000915 	stw	fp,36(sp)
 4008e1c:	ddc00815 	stw	r23,32(sp)
 4008e20:	dd800715 	stw	r22,28(sp)
 4008e24:	dd400615 	stw	r21,24(sp)
 4008e28:	dd000515 	stw	r20,20(sp)
 4008e2c:	dcc00415 	stw	r19,16(sp)
 4008e30:	dc400215 	stw	r17,8(sp)
 4008e34:	dc000115 	stw	r16,4(sp)
 4008e38:	288002c4 	addi	r2,r5,11
 4008e3c:	00c00584 	movi	r3,22
 4008e40:	2025883a 	mov	r18,r4
 4008e44:	18807f2e 	bgeu	r3,r2,4009044 <_malloc_r+0x238>
 4008e48:	047ffe04 	movi	r17,-8
 4008e4c:	1462703a 	and	r17,r2,r17
 4008e50:	8800a316 	blt	r17,zero,40090e0 <_malloc_r+0x2d4>
 4008e54:	8940a236 	bltu	r17,r5,40090e0 <_malloc_r+0x2d4>
 4008e58:	400b6480 	call	400b648 <__malloc_lock>
 4008e5c:	00807dc4 	movi	r2,503
 4008e60:	1441e92e 	bgeu	r2,r17,4009608 <_malloc_r+0x7fc>
 4008e64:	8804d27a 	srli	r2,r17,9
 4008e68:	1000a126 	beq	r2,zero,40090f0 <_malloc_r+0x2e4>
 4008e6c:	00c00104 	movi	r3,4
 4008e70:	18811e36 	bltu	r3,r2,40092ec <_malloc_r+0x4e0>
 4008e74:	8804d1ba 	srli	r2,r17,6
 4008e78:	12000e44 	addi	r8,r2,57
 4008e7c:	11c00e04 	addi	r7,r2,56
 4008e80:	4209883a 	add	r4,r8,r8
 4008e84:	04c00034 	movhi	r19,0
 4008e88:	2109883a 	add	r4,r4,r4
 4008e8c:	9cc11d04 	addi	r19,r19,1140
 4008e90:	2109883a 	add	r4,r4,r4
 4008e94:	9909883a 	add	r4,r19,r4
 4008e98:	24000117 	ldw	r16,4(r4)
 4008e9c:	213ffe04 	addi	r4,r4,-8
 4008ea0:	24009726 	beq	r4,r16,4009100 <_malloc_r+0x2f4>
 4008ea4:	80800117 	ldw	r2,4(r16)
 4008ea8:	01bfff04 	movi	r6,-4
 4008eac:	014003c4 	movi	r5,15
 4008eb0:	1184703a 	and	r2,r2,r6
 4008eb4:	1447c83a 	sub	r3,r2,r17
 4008eb8:	28c00716 	blt	r5,r3,4008ed8 <_malloc_r+0xcc>
 4008ebc:	1800920e 	bge	r3,zero,4009108 <_malloc_r+0x2fc>
 4008ec0:	84000317 	ldw	r16,12(r16)
 4008ec4:	24008e26 	beq	r4,r16,4009100 <_malloc_r+0x2f4>
 4008ec8:	80800117 	ldw	r2,4(r16)
 4008ecc:	1184703a 	and	r2,r2,r6
 4008ed0:	1447c83a 	sub	r3,r2,r17
 4008ed4:	28fff90e 	bge	r5,r3,4008ebc <__flash_rwdata_start+0xffffb61c>
 4008ed8:	3809883a 	mov	r4,r7
 4008edc:	01800034 	movhi	r6,0
 4008ee0:	9c000417 	ldw	r16,16(r19)
 4008ee4:	31811d04 	addi	r6,r6,1140
 4008ee8:	32000204 	addi	r8,r6,8
 4008eec:	82013426 	beq	r16,r8,40093c0 <_malloc_r+0x5b4>
 4008ef0:	80c00117 	ldw	r3,4(r16)
 4008ef4:	00bfff04 	movi	r2,-4
 4008ef8:	188e703a 	and	r7,r3,r2
 4008efc:	3c45c83a 	sub	r2,r7,r17
 4008f00:	00c003c4 	movi	r3,15
 4008f04:	18811f16 	blt	r3,r2,4009384 <_malloc_r+0x578>
 4008f08:	32000515 	stw	r8,20(r6)
 4008f0c:	32000415 	stw	r8,16(r6)
 4008f10:	10007f0e 	bge	r2,zero,4009110 <_malloc_r+0x304>
 4008f14:	00807fc4 	movi	r2,511
 4008f18:	11c0fd36 	bltu	r2,r7,4009310 <_malloc_r+0x504>
 4008f1c:	3806d0fa 	srli	r3,r7,3
 4008f20:	01c00044 	movi	r7,1
 4008f24:	30800117 	ldw	r2,4(r6)
 4008f28:	19400044 	addi	r5,r3,1
 4008f2c:	294b883a 	add	r5,r5,r5
 4008f30:	1807d0ba 	srai	r3,r3,2
 4008f34:	294b883a 	add	r5,r5,r5
 4008f38:	294b883a 	add	r5,r5,r5
 4008f3c:	298b883a 	add	r5,r5,r6
 4008f40:	38c6983a 	sll	r3,r7,r3
 4008f44:	29c00017 	ldw	r7,0(r5)
 4008f48:	2a7ffe04 	addi	r9,r5,-8
 4008f4c:	1886b03a 	or	r3,r3,r2
 4008f50:	82400315 	stw	r9,12(r16)
 4008f54:	81c00215 	stw	r7,8(r16)
 4008f58:	30c00115 	stw	r3,4(r6)
 4008f5c:	2c000015 	stw	r16,0(r5)
 4008f60:	3c000315 	stw	r16,12(r7)
 4008f64:	2005d0ba 	srai	r2,r4,2
 4008f68:	01400044 	movi	r5,1
 4008f6c:	288a983a 	sll	r5,r5,r2
 4008f70:	19406f36 	bltu	r3,r5,4009130 <_malloc_r+0x324>
 4008f74:	28c4703a 	and	r2,r5,r3
 4008f78:	10000a1e 	bne	r2,zero,4008fa4 <_malloc_r+0x198>
 4008f7c:	00bfff04 	movi	r2,-4
 4008f80:	294b883a 	add	r5,r5,r5
 4008f84:	2088703a 	and	r4,r4,r2
 4008f88:	28c4703a 	and	r2,r5,r3
 4008f8c:	21000104 	addi	r4,r4,4
 4008f90:	1000041e 	bne	r2,zero,4008fa4 <_malloc_r+0x198>
 4008f94:	294b883a 	add	r5,r5,r5
 4008f98:	28c4703a 	and	r2,r5,r3
 4008f9c:	21000104 	addi	r4,r4,4
 4008fa0:	103ffc26 	beq	r2,zero,4008f94 <__flash_rwdata_start+0xffffb6f4>
 4008fa4:	02bfff04 	movi	r10,-4
 4008fa8:	024003c4 	movi	r9,15
 4008fac:	21800044 	addi	r6,r4,1
 4008fb0:	318d883a 	add	r6,r6,r6
 4008fb4:	318d883a 	add	r6,r6,r6
 4008fb8:	318d883a 	add	r6,r6,r6
 4008fbc:	998d883a 	add	r6,r19,r6
 4008fc0:	333ffe04 	addi	r12,r6,-8
 4008fc4:	2017883a 	mov	r11,r4
 4008fc8:	31800104 	addi	r6,r6,4
 4008fcc:	34000017 	ldw	r16,0(r6)
 4008fd0:	31fffd04 	addi	r7,r6,-12
 4008fd4:	81c0041e 	bne	r16,r7,4008fe8 <_malloc_r+0x1dc>
 4008fd8:	0000fb06 	br	40093c8 <_malloc_r+0x5bc>
 4008fdc:	1801030e 	bge	r3,zero,40093ec <_malloc_r+0x5e0>
 4008fe0:	84000317 	ldw	r16,12(r16)
 4008fe4:	81c0f826 	beq	r16,r7,40093c8 <_malloc_r+0x5bc>
 4008fe8:	80800117 	ldw	r2,4(r16)
 4008fec:	1284703a 	and	r2,r2,r10
 4008ff0:	1447c83a 	sub	r3,r2,r17
 4008ff4:	48fff90e 	bge	r9,r3,4008fdc <__flash_rwdata_start+0xffffb73c>
 4008ff8:	80800317 	ldw	r2,12(r16)
 4008ffc:	81000217 	ldw	r4,8(r16)
 4009000:	89400054 	ori	r5,r17,1
 4009004:	81400115 	stw	r5,4(r16)
 4009008:	20800315 	stw	r2,12(r4)
 400900c:	11000215 	stw	r4,8(r2)
 4009010:	8463883a 	add	r17,r16,r17
 4009014:	9c400515 	stw	r17,20(r19)
 4009018:	9c400415 	stw	r17,16(r19)
 400901c:	18800054 	ori	r2,r3,1
 4009020:	88800115 	stw	r2,4(r17)
 4009024:	8a000315 	stw	r8,12(r17)
 4009028:	8a000215 	stw	r8,8(r17)
 400902c:	88e3883a 	add	r17,r17,r3
 4009030:	88c00015 	stw	r3,0(r17)
 4009034:	9009883a 	mov	r4,r18
 4009038:	400b66c0 	call	400b66c <__malloc_unlock>
 400903c:	80800204 	addi	r2,r16,8
 4009040:	00001b06 	br	40090b0 <_malloc_r+0x2a4>
 4009044:	04400404 	movi	r17,16
 4009048:	89402536 	bltu	r17,r5,40090e0 <_malloc_r+0x2d4>
 400904c:	400b6480 	call	400b648 <__malloc_lock>
 4009050:	00800184 	movi	r2,6
 4009054:	01000084 	movi	r4,2
 4009058:	04c00034 	movhi	r19,0
 400905c:	1085883a 	add	r2,r2,r2
 4009060:	9cc11d04 	addi	r19,r19,1140
 4009064:	1085883a 	add	r2,r2,r2
 4009068:	9885883a 	add	r2,r19,r2
 400906c:	14000117 	ldw	r16,4(r2)
 4009070:	10fffe04 	addi	r3,r2,-8
 4009074:	80c0d926 	beq	r16,r3,40093dc <_malloc_r+0x5d0>
 4009078:	80c00117 	ldw	r3,4(r16)
 400907c:	81000317 	ldw	r4,12(r16)
 4009080:	00bfff04 	movi	r2,-4
 4009084:	1884703a 	and	r2,r3,r2
 4009088:	81400217 	ldw	r5,8(r16)
 400908c:	8085883a 	add	r2,r16,r2
 4009090:	10c00117 	ldw	r3,4(r2)
 4009094:	29000315 	stw	r4,12(r5)
 4009098:	21400215 	stw	r5,8(r4)
 400909c:	18c00054 	ori	r3,r3,1
 40090a0:	10c00115 	stw	r3,4(r2)
 40090a4:	9009883a 	mov	r4,r18
 40090a8:	400b66c0 	call	400b66c <__malloc_unlock>
 40090ac:	80800204 	addi	r2,r16,8
 40090b0:	dfc00a17 	ldw	ra,40(sp)
 40090b4:	df000917 	ldw	fp,36(sp)
 40090b8:	ddc00817 	ldw	r23,32(sp)
 40090bc:	dd800717 	ldw	r22,28(sp)
 40090c0:	dd400617 	ldw	r21,24(sp)
 40090c4:	dd000517 	ldw	r20,20(sp)
 40090c8:	dcc00417 	ldw	r19,16(sp)
 40090cc:	dc800317 	ldw	r18,12(sp)
 40090d0:	dc400217 	ldw	r17,8(sp)
 40090d4:	dc000117 	ldw	r16,4(sp)
 40090d8:	dec00b04 	addi	sp,sp,44
 40090dc:	f800283a 	ret
 40090e0:	00800304 	movi	r2,12
 40090e4:	90800015 	stw	r2,0(r18)
 40090e8:	0005883a 	mov	r2,zero
 40090ec:	003ff006 	br	40090b0 <__flash_rwdata_start+0xffffb810>
 40090f0:	01002004 	movi	r4,128
 40090f4:	02001004 	movi	r8,64
 40090f8:	01c00fc4 	movi	r7,63
 40090fc:	003f6106 	br	4008e84 <__flash_rwdata_start+0xffffb5e4>
 4009100:	4009883a 	mov	r4,r8
 4009104:	003f7506 	br	4008edc <__flash_rwdata_start+0xffffb63c>
 4009108:	81000317 	ldw	r4,12(r16)
 400910c:	003fde06 	br	4009088 <__flash_rwdata_start+0xffffb7e8>
 4009110:	81c5883a 	add	r2,r16,r7
 4009114:	11400117 	ldw	r5,4(r2)
 4009118:	9009883a 	mov	r4,r18
 400911c:	29400054 	ori	r5,r5,1
 4009120:	11400115 	stw	r5,4(r2)
 4009124:	400b66c0 	call	400b66c <__malloc_unlock>
 4009128:	80800204 	addi	r2,r16,8
 400912c:	003fe006 	br	40090b0 <__flash_rwdata_start+0xffffb810>
 4009130:	9c000217 	ldw	r16,8(r19)
 4009134:	00bfff04 	movi	r2,-4
 4009138:	85800117 	ldw	r22,4(r16)
 400913c:	b0ac703a 	and	r22,r22,r2
 4009140:	b4400336 	bltu	r22,r17,4009150 <_malloc_r+0x344>
 4009144:	b445c83a 	sub	r2,r22,r17
 4009148:	00c003c4 	movi	r3,15
 400914c:	18805d16 	blt	r3,r2,40092c4 <_malloc_r+0x4b8>
 4009150:	05c00034 	movhi	r23,0
 4009154:	00800034 	movhi	r2,0
 4009158:	1086b104 	addi	r2,r2,6852
 400915c:	bdc6a304 	addi	r23,r23,6796
 4009160:	15400017 	ldw	r21,0(r2)
 4009164:	b8c00017 	ldw	r3,0(r23)
 4009168:	00bfffc4 	movi	r2,-1
 400916c:	858d883a 	add	r6,r16,r22
 4009170:	8d6b883a 	add	r21,r17,r21
 4009174:	1880ea26 	beq	r3,r2,4009520 <_malloc_r+0x714>
 4009178:	ad4403c4 	addi	r21,r21,4111
 400917c:	00bc0004 	movi	r2,-4096
 4009180:	a8aa703a 	and	r21,r21,r2
 4009184:	a80b883a 	mov	r5,r21
 4009188:	9009883a 	mov	r4,r18
 400918c:	d9800015 	stw	r6,0(sp)
 4009190:	400a02c0 	call	400a02c <_sbrk_r>
 4009194:	1029883a 	mov	r20,r2
 4009198:	00bfffc4 	movi	r2,-1
 400919c:	d9800017 	ldw	r6,0(sp)
 40091a0:	a080e826 	beq	r20,r2,4009544 <_malloc_r+0x738>
 40091a4:	a180a636 	bltu	r20,r6,4009440 <_malloc_r+0x634>
 40091a8:	07000034 	movhi	fp,0
 40091ac:	e706ba04 	addi	fp,fp,6888
 40091b0:	e0800017 	ldw	r2,0(fp)
 40091b4:	a887883a 	add	r3,r21,r2
 40091b8:	e0c00015 	stw	r3,0(fp)
 40091bc:	3500e626 	beq	r6,r20,4009558 <_malloc_r+0x74c>
 40091c0:	b9000017 	ldw	r4,0(r23)
 40091c4:	00bfffc4 	movi	r2,-1
 40091c8:	2080ee26 	beq	r4,r2,4009584 <_malloc_r+0x778>
 40091cc:	a185c83a 	sub	r2,r20,r6
 40091d0:	10c5883a 	add	r2,r2,r3
 40091d4:	e0800015 	stw	r2,0(fp)
 40091d8:	a0c001cc 	andi	r3,r20,7
 40091dc:	1800bc26 	beq	r3,zero,40094d0 <_malloc_r+0x6c4>
 40091e0:	a0e9c83a 	sub	r20,r20,r3
 40091e4:	00840204 	movi	r2,4104
 40091e8:	a5000204 	addi	r20,r20,8
 40091ec:	10c7c83a 	sub	r3,r2,r3
 40091f0:	a545883a 	add	r2,r20,r21
 40091f4:	1083ffcc 	andi	r2,r2,4095
 40091f8:	18abc83a 	sub	r21,r3,r2
 40091fc:	a80b883a 	mov	r5,r21
 4009200:	9009883a 	mov	r4,r18
 4009204:	400a02c0 	call	400a02c <_sbrk_r>
 4009208:	00ffffc4 	movi	r3,-1
 400920c:	10c0e126 	beq	r2,r3,4009594 <_malloc_r+0x788>
 4009210:	1505c83a 	sub	r2,r2,r20
 4009214:	1545883a 	add	r2,r2,r21
 4009218:	10800054 	ori	r2,r2,1
 400921c:	e0c00017 	ldw	r3,0(fp)
 4009220:	9d000215 	stw	r20,8(r19)
 4009224:	a0800115 	stw	r2,4(r20)
 4009228:	a8c7883a 	add	r3,r21,r3
 400922c:	e0c00015 	stw	r3,0(fp)
 4009230:	84c00e26 	beq	r16,r19,400926c <_malloc_r+0x460>
 4009234:	018003c4 	movi	r6,15
 4009238:	3580a72e 	bgeu	r6,r22,40094d8 <_malloc_r+0x6cc>
 400923c:	81400117 	ldw	r5,4(r16)
 4009240:	013ffe04 	movi	r4,-8
 4009244:	b0bffd04 	addi	r2,r22,-12
 4009248:	1104703a 	and	r2,r2,r4
 400924c:	2900004c 	andi	r4,r5,1
 4009250:	2088b03a 	or	r4,r4,r2
 4009254:	81000115 	stw	r4,4(r16)
 4009258:	01400144 	movi	r5,5
 400925c:	8089883a 	add	r4,r16,r2
 4009260:	21400115 	stw	r5,4(r4)
 4009264:	21400215 	stw	r5,8(r4)
 4009268:	3080cd36 	bltu	r6,r2,40095a0 <_malloc_r+0x794>
 400926c:	00800034 	movhi	r2,0
 4009270:	1086b004 	addi	r2,r2,6848
 4009274:	11000017 	ldw	r4,0(r2)
 4009278:	20c0012e 	bgeu	r4,r3,4009280 <_malloc_r+0x474>
 400927c:	10c00015 	stw	r3,0(r2)
 4009280:	00800034 	movhi	r2,0
 4009284:	1086af04 	addi	r2,r2,6844
 4009288:	11000017 	ldw	r4,0(r2)
 400928c:	9c000217 	ldw	r16,8(r19)
 4009290:	20c0012e 	bgeu	r4,r3,4009298 <_malloc_r+0x48c>
 4009294:	10c00015 	stw	r3,0(r2)
 4009298:	80c00117 	ldw	r3,4(r16)
 400929c:	00bfff04 	movi	r2,-4
 40092a0:	1886703a 	and	r3,r3,r2
 40092a4:	1c45c83a 	sub	r2,r3,r17
 40092a8:	1c400236 	bltu	r3,r17,40092b4 <_malloc_r+0x4a8>
 40092ac:	00c003c4 	movi	r3,15
 40092b0:	18800416 	blt	r3,r2,40092c4 <_malloc_r+0x4b8>
 40092b4:	9009883a 	mov	r4,r18
 40092b8:	400b66c0 	call	400b66c <__malloc_unlock>
 40092bc:	0005883a 	mov	r2,zero
 40092c0:	003f7b06 	br	40090b0 <__flash_rwdata_start+0xffffb810>
 40092c4:	88c00054 	ori	r3,r17,1
 40092c8:	80c00115 	stw	r3,4(r16)
 40092cc:	8463883a 	add	r17,r16,r17
 40092d0:	10800054 	ori	r2,r2,1
 40092d4:	9c400215 	stw	r17,8(r19)
 40092d8:	88800115 	stw	r2,4(r17)
 40092dc:	9009883a 	mov	r4,r18
 40092e0:	400b66c0 	call	400b66c <__malloc_unlock>
 40092e4:	80800204 	addi	r2,r16,8
 40092e8:	003f7106 	br	40090b0 <__flash_rwdata_start+0xffffb810>
 40092ec:	00c00504 	movi	r3,20
 40092f0:	18804a2e 	bgeu	r3,r2,400941c <_malloc_r+0x610>
 40092f4:	00c01504 	movi	r3,84
 40092f8:	18806e36 	bltu	r3,r2,40094b4 <_malloc_r+0x6a8>
 40092fc:	8804d33a 	srli	r2,r17,12
 4009300:	12001bc4 	addi	r8,r2,111
 4009304:	11c01b84 	addi	r7,r2,110
 4009308:	4209883a 	add	r4,r8,r8
 400930c:	003edd06 	br	4008e84 <__flash_rwdata_start+0xffffb5e4>
 4009310:	3804d27a 	srli	r2,r7,9
 4009314:	00c00104 	movi	r3,4
 4009318:	1880442e 	bgeu	r3,r2,400942c <_malloc_r+0x620>
 400931c:	00c00504 	movi	r3,20
 4009320:	18808136 	bltu	r3,r2,4009528 <_malloc_r+0x71c>
 4009324:	11401704 	addi	r5,r2,92
 4009328:	10c016c4 	addi	r3,r2,91
 400932c:	294b883a 	add	r5,r5,r5
 4009330:	294b883a 	add	r5,r5,r5
 4009334:	294b883a 	add	r5,r5,r5
 4009338:	994b883a 	add	r5,r19,r5
 400933c:	28800017 	ldw	r2,0(r5)
 4009340:	01800034 	movhi	r6,0
 4009344:	297ffe04 	addi	r5,r5,-8
 4009348:	31811d04 	addi	r6,r6,1140
 400934c:	28806526 	beq	r5,r2,40094e4 <_malloc_r+0x6d8>
 4009350:	01bfff04 	movi	r6,-4
 4009354:	10c00117 	ldw	r3,4(r2)
 4009358:	1986703a 	and	r3,r3,r6
 400935c:	38c0022e 	bgeu	r7,r3,4009368 <_malloc_r+0x55c>
 4009360:	10800217 	ldw	r2,8(r2)
 4009364:	28bffb1e 	bne	r5,r2,4009354 <__flash_rwdata_start+0xffffbab4>
 4009368:	11400317 	ldw	r5,12(r2)
 400936c:	98c00117 	ldw	r3,4(r19)
 4009370:	81400315 	stw	r5,12(r16)
 4009374:	80800215 	stw	r2,8(r16)
 4009378:	2c000215 	stw	r16,8(r5)
 400937c:	14000315 	stw	r16,12(r2)
 4009380:	003ef806 	br	4008f64 <__flash_rwdata_start+0xffffb6c4>
 4009384:	88c00054 	ori	r3,r17,1
 4009388:	80c00115 	stw	r3,4(r16)
 400938c:	8463883a 	add	r17,r16,r17
 4009390:	34400515 	stw	r17,20(r6)
 4009394:	34400415 	stw	r17,16(r6)
 4009398:	10c00054 	ori	r3,r2,1
 400939c:	8a000315 	stw	r8,12(r17)
 40093a0:	8a000215 	stw	r8,8(r17)
 40093a4:	88c00115 	stw	r3,4(r17)
 40093a8:	88a3883a 	add	r17,r17,r2
 40093ac:	88800015 	stw	r2,0(r17)
 40093b0:	9009883a 	mov	r4,r18
 40093b4:	400b66c0 	call	400b66c <__malloc_unlock>
 40093b8:	80800204 	addi	r2,r16,8
 40093bc:	003f3c06 	br	40090b0 <__flash_rwdata_start+0xffffb810>
 40093c0:	30c00117 	ldw	r3,4(r6)
 40093c4:	003ee706 	br	4008f64 <__flash_rwdata_start+0xffffb6c4>
 40093c8:	5ac00044 	addi	r11,r11,1
 40093cc:	588000cc 	andi	r2,r11,3
 40093d0:	31800204 	addi	r6,r6,8
 40093d4:	103efd1e 	bne	r2,zero,4008fcc <__flash_rwdata_start+0xffffb72c>
 40093d8:	00002406 	br	400946c <_malloc_r+0x660>
 40093dc:	14000317 	ldw	r16,12(r2)
 40093e0:	143f251e 	bne	r2,r16,4009078 <__flash_rwdata_start+0xffffb7d8>
 40093e4:	21000084 	addi	r4,r4,2
 40093e8:	003ebc06 	br	4008edc <__flash_rwdata_start+0xffffb63c>
 40093ec:	8085883a 	add	r2,r16,r2
 40093f0:	10c00117 	ldw	r3,4(r2)
 40093f4:	81000317 	ldw	r4,12(r16)
 40093f8:	81400217 	ldw	r5,8(r16)
 40093fc:	18c00054 	ori	r3,r3,1
 4009400:	10c00115 	stw	r3,4(r2)
 4009404:	29000315 	stw	r4,12(r5)
 4009408:	21400215 	stw	r5,8(r4)
 400940c:	9009883a 	mov	r4,r18
 4009410:	400b66c0 	call	400b66c <__malloc_unlock>
 4009414:	80800204 	addi	r2,r16,8
 4009418:	003f2506 	br	40090b0 <__flash_rwdata_start+0xffffb810>
 400941c:	12001704 	addi	r8,r2,92
 4009420:	11c016c4 	addi	r7,r2,91
 4009424:	4209883a 	add	r4,r8,r8
 4009428:	003e9606 	br	4008e84 <__flash_rwdata_start+0xffffb5e4>
 400942c:	3804d1ba 	srli	r2,r7,6
 4009430:	11400e44 	addi	r5,r2,57
 4009434:	10c00e04 	addi	r3,r2,56
 4009438:	294b883a 	add	r5,r5,r5
 400943c:	003fbc06 	br	4009330 <__flash_rwdata_start+0xffffba90>
 4009440:	84ff5926 	beq	r16,r19,40091a8 <__flash_rwdata_start+0xffffb908>
 4009444:	00800034 	movhi	r2,0
 4009448:	10811d04 	addi	r2,r2,1140
 400944c:	14000217 	ldw	r16,8(r2)
 4009450:	00bfff04 	movi	r2,-4
 4009454:	80c00117 	ldw	r3,4(r16)
 4009458:	1886703a 	and	r3,r3,r2
 400945c:	003f9106 	br	40092a4 <__flash_rwdata_start+0xffffba04>
 4009460:	60800217 	ldw	r2,8(r12)
 4009464:	213fffc4 	addi	r4,r4,-1
 4009468:	1300651e 	bne	r2,r12,4009600 <_malloc_r+0x7f4>
 400946c:	208000cc 	andi	r2,r4,3
 4009470:	633ffe04 	addi	r12,r12,-8
 4009474:	103ffa1e 	bne	r2,zero,4009460 <__flash_rwdata_start+0xffffbbc0>
 4009478:	98800117 	ldw	r2,4(r19)
 400947c:	0146303a 	nor	r3,zero,r5
 4009480:	1884703a 	and	r2,r3,r2
 4009484:	98800115 	stw	r2,4(r19)
 4009488:	294b883a 	add	r5,r5,r5
 400948c:	117f2836 	bltu	r2,r5,4009130 <__flash_rwdata_start+0xffffb890>
 4009490:	283f2726 	beq	r5,zero,4009130 <__flash_rwdata_start+0xffffb890>
 4009494:	2886703a 	and	r3,r5,r2
 4009498:	5809883a 	mov	r4,r11
 400949c:	183ec31e 	bne	r3,zero,4008fac <__flash_rwdata_start+0xffffb70c>
 40094a0:	294b883a 	add	r5,r5,r5
 40094a4:	2886703a 	and	r3,r5,r2
 40094a8:	21000104 	addi	r4,r4,4
 40094ac:	183ffc26 	beq	r3,zero,40094a0 <__flash_rwdata_start+0xffffbc00>
 40094b0:	003ebe06 	br	4008fac <__flash_rwdata_start+0xffffb70c>
 40094b4:	00c05504 	movi	r3,340
 40094b8:	18801236 	bltu	r3,r2,4009504 <_malloc_r+0x6f8>
 40094bc:	8804d3fa 	srli	r2,r17,15
 40094c0:	12001e04 	addi	r8,r2,120
 40094c4:	11c01dc4 	addi	r7,r2,119
 40094c8:	4209883a 	add	r4,r8,r8
 40094cc:	003e6d06 	br	4008e84 <__flash_rwdata_start+0xffffb5e4>
 40094d0:	00c40004 	movi	r3,4096
 40094d4:	003f4606 	br	40091f0 <__flash_rwdata_start+0xffffb950>
 40094d8:	00800044 	movi	r2,1
 40094dc:	a0800115 	stw	r2,4(r20)
 40094e0:	003f7406 	br	40092b4 <__flash_rwdata_start+0xffffba14>
 40094e4:	1805d0ba 	srai	r2,r3,2
 40094e8:	01c00044 	movi	r7,1
 40094ec:	30c00117 	ldw	r3,4(r6)
 40094f0:	388e983a 	sll	r7,r7,r2
 40094f4:	2805883a 	mov	r2,r5
 40094f8:	38c6b03a 	or	r3,r7,r3
 40094fc:	30c00115 	stw	r3,4(r6)
 4009500:	003f9b06 	br	4009370 <__flash_rwdata_start+0xffffbad0>
 4009504:	00c15504 	movi	r3,1364
 4009508:	18801a36 	bltu	r3,r2,4009574 <_malloc_r+0x768>
 400950c:	8804d4ba 	srli	r2,r17,18
 4009510:	12001f44 	addi	r8,r2,125
 4009514:	11c01f04 	addi	r7,r2,124
 4009518:	4209883a 	add	r4,r8,r8
 400951c:	003e5906 	br	4008e84 <__flash_rwdata_start+0xffffb5e4>
 4009520:	ad400404 	addi	r21,r21,16
 4009524:	003f1706 	br	4009184 <__flash_rwdata_start+0xffffb8e4>
 4009528:	00c01504 	movi	r3,84
 400952c:	18802336 	bltu	r3,r2,40095bc <_malloc_r+0x7b0>
 4009530:	3804d33a 	srli	r2,r7,12
 4009534:	11401bc4 	addi	r5,r2,111
 4009538:	10c01b84 	addi	r3,r2,110
 400953c:	294b883a 	add	r5,r5,r5
 4009540:	003f7b06 	br	4009330 <__flash_rwdata_start+0xffffba90>
 4009544:	9c000217 	ldw	r16,8(r19)
 4009548:	00bfff04 	movi	r2,-4
 400954c:	80c00117 	ldw	r3,4(r16)
 4009550:	1886703a 	and	r3,r3,r2
 4009554:	003f5306 	br	40092a4 <__flash_rwdata_start+0xffffba04>
 4009558:	3083ffcc 	andi	r2,r6,4095
 400955c:	103f181e 	bne	r2,zero,40091c0 <__flash_rwdata_start+0xffffb920>
 4009560:	99000217 	ldw	r4,8(r19)
 4009564:	b545883a 	add	r2,r22,r21
 4009568:	10800054 	ori	r2,r2,1
 400956c:	20800115 	stw	r2,4(r4)
 4009570:	003f3e06 	br	400926c <__flash_rwdata_start+0xffffb9cc>
 4009574:	01003f84 	movi	r4,254
 4009578:	02001fc4 	movi	r8,127
 400957c:	01c01f84 	movi	r7,126
 4009580:	003e4006 	br	4008e84 <__flash_rwdata_start+0xffffb5e4>
 4009584:	00800034 	movhi	r2,0
 4009588:	1086a304 	addi	r2,r2,6796
 400958c:	15000015 	stw	r20,0(r2)
 4009590:	003f1106 	br	40091d8 <__flash_rwdata_start+0xffffb938>
 4009594:	00800044 	movi	r2,1
 4009598:	002b883a 	mov	r21,zero
 400959c:	003f1f06 	br	400921c <__flash_rwdata_start+0xffffb97c>
 40095a0:	81400204 	addi	r5,r16,8
 40095a4:	9009883a 	mov	r4,r18
 40095a8:	400a8940 	call	400a894 <_free_r>
 40095ac:	00800034 	movhi	r2,0
 40095b0:	1086ba04 	addi	r2,r2,6888
 40095b4:	10c00017 	ldw	r3,0(r2)
 40095b8:	003f2c06 	br	400926c <__flash_rwdata_start+0xffffb9cc>
 40095bc:	00c05504 	movi	r3,340
 40095c0:	18800536 	bltu	r3,r2,40095d8 <_malloc_r+0x7cc>
 40095c4:	3804d3fa 	srli	r2,r7,15
 40095c8:	11401e04 	addi	r5,r2,120
 40095cc:	10c01dc4 	addi	r3,r2,119
 40095d0:	294b883a 	add	r5,r5,r5
 40095d4:	003f5606 	br	4009330 <__flash_rwdata_start+0xffffba90>
 40095d8:	00c15504 	movi	r3,1364
 40095dc:	18800536 	bltu	r3,r2,40095f4 <_malloc_r+0x7e8>
 40095e0:	3804d4ba 	srli	r2,r7,18
 40095e4:	11401f44 	addi	r5,r2,125
 40095e8:	10c01f04 	addi	r3,r2,124
 40095ec:	294b883a 	add	r5,r5,r5
 40095f0:	003f4f06 	br	4009330 <__flash_rwdata_start+0xffffba90>
 40095f4:	01403f84 	movi	r5,254
 40095f8:	00c01f84 	movi	r3,126
 40095fc:	003f4c06 	br	4009330 <__flash_rwdata_start+0xffffba90>
 4009600:	98800117 	ldw	r2,4(r19)
 4009604:	003fa006 	br	4009488 <__flash_rwdata_start+0xffffbbe8>
 4009608:	8808d0fa 	srli	r4,r17,3
 400960c:	20800044 	addi	r2,r4,1
 4009610:	1085883a 	add	r2,r2,r2
 4009614:	003e9006 	br	4009058 <__flash_rwdata_start+0xffffb7b8>

04009618 <memchr>:
 4009618:	208000cc 	andi	r2,r4,3
 400961c:	280f883a 	mov	r7,r5
 4009620:	10003426 	beq	r2,zero,40096f4 <memchr+0xdc>
 4009624:	30bfffc4 	addi	r2,r6,-1
 4009628:	30001a26 	beq	r6,zero,4009694 <memchr+0x7c>
 400962c:	20c00003 	ldbu	r3,0(r4)
 4009630:	29803fcc 	andi	r6,r5,255
 4009634:	30c0051e 	bne	r6,r3,400964c <memchr+0x34>
 4009638:	00001806 	br	400969c <memchr+0x84>
 400963c:	10001526 	beq	r2,zero,4009694 <memchr+0x7c>
 4009640:	20c00003 	ldbu	r3,0(r4)
 4009644:	10bfffc4 	addi	r2,r2,-1
 4009648:	30c01426 	beq	r6,r3,400969c <memchr+0x84>
 400964c:	21000044 	addi	r4,r4,1
 4009650:	20c000cc 	andi	r3,r4,3
 4009654:	183ff91e 	bne	r3,zero,400963c <__flash_rwdata_start+0xffffbd9c>
 4009658:	020000c4 	movi	r8,3
 400965c:	40801136 	bltu	r8,r2,40096a4 <memchr+0x8c>
 4009660:	10000c26 	beq	r2,zero,4009694 <memchr+0x7c>
 4009664:	20c00003 	ldbu	r3,0(r4)
 4009668:	29403fcc 	andi	r5,r5,255
 400966c:	28c00b26 	beq	r5,r3,400969c <memchr+0x84>
 4009670:	20c00044 	addi	r3,r4,1
 4009674:	39803fcc 	andi	r6,r7,255
 4009678:	2089883a 	add	r4,r4,r2
 400967c:	00000306 	br	400968c <memchr+0x74>
 4009680:	18c00044 	addi	r3,r3,1
 4009684:	197fffc3 	ldbu	r5,-1(r3)
 4009688:	31400526 	beq	r6,r5,40096a0 <memchr+0x88>
 400968c:	1805883a 	mov	r2,r3
 4009690:	20fffb1e 	bne	r4,r3,4009680 <__flash_rwdata_start+0xffffbde0>
 4009694:	0005883a 	mov	r2,zero
 4009698:	f800283a 	ret
 400969c:	2005883a 	mov	r2,r4
 40096a0:	f800283a 	ret
 40096a4:	28c03fcc 	andi	r3,r5,255
 40096a8:	1812923a 	slli	r9,r3,8
 40096ac:	02ffbff4 	movhi	r11,65279
 40096b0:	02a02074 	movhi	r10,32897
 40096b4:	48d2b03a 	or	r9,r9,r3
 40096b8:	4806943a 	slli	r3,r9,16
 40096bc:	5affbfc4 	addi	r11,r11,-257
 40096c0:	52a02004 	addi	r10,r10,-32640
 40096c4:	48d2b03a 	or	r9,r9,r3
 40096c8:	20c00017 	ldw	r3,0(r4)
 40096cc:	48c6f03a 	xor	r3,r9,r3
 40096d0:	1acd883a 	add	r6,r3,r11
 40096d4:	00c6303a 	nor	r3,zero,r3
 40096d8:	30c6703a 	and	r3,r6,r3
 40096dc:	1a86703a 	and	r3,r3,r10
 40096e0:	183fe01e 	bne	r3,zero,4009664 <__flash_rwdata_start+0xffffbdc4>
 40096e4:	10bfff04 	addi	r2,r2,-4
 40096e8:	21000104 	addi	r4,r4,4
 40096ec:	40bff636 	bltu	r8,r2,40096c8 <__flash_rwdata_start+0xffffbe28>
 40096f0:	003fdb06 	br	4009660 <__flash_rwdata_start+0xffffbdc0>
 40096f4:	3005883a 	mov	r2,r6
 40096f8:	003fd706 	br	4009658 <__flash_rwdata_start+0xffffbdb8>

040096fc <memcpy>:
 40096fc:	defffd04 	addi	sp,sp,-12
 4009700:	dfc00215 	stw	ra,8(sp)
 4009704:	dc400115 	stw	r17,4(sp)
 4009708:	dc000015 	stw	r16,0(sp)
 400970c:	00c003c4 	movi	r3,15
 4009710:	2005883a 	mov	r2,r4
 4009714:	1980452e 	bgeu	r3,r6,400982c <memcpy+0x130>
 4009718:	2906b03a 	or	r3,r5,r4
 400971c:	18c000cc 	andi	r3,r3,3
 4009720:	1800441e 	bne	r3,zero,4009834 <memcpy+0x138>
 4009724:	347ffc04 	addi	r17,r6,-16
 4009728:	8822d13a 	srli	r17,r17,4
 400972c:	28c00104 	addi	r3,r5,4
 4009730:	23400104 	addi	r13,r4,4
 4009734:	8820913a 	slli	r16,r17,4
 4009738:	2b000204 	addi	r12,r5,8
 400973c:	22c00204 	addi	r11,r4,8
 4009740:	84000504 	addi	r16,r16,20
 4009744:	2a800304 	addi	r10,r5,12
 4009748:	22400304 	addi	r9,r4,12
 400974c:	2c21883a 	add	r16,r5,r16
 4009750:	2811883a 	mov	r8,r5
 4009754:	200f883a 	mov	r7,r4
 4009758:	41000017 	ldw	r4,0(r8)
 400975c:	1fc00017 	ldw	ra,0(r3)
 4009760:	63c00017 	ldw	r15,0(r12)
 4009764:	39000015 	stw	r4,0(r7)
 4009768:	53800017 	ldw	r14,0(r10)
 400976c:	6fc00015 	stw	ra,0(r13)
 4009770:	5bc00015 	stw	r15,0(r11)
 4009774:	4b800015 	stw	r14,0(r9)
 4009778:	18c00404 	addi	r3,r3,16
 400977c:	39c00404 	addi	r7,r7,16
 4009780:	42000404 	addi	r8,r8,16
 4009784:	6b400404 	addi	r13,r13,16
 4009788:	63000404 	addi	r12,r12,16
 400978c:	5ac00404 	addi	r11,r11,16
 4009790:	52800404 	addi	r10,r10,16
 4009794:	4a400404 	addi	r9,r9,16
 4009798:	1c3fef1e 	bne	r3,r16,4009758 <__flash_rwdata_start+0xffffbeb8>
 400979c:	89c00044 	addi	r7,r17,1
 40097a0:	380e913a 	slli	r7,r7,4
 40097a4:	310003cc 	andi	r4,r6,15
 40097a8:	02c000c4 	movi	r11,3
 40097ac:	11c7883a 	add	r3,r2,r7
 40097b0:	29cb883a 	add	r5,r5,r7
 40097b4:	5900212e 	bgeu	r11,r4,400983c <memcpy+0x140>
 40097b8:	1813883a 	mov	r9,r3
 40097bc:	2811883a 	mov	r8,r5
 40097c0:	200f883a 	mov	r7,r4
 40097c4:	42800017 	ldw	r10,0(r8)
 40097c8:	4a400104 	addi	r9,r9,4
 40097cc:	39ffff04 	addi	r7,r7,-4
 40097d0:	4abfff15 	stw	r10,-4(r9)
 40097d4:	42000104 	addi	r8,r8,4
 40097d8:	59fffa36 	bltu	r11,r7,40097c4 <__flash_rwdata_start+0xffffbf24>
 40097dc:	213fff04 	addi	r4,r4,-4
 40097e0:	2008d0ba 	srli	r4,r4,2
 40097e4:	318000cc 	andi	r6,r6,3
 40097e8:	21000044 	addi	r4,r4,1
 40097ec:	2109883a 	add	r4,r4,r4
 40097f0:	2109883a 	add	r4,r4,r4
 40097f4:	1907883a 	add	r3,r3,r4
 40097f8:	290b883a 	add	r5,r5,r4
 40097fc:	30000626 	beq	r6,zero,4009818 <memcpy+0x11c>
 4009800:	198d883a 	add	r6,r3,r6
 4009804:	29c00003 	ldbu	r7,0(r5)
 4009808:	18c00044 	addi	r3,r3,1
 400980c:	29400044 	addi	r5,r5,1
 4009810:	19ffffc5 	stb	r7,-1(r3)
 4009814:	19bffb1e 	bne	r3,r6,4009804 <__flash_rwdata_start+0xffffbf64>
 4009818:	dfc00217 	ldw	ra,8(sp)
 400981c:	dc400117 	ldw	r17,4(sp)
 4009820:	dc000017 	ldw	r16,0(sp)
 4009824:	dec00304 	addi	sp,sp,12
 4009828:	f800283a 	ret
 400982c:	2007883a 	mov	r3,r4
 4009830:	003ff206 	br	40097fc <__flash_rwdata_start+0xffffbf5c>
 4009834:	2007883a 	mov	r3,r4
 4009838:	003ff106 	br	4009800 <__flash_rwdata_start+0xffffbf60>
 400983c:	200d883a 	mov	r6,r4
 4009840:	003fee06 	br	40097fc <__flash_rwdata_start+0xffffbf5c>

04009844 <memmove>:
 4009844:	2005883a 	mov	r2,r4
 4009848:	29000b2e 	bgeu	r5,r4,4009878 <memmove+0x34>
 400984c:	298f883a 	add	r7,r5,r6
 4009850:	21c0092e 	bgeu	r4,r7,4009878 <memmove+0x34>
 4009854:	2187883a 	add	r3,r4,r6
 4009858:	198bc83a 	sub	r5,r3,r6
 400985c:	30004826 	beq	r6,zero,4009980 <memmove+0x13c>
 4009860:	39ffffc4 	addi	r7,r7,-1
 4009864:	39000003 	ldbu	r4,0(r7)
 4009868:	18ffffc4 	addi	r3,r3,-1
 400986c:	19000005 	stb	r4,0(r3)
 4009870:	28fffb1e 	bne	r5,r3,4009860 <__flash_rwdata_start+0xffffbfc0>
 4009874:	f800283a 	ret
 4009878:	00c003c4 	movi	r3,15
 400987c:	1980412e 	bgeu	r3,r6,4009984 <memmove+0x140>
 4009880:	2886b03a 	or	r3,r5,r2
 4009884:	18c000cc 	andi	r3,r3,3
 4009888:	1800401e 	bne	r3,zero,400998c <memmove+0x148>
 400988c:	33fffc04 	addi	r15,r6,-16
 4009890:	781ed13a 	srli	r15,r15,4
 4009894:	28c00104 	addi	r3,r5,4
 4009898:	13400104 	addi	r13,r2,4
 400989c:	781c913a 	slli	r14,r15,4
 40098a0:	2b000204 	addi	r12,r5,8
 40098a4:	12c00204 	addi	r11,r2,8
 40098a8:	73800504 	addi	r14,r14,20
 40098ac:	2a800304 	addi	r10,r5,12
 40098b0:	12400304 	addi	r9,r2,12
 40098b4:	2b9d883a 	add	r14,r5,r14
 40098b8:	2811883a 	mov	r8,r5
 40098bc:	100f883a 	mov	r7,r2
 40098c0:	41000017 	ldw	r4,0(r8)
 40098c4:	39c00404 	addi	r7,r7,16
 40098c8:	18c00404 	addi	r3,r3,16
 40098cc:	393ffc15 	stw	r4,-16(r7)
 40098d0:	193ffc17 	ldw	r4,-16(r3)
 40098d4:	6b400404 	addi	r13,r13,16
 40098d8:	5ac00404 	addi	r11,r11,16
 40098dc:	693ffc15 	stw	r4,-16(r13)
 40098e0:	61000017 	ldw	r4,0(r12)
 40098e4:	4a400404 	addi	r9,r9,16
 40098e8:	42000404 	addi	r8,r8,16
 40098ec:	593ffc15 	stw	r4,-16(r11)
 40098f0:	51000017 	ldw	r4,0(r10)
 40098f4:	63000404 	addi	r12,r12,16
 40098f8:	52800404 	addi	r10,r10,16
 40098fc:	493ffc15 	stw	r4,-16(r9)
 4009900:	1bbfef1e 	bne	r3,r14,40098c0 <__flash_rwdata_start+0xffffc020>
 4009904:	79000044 	addi	r4,r15,1
 4009908:	2008913a 	slli	r4,r4,4
 400990c:	328003cc 	andi	r10,r6,15
 4009910:	02c000c4 	movi	r11,3
 4009914:	1107883a 	add	r3,r2,r4
 4009918:	290b883a 	add	r5,r5,r4
 400991c:	5a801e2e 	bgeu	r11,r10,4009998 <memmove+0x154>
 4009920:	1813883a 	mov	r9,r3
 4009924:	2811883a 	mov	r8,r5
 4009928:	500f883a 	mov	r7,r10
 400992c:	41000017 	ldw	r4,0(r8)
 4009930:	4a400104 	addi	r9,r9,4
 4009934:	39ffff04 	addi	r7,r7,-4
 4009938:	493fff15 	stw	r4,-4(r9)
 400993c:	42000104 	addi	r8,r8,4
 4009940:	59fffa36 	bltu	r11,r7,400992c <__flash_rwdata_start+0xffffc08c>
 4009944:	513fff04 	addi	r4,r10,-4
 4009948:	2008d0ba 	srli	r4,r4,2
 400994c:	318000cc 	andi	r6,r6,3
 4009950:	21000044 	addi	r4,r4,1
 4009954:	2109883a 	add	r4,r4,r4
 4009958:	2109883a 	add	r4,r4,r4
 400995c:	1907883a 	add	r3,r3,r4
 4009960:	290b883a 	add	r5,r5,r4
 4009964:	30000b26 	beq	r6,zero,4009994 <memmove+0x150>
 4009968:	198d883a 	add	r6,r3,r6
 400996c:	29c00003 	ldbu	r7,0(r5)
 4009970:	18c00044 	addi	r3,r3,1
 4009974:	29400044 	addi	r5,r5,1
 4009978:	19ffffc5 	stb	r7,-1(r3)
 400997c:	19bffb1e 	bne	r3,r6,400996c <__flash_rwdata_start+0xffffc0cc>
 4009980:	f800283a 	ret
 4009984:	1007883a 	mov	r3,r2
 4009988:	003ff606 	br	4009964 <__flash_rwdata_start+0xffffc0c4>
 400998c:	1007883a 	mov	r3,r2
 4009990:	003ff506 	br	4009968 <__flash_rwdata_start+0xffffc0c8>
 4009994:	f800283a 	ret
 4009998:	500d883a 	mov	r6,r10
 400999c:	003ff106 	br	4009964 <__flash_rwdata_start+0xffffc0c4>

040099a0 <memset>:
 40099a0:	20c000cc 	andi	r3,r4,3
 40099a4:	2005883a 	mov	r2,r4
 40099a8:	18004426 	beq	r3,zero,4009abc <memset+0x11c>
 40099ac:	31ffffc4 	addi	r7,r6,-1
 40099b0:	30004026 	beq	r6,zero,4009ab4 <memset+0x114>
 40099b4:	2813883a 	mov	r9,r5
 40099b8:	200d883a 	mov	r6,r4
 40099bc:	2007883a 	mov	r3,r4
 40099c0:	00000406 	br	40099d4 <memset+0x34>
 40099c4:	3a3fffc4 	addi	r8,r7,-1
 40099c8:	31800044 	addi	r6,r6,1
 40099cc:	38003926 	beq	r7,zero,4009ab4 <memset+0x114>
 40099d0:	400f883a 	mov	r7,r8
 40099d4:	18c00044 	addi	r3,r3,1
 40099d8:	32400005 	stb	r9,0(r6)
 40099dc:	1a0000cc 	andi	r8,r3,3
 40099e0:	403ff81e 	bne	r8,zero,40099c4 <__flash_rwdata_start+0xffffc124>
 40099e4:	010000c4 	movi	r4,3
 40099e8:	21c02d2e 	bgeu	r4,r7,4009aa0 <memset+0x100>
 40099ec:	29003fcc 	andi	r4,r5,255
 40099f0:	200c923a 	slli	r6,r4,8
 40099f4:	3108b03a 	or	r4,r6,r4
 40099f8:	200c943a 	slli	r6,r4,16
 40099fc:	218cb03a 	or	r6,r4,r6
 4009a00:	010003c4 	movi	r4,15
 4009a04:	21c0182e 	bgeu	r4,r7,4009a68 <memset+0xc8>
 4009a08:	3b3ffc04 	addi	r12,r7,-16
 4009a0c:	6018d13a 	srli	r12,r12,4
 4009a10:	1a000104 	addi	r8,r3,4
 4009a14:	1ac00204 	addi	r11,r3,8
 4009a18:	6008913a 	slli	r4,r12,4
 4009a1c:	1a800304 	addi	r10,r3,12
 4009a20:	1813883a 	mov	r9,r3
 4009a24:	21000504 	addi	r4,r4,20
 4009a28:	1909883a 	add	r4,r3,r4
 4009a2c:	49800015 	stw	r6,0(r9)
 4009a30:	41800015 	stw	r6,0(r8)
 4009a34:	59800015 	stw	r6,0(r11)
 4009a38:	51800015 	stw	r6,0(r10)
 4009a3c:	42000404 	addi	r8,r8,16
 4009a40:	4a400404 	addi	r9,r9,16
 4009a44:	5ac00404 	addi	r11,r11,16
 4009a48:	52800404 	addi	r10,r10,16
 4009a4c:	413ff71e 	bne	r8,r4,4009a2c <__flash_rwdata_start+0xffffc18c>
 4009a50:	63000044 	addi	r12,r12,1
 4009a54:	6018913a 	slli	r12,r12,4
 4009a58:	39c003cc 	andi	r7,r7,15
 4009a5c:	010000c4 	movi	r4,3
 4009a60:	1b07883a 	add	r3,r3,r12
 4009a64:	21c00e2e 	bgeu	r4,r7,4009aa0 <memset+0x100>
 4009a68:	1813883a 	mov	r9,r3
 4009a6c:	3811883a 	mov	r8,r7
 4009a70:	010000c4 	movi	r4,3
 4009a74:	49800015 	stw	r6,0(r9)
 4009a78:	423fff04 	addi	r8,r8,-4
 4009a7c:	4a400104 	addi	r9,r9,4
 4009a80:	223ffc36 	bltu	r4,r8,4009a74 <__flash_rwdata_start+0xffffc1d4>
 4009a84:	393fff04 	addi	r4,r7,-4
 4009a88:	2008d0ba 	srli	r4,r4,2
 4009a8c:	39c000cc 	andi	r7,r7,3
 4009a90:	21000044 	addi	r4,r4,1
 4009a94:	2109883a 	add	r4,r4,r4
 4009a98:	2109883a 	add	r4,r4,r4
 4009a9c:	1907883a 	add	r3,r3,r4
 4009aa0:	38000526 	beq	r7,zero,4009ab8 <memset+0x118>
 4009aa4:	19cf883a 	add	r7,r3,r7
 4009aa8:	19400005 	stb	r5,0(r3)
 4009aac:	18c00044 	addi	r3,r3,1
 4009ab0:	38fffd1e 	bne	r7,r3,4009aa8 <__flash_rwdata_start+0xffffc208>
 4009ab4:	f800283a 	ret
 4009ab8:	f800283a 	ret
 4009abc:	2007883a 	mov	r3,r4
 4009ac0:	300f883a 	mov	r7,r6
 4009ac4:	003fc706 	br	40099e4 <__flash_rwdata_start+0xffffc144>

04009ac8 <_realloc_r>:
 4009ac8:	defff604 	addi	sp,sp,-40
 4009acc:	dc800215 	stw	r18,8(sp)
 4009ad0:	dfc00915 	stw	ra,36(sp)
 4009ad4:	df000815 	stw	fp,32(sp)
 4009ad8:	ddc00715 	stw	r23,28(sp)
 4009adc:	dd800615 	stw	r22,24(sp)
 4009ae0:	dd400515 	stw	r21,20(sp)
 4009ae4:	dd000415 	stw	r20,16(sp)
 4009ae8:	dcc00315 	stw	r19,12(sp)
 4009aec:	dc400115 	stw	r17,4(sp)
 4009af0:	dc000015 	stw	r16,0(sp)
 4009af4:	3025883a 	mov	r18,r6
 4009af8:	2800b726 	beq	r5,zero,4009dd8 <_realloc_r+0x310>
 4009afc:	282b883a 	mov	r21,r5
 4009b00:	2029883a 	mov	r20,r4
 4009b04:	400b6480 	call	400b648 <__malloc_lock>
 4009b08:	a8bfff17 	ldw	r2,-4(r21)
 4009b0c:	043fff04 	movi	r16,-4
 4009b10:	90c002c4 	addi	r3,r18,11
 4009b14:	01000584 	movi	r4,22
 4009b18:	acfffe04 	addi	r19,r21,-8
 4009b1c:	1420703a 	and	r16,r2,r16
 4009b20:	20c0332e 	bgeu	r4,r3,4009bf0 <_realloc_r+0x128>
 4009b24:	047ffe04 	movi	r17,-8
 4009b28:	1c62703a 	and	r17,r3,r17
 4009b2c:	8807883a 	mov	r3,r17
 4009b30:	88005816 	blt	r17,zero,4009c94 <_realloc_r+0x1cc>
 4009b34:	8c805736 	bltu	r17,r18,4009c94 <_realloc_r+0x1cc>
 4009b38:	80c0300e 	bge	r16,r3,4009bfc <_realloc_r+0x134>
 4009b3c:	07000034 	movhi	fp,0
 4009b40:	e7011d04 	addi	fp,fp,1140
 4009b44:	e1c00217 	ldw	r7,8(fp)
 4009b48:	9c09883a 	add	r4,r19,r16
 4009b4c:	22000117 	ldw	r8,4(r4)
 4009b50:	21c06326 	beq	r4,r7,4009ce0 <_realloc_r+0x218>
 4009b54:	017fff84 	movi	r5,-2
 4009b58:	414a703a 	and	r5,r8,r5
 4009b5c:	214b883a 	add	r5,r4,r5
 4009b60:	29800117 	ldw	r6,4(r5)
 4009b64:	3180004c 	andi	r6,r6,1
 4009b68:	30003f26 	beq	r6,zero,4009c68 <_realloc_r+0x1a0>
 4009b6c:	1080004c 	andi	r2,r2,1
 4009b70:	10008326 	beq	r2,zero,4009d80 <_realloc_r+0x2b8>
 4009b74:	900b883a 	mov	r5,r18
 4009b78:	a009883a 	mov	r4,r20
 4009b7c:	4008e0c0 	call	4008e0c <_malloc_r>
 4009b80:	1025883a 	mov	r18,r2
 4009b84:	10011e26 	beq	r2,zero,400a000 <_realloc_r+0x538>
 4009b88:	a93fff17 	ldw	r4,-4(r21)
 4009b8c:	10fffe04 	addi	r3,r2,-8
 4009b90:	00bfff84 	movi	r2,-2
 4009b94:	2084703a 	and	r2,r4,r2
 4009b98:	9885883a 	add	r2,r19,r2
 4009b9c:	1880ee26 	beq	r3,r2,4009f58 <_realloc_r+0x490>
 4009ba0:	81bfff04 	addi	r6,r16,-4
 4009ba4:	00800904 	movi	r2,36
 4009ba8:	1180b836 	bltu	r2,r6,4009e8c <_realloc_r+0x3c4>
 4009bac:	00c004c4 	movi	r3,19
 4009bb0:	19809636 	bltu	r3,r6,4009e0c <_realloc_r+0x344>
 4009bb4:	9005883a 	mov	r2,r18
 4009bb8:	a807883a 	mov	r3,r21
 4009bbc:	19000017 	ldw	r4,0(r3)
 4009bc0:	11000015 	stw	r4,0(r2)
 4009bc4:	19000117 	ldw	r4,4(r3)
 4009bc8:	11000115 	stw	r4,4(r2)
 4009bcc:	18c00217 	ldw	r3,8(r3)
 4009bd0:	10c00215 	stw	r3,8(r2)
 4009bd4:	a80b883a 	mov	r5,r21
 4009bd8:	a009883a 	mov	r4,r20
 4009bdc:	400a8940 	call	400a894 <_free_r>
 4009be0:	a009883a 	mov	r4,r20
 4009be4:	400b66c0 	call	400b66c <__malloc_unlock>
 4009be8:	9005883a 	mov	r2,r18
 4009bec:	00001206 	br	4009c38 <_realloc_r+0x170>
 4009bf0:	00c00404 	movi	r3,16
 4009bf4:	1823883a 	mov	r17,r3
 4009bf8:	003fce06 	br	4009b34 <__flash_rwdata_start+0xffffc294>
 4009bfc:	a825883a 	mov	r18,r21
 4009c00:	8445c83a 	sub	r2,r16,r17
 4009c04:	00c003c4 	movi	r3,15
 4009c08:	18802636 	bltu	r3,r2,4009ca4 <_realloc_r+0x1dc>
 4009c0c:	99800117 	ldw	r6,4(r19)
 4009c10:	9c07883a 	add	r3,r19,r16
 4009c14:	3180004c 	andi	r6,r6,1
 4009c18:	3420b03a 	or	r16,r6,r16
 4009c1c:	9c000115 	stw	r16,4(r19)
 4009c20:	18800117 	ldw	r2,4(r3)
 4009c24:	10800054 	ori	r2,r2,1
 4009c28:	18800115 	stw	r2,4(r3)
 4009c2c:	a009883a 	mov	r4,r20
 4009c30:	400b66c0 	call	400b66c <__malloc_unlock>
 4009c34:	9005883a 	mov	r2,r18
 4009c38:	dfc00917 	ldw	ra,36(sp)
 4009c3c:	df000817 	ldw	fp,32(sp)
 4009c40:	ddc00717 	ldw	r23,28(sp)
 4009c44:	dd800617 	ldw	r22,24(sp)
 4009c48:	dd400517 	ldw	r21,20(sp)
 4009c4c:	dd000417 	ldw	r20,16(sp)
 4009c50:	dcc00317 	ldw	r19,12(sp)
 4009c54:	dc800217 	ldw	r18,8(sp)
 4009c58:	dc400117 	ldw	r17,4(sp)
 4009c5c:	dc000017 	ldw	r16,0(sp)
 4009c60:	dec00a04 	addi	sp,sp,40
 4009c64:	f800283a 	ret
 4009c68:	017fff04 	movi	r5,-4
 4009c6c:	414a703a 	and	r5,r8,r5
 4009c70:	814d883a 	add	r6,r16,r5
 4009c74:	30c01f16 	blt	r6,r3,4009cf4 <_realloc_r+0x22c>
 4009c78:	20800317 	ldw	r2,12(r4)
 4009c7c:	20c00217 	ldw	r3,8(r4)
 4009c80:	a825883a 	mov	r18,r21
 4009c84:	3021883a 	mov	r16,r6
 4009c88:	18800315 	stw	r2,12(r3)
 4009c8c:	10c00215 	stw	r3,8(r2)
 4009c90:	003fdb06 	br	4009c00 <__flash_rwdata_start+0xffffc360>
 4009c94:	00800304 	movi	r2,12
 4009c98:	a0800015 	stw	r2,0(r20)
 4009c9c:	0005883a 	mov	r2,zero
 4009ca0:	003fe506 	br	4009c38 <__flash_rwdata_start+0xffffc398>
 4009ca4:	98c00117 	ldw	r3,4(r19)
 4009ca8:	9c4b883a 	add	r5,r19,r17
 4009cac:	11000054 	ori	r4,r2,1
 4009cb0:	18c0004c 	andi	r3,r3,1
 4009cb4:	1c62b03a 	or	r17,r3,r17
 4009cb8:	9c400115 	stw	r17,4(r19)
 4009cbc:	29000115 	stw	r4,4(r5)
 4009cc0:	2885883a 	add	r2,r5,r2
 4009cc4:	10c00117 	ldw	r3,4(r2)
 4009cc8:	29400204 	addi	r5,r5,8
 4009ccc:	a009883a 	mov	r4,r20
 4009cd0:	18c00054 	ori	r3,r3,1
 4009cd4:	10c00115 	stw	r3,4(r2)
 4009cd8:	400a8940 	call	400a894 <_free_r>
 4009cdc:	003fd306 	br	4009c2c <__flash_rwdata_start+0xffffc38c>
 4009ce0:	017fff04 	movi	r5,-4
 4009ce4:	414a703a 	and	r5,r8,r5
 4009ce8:	89800404 	addi	r6,r17,16
 4009cec:	8151883a 	add	r8,r16,r5
 4009cf0:	4180590e 	bge	r8,r6,4009e58 <_realloc_r+0x390>
 4009cf4:	1080004c 	andi	r2,r2,1
 4009cf8:	103f9e1e 	bne	r2,zero,4009b74 <__flash_rwdata_start+0xffffc2d4>
 4009cfc:	adbffe17 	ldw	r22,-8(r21)
 4009d00:	00bfff04 	movi	r2,-4
 4009d04:	9dadc83a 	sub	r22,r19,r22
 4009d08:	b1800117 	ldw	r6,4(r22)
 4009d0c:	3084703a 	and	r2,r6,r2
 4009d10:	20002026 	beq	r4,zero,4009d94 <_realloc_r+0x2cc>
 4009d14:	80af883a 	add	r23,r16,r2
 4009d18:	b96f883a 	add	r23,r23,r5
 4009d1c:	21c05f26 	beq	r4,r7,4009e9c <_realloc_r+0x3d4>
 4009d20:	b8c01c16 	blt	r23,r3,4009d94 <_realloc_r+0x2cc>
 4009d24:	20800317 	ldw	r2,12(r4)
 4009d28:	20c00217 	ldw	r3,8(r4)
 4009d2c:	81bfff04 	addi	r6,r16,-4
 4009d30:	01000904 	movi	r4,36
 4009d34:	18800315 	stw	r2,12(r3)
 4009d38:	10c00215 	stw	r3,8(r2)
 4009d3c:	b0c00217 	ldw	r3,8(r22)
 4009d40:	b0800317 	ldw	r2,12(r22)
 4009d44:	b4800204 	addi	r18,r22,8
 4009d48:	18800315 	stw	r2,12(r3)
 4009d4c:	10c00215 	stw	r3,8(r2)
 4009d50:	21801b36 	bltu	r4,r6,4009dc0 <_realloc_r+0x2f8>
 4009d54:	008004c4 	movi	r2,19
 4009d58:	1180352e 	bgeu	r2,r6,4009e30 <_realloc_r+0x368>
 4009d5c:	a8800017 	ldw	r2,0(r21)
 4009d60:	b0800215 	stw	r2,8(r22)
 4009d64:	a8800117 	ldw	r2,4(r21)
 4009d68:	b0800315 	stw	r2,12(r22)
 4009d6c:	008006c4 	movi	r2,27
 4009d70:	11807f36 	bltu	r2,r6,4009f70 <_realloc_r+0x4a8>
 4009d74:	b0800404 	addi	r2,r22,16
 4009d78:	ad400204 	addi	r21,r21,8
 4009d7c:	00002d06 	br	4009e34 <_realloc_r+0x36c>
 4009d80:	adbffe17 	ldw	r22,-8(r21)
 4009d84:	00bfff04 	movi	r2,-4
 4009d88:	9dadc83a 	sub	r22,r19,r22
 4009d8c:	b1000117 	ldw	r4,4(r22)
 4009d90:	2084703a 	and	r2,r4,r2
 4009d94:	b03f7726 	beq	r22,zero,4009b74 <__flash_rwdata_start+0xffffc2d4>
 4009d98:	80af883a 	add	r23,r16,r2
 4009d9c:	b8ff7516 	blt	r23,r3,4009b74 <__flash_rwdata_start+0xffffc2d4>
 4009da0:	b0800317 	ldw	r2,12(r22)
 4009da4:	b0c00217 	ldw	r3,8(r22)
 4009da8:	81bfff04 	addi	r6,r16,-4
 4009dac:	01000904 	movi	r4,36
 4009db0:	18800315 	stw	r2,12(r3)
 4009db4:	10c00215 	stw	r3,8(r2)
 4009db8:	b4800204 	addi	r18,r22,8
 4009dbc:	21bfe52e 	bgeu	r4,r6,4009d54 <__flash_rwdata_start+0xffffc4b4>
 4009dc0:	a80b883a 	mov	r5,r21
 4009dc4:	9009883a 	mov	r4,r18
 4009dc8:	40098440 	call	4009844 <memmove>
 4009dcc:	b821883a 	mov	r16,r23
 4009dd0:	b027883a 	mov	r19,r22
 4009dd4:	003f8a06 	br	4009c00 <__flash_rwdata_start+0xffffc360>
 4009dd8:	300b883a 	mov	r5,r6
 4009ddc:	dfc00917 	ldw	ra,36(sp)
 4009de0:	df000817 	ldw	fp,32(sp)
 4009de4:	ddc00717 	ldw	r23,28(sp)
 4009de8:	dd800617 	ldw	r22,24(sp)
 4009dec:	dd400517 	ldw	r21,20(sp)
 4009df0:	dd000417 	ldw	r20,16(sp)
 4009df4:	dcc00317 	ldw	r19,12(sp)
 4009df8:	dc800217 	ldw	r18,8(sp)
 4009dfc:	dc400117 	ldw	r17,4(sp)
 4009e00:	dc000017 	ldw	r16,0(sp)
 4009e04:	dec00a04 	addi	sp,sp,40
 4009e08:	4008e0c1 	jmpi	4008e0c <_malloc_r>
 4009e0c:	a8c00017 	ldw	r3,0(r21)
 4009e10:	90c00015 	stw	r3,0(r18)
 4009e14:	a8c00117 	ldw	r3,4(r21)
 4009e18:	90c00115 	stw	r3,4(r18)
 4009e1c:	00c006c4 	movi	r3,27
 4009e20:	19804536 	bltu	r3,r6,4009f38 <_realloc_r+0x470>
 4009e24:	90800204 	addi	r2,r18,8
 4009e28:	a8c00204 	addi	r3,r21,8
 4009e2c:	003f6306 	br	4009bbc <__flash_rwdata_start+0xffffc31c>
 4009e30:	9005883a 	mov	r2,r18
 4009e34:	a8c00017 	ldw	r3,0(r21)
 4009e38:	b821883a 	mov	r16,r23
 4009e3c:	b027883a 	mov	r19,r22
 4009e40:	10c00015 	stw	r3,0(r2)
 4009e44:	a8c00117 	ldw	r3,4(r21)
 4009e48:	10c00115 	stw	r3,4(r2)
 4009e4c:	a8c00217 	ldw	r3,8(r21)
 4009e50:	10c00215 	stw	r3,8(r2)
 4009e54:	003f6a06 	br	4009c00 <__flash_rwdata_start+0xffffc360>
 4009e58:	9c67883a 	add	r19,r19,r17
 4009e5c:	4445c83a 	sub	r2,r8,r17
 4009e60:	e4c00215 	stw	r19,8(fp)
 4009e64:	10800054 	ori	r2,r2,1
 4009e68:	98800115 	stw	r2,4(r19)
 4009e6c:	a8bfff17 	ldw	r2,-4(r21)
 4009e70:	a009883a 	mov	r4,r20
 4009e74:	1080004c 	andi	r2,r2,1
 4009e78:	1462b03a 	or	r17,r2,r17
 4009e7c:	ac7fff15 	stw	r17,-4(r21)
 4009e80:	400b66c0 	call	400b66c <__malloc_unlock>
 4009e84:	a805883a 	mov	r2,r21
 4009e88:	003f6b06 	br	4009c38 <__flash_rwdata_start+0xffffc398>
 4009e8c:	a80b883a 	mov	r5,r21
 4009e90:	9009883a 	mov	r4,r18
 4009e94:	40098440 	call	4009844 <memmove>
 4009e98:	003f4e06 	br	4009bd4 <__flash_rwdata_start+0xffffc334>
 4009e9c:	89000404 	addi	r4,r17,16
 4009ea0:	b93fbc16 	blt	r23,r4,4009d94 <__flash_rwdata_start+0xffffc4f4>
 4009ea4:	b0800317 	ldw	r2,12(r22)
 4009ea8:	b0c00217 	ldw	r3,8(r22)
 4009eac:	81bfff04 	addi	r6,r16,-4
 4009eb0:	01000904 	movi	r4,36
 4009eb4:	18800315 	stw	r2,12(r3)
 4009eb8:	10c00215 	stw	r3,8(r2)
 4009ebc:	b4800204 	addi	r18,r22,8
 4009ec0:	21804336 	bltu	r4,r6,4009fd0 <_realloc_r+0x508>
 4009ec4:	008004c4 	movi	r2,19
 4009ec8:	11803f2e 	bgeu	r2,r6,4009fc8 <_realloc_r+0x500>
 4009ecc:	a8800017 	ldw	r2,0(r21)
 4009ed0:	b0800215 	stw	r2,8(r22)
 4009ed4:	a8800117 	ldw	r2,4(r21)
 4009ed8:	b0800315 	stw	r2,12(r22)
 4009edc:	008006c4 	movi	r2,27
 4009ee0:	11803f36 	bltu	r2,r6,4009fe0 <_realloc_r+0x518>
 4009ee4:	b0800404 	addi	r2,r22,16
 4009ee8:	ad400204 	addi	r21,r21,8
 4009eec:	a8c00017 	ldw	r3,0(r21)
 4009ef0:	10c00015 	stw	r3,0(r2)
 4009ef4:	a8c00117 	ldw	r3,4(r21)
 4009ef8:	10c00115 	stw	r3,4(r2)
 4009efc:	a8c00217 	ldw	r3,8(r21)
 4009f00:	10c00215 	stw	r3,8(r2)
 4009f04:	b447883a 	add	r3,r22,r17
 4009f08:	bc45c83a 	sub	r2,r23,r17
 4009f0c:	e0c00215 	stw	r3,8(fp)
 4009f10:	10800054 	ori	r2,r2,1
 4009f14:	18800115 	stw	r2,4(r3)
 4009f18:	b0800117 	ldw	r2,4(r22)
 4009f1c:	a009883a 	mov	r4,r20
 4009f20:	1080004c 	andi	r2,r2,1
 4009f24:	1462b03a 	or	r17,r2,r17
 4009f28:	b4400115 	stw	r17,4(r22)
 4009f2c:	400b66c0 	call	400b66c <__malloc_unlock>
 4009f30:	9005883a 	mov	r2,r18
 4009f34:	003f4006 	br	4009c38 <__flash_rwdata_start+0xffffc398>
 4009f38:	a8c00217 	ldw	r3,8(r21)
 4009f3c:	90c00215 	stw	r3,8(r18)
 4009f40:	a8c00317 	ldw	r3,12(r21)
 4009f44:	90c00315 	stw	r3,12(r18)
 4009f48:	30801126 	beq	r6,r2,4009f90 <_realloc_r+0x4c8>
 4009f4c:	90800404 	addi	r2,r18,16
 4009f50:	a8c00404 	addi	r3,r21,16
 4009f54:	003f1906 	br	4009bbc <__flash_rwdata_start+0xffffc31c>
 4009f58:	90ffff17 	ldw	r3,-4(r18)
 4009f5c:	00bfff04 	movi	r2,-4
 4009f60:	a825883a 	mov	r18,r21
 4009f64:	1884703a 	and	r2,r3,r2
 4009f68:	80a1883a 	add	r16,r16,r2
 4009f6c:	003f2406 	br	4009c00 <__flash_rwdata_start+0xffffc360>
 4009f70:	a8800217 	ldw	r2,8(r21)
 4009f74:	b0800415 	stw	r2,16(r22)
 4009f78:	a8800317 	ldw	r2,12(r21)
 4009f7c:	b0800515 	stw	r2,20(r22)
 4009f80:	31000a26 	beq	r6,r4,4009fac <_realloc_r+0x4e4>
 4009f84:	b0800604 	addi	r2,r22,24
 4009f88:	ad400404 	addi	r21,r21,16
 4009f8c:	003fa906 	br	4009e34 <__flash_rwdata_start+0xffffc594>
 4009f90:	a9000417 	ldw	r4,16(r21)
 4009f94:	90800604 	addi	r2,r18,24
 4009f98:	a8c00604 	addi	r3,r21,24
 4009f9c:	91000415 	stw	r4,16(r18)
 4009fa0:	a9000517 	ldw	r4,20(r21)
 4009fa4:	91000515 	stw	r4,20(r18)
 4009fa8:	003f0406 	br	4009bbc <__flash_rwdata_start+0xffffc31c>
 4009fac:	a8c00417 	ldw	r3,16(r21)
 4009fb0:	ad400604 	addi	r21,r21,24
 4009fb4:	b0800804 	addi	r2,r22,32
 4009fb8:	b0c00615 	stw	r3,24(r22)
 4009fbc:	a8ffff17 	ldw	r3,-4(r21)
 4009fc0:	b0c00715 	stw	r3,28(r22)
 4009fc4:	003f9b06 	br	4009e34 <__flash_rwdata_start+0xffffc594>
 4009fc8:	9005883a 	mov	r2,r18
 4009fcc:	003fc706 	br	4009eec <__flash_rwdata_start+0xffffc64c>
 4009fd0:	a80b883a 	mov	r5,r21
 4009fd4:	9009883a 	mov	r4,r18
 4009fd8:	40098440 	call	4009844 <memmove>
 4009fdc:	003fc906 	br	4009f04 <__flash_rwdata_start+0xffffc664>
 4009fe0:	a8800217 	ldw	r2,8(r21)
 4009fe4:	b0800415 	stw	r2,16(r22)
 4009fe8:	a8800317 	ldw	r2,12(r21)
 4009fec:	b0800515 	stw	r2,20(r22)
 4009ff0:	31000726 	beq	r6,r4,400a010 <_realloc_r+0x548>
 4009ff4:	b0800604 	addi	r2,r22,24
 4009ff8:	ad400404 	addi	r21,r21,16
 4009ffc:	003fbb06 	br	4009eec <__flash_rwdata_start+0xffffc64c>
 400a000:	a009883a 	mov	r4,r20
 400a004:	400b66c0 	call	400b66c <__malloc_unlock>
 400a008:	0005883a 	mov	r2,zero
 400a00c:	003f0a06 	br	4009c38 <__flash_rwdata_start+0xffffc398>
 400a010:	a8c00417 	ldw	r3,16(r21)
 400a014:	ad400604 	addi	r21,r21,24
 400a018:	b0800804 	addi	r2,r22,32
 400a01c:	b0c00615 	stw	r3,24(r22)
 400a020:	a8ffff17 	ldw	r3,-4(r21)
 400a024:	b0c00715 	stw	r3,28(r22)
 400a028:	003fb006 	br	4009eec <__flash_rwdata_start+0xffffc64c>

0400a02c <_sbrk_r>:
 400a02c:	defffd04 	addi	sp,sp,-12
 400a030:	dc000015 	stw	r16,0(sp)
 400a034:	04000034 	movhi	r16,0
 400a038:	dc400115 	stw	r17,4(sp)
 400a03c:	8406b204 	addi	r16,r16,6856
 400a040:	2023883a 	mov	r17,r4
 400a044:	2809883a 	mov	r4,r5
 400a048:	dfc00215 	stw	ra,8(sp)
 400a04c:	80000015 	stw	zero,0(r16)
 400a050:	400b8540 	call	400b854 <sbrk>
 400a054:	00ffffc4 	movi	r3,-1
 400a058:	10c00526 	beq	r2,r3,400a070 <_sbrk_r+0x44>
 400a05c:	dfc00217 	ldw	ra,8(sp)
 400a060:	dc400117 	ldw	r17,4(sp)
 400a064:	dc000017 	ldw	r16,0(sp)
 400a068:	dec00304 	addi	sp,sp,12
 400a06c:	f800283a 	ret
 400a070:	80c00017 	ldw	r3,0(r16)
 400a074:	183ff926 	beq	r3,zero,400a05c <__flash_rwdata_start+0xffffc7bc>
 400a078:	88c00015 	stw	r3,0(r17)
 400a07c:	003ff706 	br	400a05c <__flash_rwdata_start+0xffffc7bc>

0400a080 <__sread>:
 400a080:	defffe04 	addi	sp,sp,-8
 400a084:	dc000015 	stw	r16,0(sp)
 400a088:	2821883a 	mov	r16,r5
 400a08c:	2940038f 	ldh	r5,14(r5)
 400a090:	dfc00115 	stw	ra,4(sp)
 400a094:	400adc00 	call	400adc0 <_read_r>
 400a098:	10000716 	blt	r2,zero,400a0b8 <__sread+0x38>
 400a09c:	80c01417 	ldw	r3,80(r16)
 400a0a0:	1887883a 	add	r3,r3,r2
 400a0a4:	80c01415 	stw	r3,80(r16)
 400a0a8:	dfc00117 	ldw	ra,4(sp)
 400a0ac:	dc000017 	ldw	r16,0(sp)
 400a0b0:	dec00204 	addi	sp,sp,8
 400a0b4:	f800283a 	ret
 400a0b8:	80c0030b 	ldhu	r3,12(r16)
 400a0bc:	18fbffcc 	andi	r3,r3,61439
 400a0c0:	80c0030d 	sth	r3,12(r16)
 400a0c4:	dfc00117 	ldw	ra,4(sp)
 400a0c8:	dc000017 	ldw	r16,0(sp)
 400a0cc:	dec00204 	addi	sp,sp,8
 400a0d0:	f800283a 	ret

0400a0d4 <__seofread>:
 400a0d4:	0005883a 	mov	r2,zero
 400a0d8:	f800283a 	ret

0400a0dc <__swrite>:
 400a0dc:	2880030b 	ldhu	r2,12(r5)
 400a0e0:	defffb04 	addi	sp,sp,-20
 400a0e4:	dcc00315 	stw	r19,12(sp)
 400a0e8:	dc800215 	stw	r18,8(sp)
 400a0ec:	dc400115 	stw	r17,4(sp)
 400a0f0:	dc000015 	stw	r16,0(sp)
 400a0f4:	dfc00415 	stw	ra,16(sp)
 400a0f8:	10c0400c 	andi	r3,r2,256
 400a0fc:	2821883a 	mov	r16,r5
 400a100:	2023883a 	mov	r17,r4
 400a104:	3025883a 	mov	r18,r6
 400a108:	3827883a 	mov	r19,r7
 400a10c:	18000526 	beq	r3,zero,400a124 <__swrite+0x48>
 400a110:	2940038f 	ldh	r5,14(r5)
 400a114:	01c00084 	movi	r7,2
 400a118:	000d883a 	mov	r6,zero
 400a11c:	400aba40 	call	400aba4 <_lseek_r>
 400a120:	8080030b 	ldhu	r2,12(r16)
 400a124:	8140038f 	ldh	r5,14(r16)
 400a128:	10bbffcc 	andi	r2,r2,61439
 400a12c:	980f883a 	mov	r7,r19
 400a130:	900d883a 	mov	r6,r18
 400a134:	8809883a 	mov	r4,r17
 400a138:	8080030d 	sth	r2,12(r16)
 400a13c:	dfc00417 	ldw	ra,16(sp)
 400a140:	dcc00317 	ldw	r19,12(sp)
 400a144:	dc800217 	ldw	r18,8(sp)
 400a148:	dc400117 	ldw	r17,4(sp)
 400a14c:	dc000017 	ldw	r16,0(sp)
 400a150:	dec00504 	addi	sp,sp,20
 400a154:	400a1bc1 	jmpi	400a1bc <_write_r>

0400a158 <__sseek>:
 400a158:	defffe04 	addi	sp,sp,-8
 400a15c:	dc000015 	stw	r16,0(sp)
 400a160:	2821883a 	mov	r16,r5
 400a164:	2940038f 	ldh	r5,14(r5)
 400a168:	dfc00115 	stw	ra,4(sp)
 400a16c:	400aba40 	call	400aba4 <_lseek_r>
 400a170:	00ffffc4 	movi	r3,-1
 400a174:	10c00826 	beq	r2,r3,400a198 <__sseek+0x40>
 400a178:	80c0030b 	ldhu	r3,12(r16)
 400a17c:	80801415 	stw	r2,80(r16)
 400a180:	18c40014 	ori	r3,r3,4096
 400a184:	80c0030d 	sth	r3,12(r16)
 400a188:	dfc00117 	ldw	ra,4(sp)
 400a18c:	dc000017 	ldw	r16,0(sp)
 400a190:	dec00204 	addi	sp,sp,8
 400a194:	f800283a 	ret
 400a198:	80c0030b 	ldhu	r3,12(r16)
 400a19c:	18fbffcc 	andi	r3,r3,61439
 400a1a0:	80c0030d 	sth	r3,12(r16)
 400a1a4:	dfc00117 	ldw	ra,4(sp)
 400a1a8:	dc000017 	ldw	r16,0(sp)
 400a1ac:	dec00204 	addi	sp,sp,8
 400a1b0:	f800283a 	ret

0400a1b4 <__sclose>:
 400a1b4:	2940038f 	ldh	r5,14(r5)
 400a1b8:	400a3701 	jmpi	400a370 <_close_r>

0400a1bc <_write_r>:
 400a1bc:	defffd04 	addi	sp,sp,-12
 400a1c0:	2805883a 	mov	r2,r5
 400a1c4:	dc000015 	stw	r16,0(sp)
 400a1c8:	04000034 	movhi	r16,0
 400a1cc:	dc400115 	stw	r17,4(sp)
 400a1d0:	300b883a 	mov	r5,r6
 400a1d4:	8406b204 	addi	r16,r16,6856
 400a1d8:	2023883a 	mov	r17,r4
 400a1dc:	380d883a 	mov	r6,r7
 400a1e0:	1009883a 	mov	r4,r2
 400a1e4:	dfc00215 	stw	ra,8(sp)
 400a1e8:	80000015 	stw	zero,0(r16)
 400a1ec:	400b9400 	call	400b940 <write>
 400a1f0:	00ffffc4 	movi	r3,-1
 400a1f4:	10c00526 	beq	r2,r3,400a20c <_write_r+0x50>
 400a1f8:	dfc00217 	ldw	ra,8(sp)
 400a1fc:	dc400117 	ldw	r17,4(sp)
 400a200:	dc000017 	ldw	r16,0(sp)
 400a204:	dec00304 	addi	sp,sp,12
 400a208:	f800283a 	ret
 400a20c:	80c00017 	ldw	r3,0(r16)
 400a210:	183ff926 	beq	r3,zero,400a1f8 <__flash_rwdata_start+0xffffc958>
 400a214:	88c00015 	stw	r3,0(r17)
 400a218:	003ff706 	br	400a1f8 <__flash_rwdata_start+0xffffc958>

0400a21c <__swsetup_r>:
 400a21c:	00800034 	movhi	r2,0
 400a220:	defffd04 	addi	sp,sp,-12
 400a224:	1086a204 	addi	r2,r2,6792
 400a228:	dc400115 	stw	r17,4(sp)
 400a22c:	2023883a 	mov	r17,r4
 400a230:	11000017 	ldw	r4,0(r2)
 400a234:	dc000015 	stw	r16,0(sp)
 400a238:	dfc00215 	stw	ra,8(sp)
 400a23c:	2821883a 	mov	r16,r5
 400a240:	20000226 	beq	r4,zero,400a24c <__swsetup_r+0x30>
 400a244:	20800e17 	ldw	r2,56(r4)
 400a248:	10003126 	beq	r2,zero,400a310 <__swsetup_r+0xf4>
 400a24c:	8080030b 	ldhu	r2,12(r16)
 400a250:	10c0020c 	andi	r3,r2,8
 400a254:	1009883a 	mov	r4,r2
 400a258:	18000f26 	beq	r3,zero,400a298 <__swsetup_r+0x7c>
 400a25c:	80c00417 	ldw	r3,16(r16)
 400a260:	18001526 	beq	r3,zero,400a2b8 <__swsetup_r+0x9c>
 400a264:	1100004c 	andi	r4,r2,1
 400a268:	20001c1e 	bne	r4,zero,400a2dc <__swsetup_r+0xc0>
 400a26c:	1080008c 	andi	r2,r2,2
 400a270:	1000291e 	bne	r2,zero,400a318 <__swsetup_r+0xfc>
 400a274:	80800517 	ldw	r2,20(r16)
 400a278:	80800215 	stw	r2,8(r16)
 400a27c:	18001c26 	beq	r3,zero,400a2f0 <__swsetup_r+0xd4>
 400a280:	0005883a 	mov	r2,zero
 400a284:	dfc00217 	ldw	ra,8(sp)
 400a288:	dc400117 	ldw	r17,4(sp)
 400a28c:	dc000017 	ldw	r16,0(sp)
 400a290:	dec00304 	addi	sp,sp,12
 400a294:	f800283a 	ret
 400a298:	2080040c 	andi	r2,r4,16
 400a29c:	10002e26 	beq	r2,zero,400a358 <__swsetup_r+0x13c>
 400a2a0:	2080010c 	andi	r2,r4,4
 400a2a4:	10001e1e 	bne	r2,zero,400a320 <__swsetup_r+0x104>
 400a2a8:	80c00417 	ldw	r3,16(r16)
 400a2ac:	20800214 	ori	r2,r4,8
 400a2b0:	8080030d 	sth	r2,12(r16)
 400a2b4:	183feb1e 	bne	r3,zero,400a264 <__flash_rwdata_start+0xffffc9c4>
 400a2b8:	1100a00c 	andi	r4,r2,640
 400a2bc:	01408004 	movi	r5,512
 400a2c0:	217fe826 	beq	r4,r5,400a264 <__flash_rwdata_start+0xffffc9c4>
 400a2c4:	800b883a 	mov	r5,r16
 400a2c8:	8809883a 	mov	r4,r17
 400a2cc:	400ac040 	call	400ac04 <__smakebuf_r>
 400a2d0:	8080030b 	ldhu	r2,12(r16)
 400a2d4:	80c00417 	ldw	r3,16(r16)
 400a2d8:	003fe206 	br	400a264 <__flash_rwdata_start+0xffffc9c4>
 400a2dc:	80800517 	ldw	r2,20(r16)
 400a2e0:	80000215 	stw	zero,8(r16)
 400a2e4:	0085c83a 	sub	r2,zero,r2
 400a2e8:	80800615 	stw	r2,24(r16)
 400a2ec:	183fe41e 	bne	r3,zero,400a280 <__flash_rwdata_start+0xffffc9e0>
 400a2f0:	80c0030b 	ldhu	r3,12(r16)
 400a2f4:	0005883a 	mov	r2,zero
 400a2f8:	1900200c 	andi	r4,r3,128
 400a2fc:	203fe126 	beq	r4,zero,400a284 <__flash_rwdata_start+0xffffc9e4>
 400a300:	18c01014 	ori	r3,r3,64
 400a304:	80c0030d 	sth	r3,12(r16)
 400a308:	00bfffc4 	movi	r2,-1
 400a30c:	003fdd06 	br	400a284 <__flash_rwdata_start+0xffffc9e4>
 400a310:	400876c0 	call	400876c <__sinit>
 400a314:	003fcd06 	br	400a24c <__flash_rwdata_start+0xffffc9ac>
 400a318:	0005883a 	mov	r2,zero
 400a31c:	003fd606 	br	400a278 <__flash_rwdata_start+0xffffc9d8>
 400a320:	81400c17 	ldw	r5,48(r16)
 400a324:	28000626 	beq	r5,zero,400a340 <__swsetup_r+0x124>
 400a328:	80801004 	addi	r2,r16,64
 400a32c:	28800326 	beq	r5,r2,400a33c <__swsetup_r+0x120>
 400a330:	8809883a 	mov	r4,r17
 400a334:	400a8940 	call	400a894 <_free_r>
 400a338:	8100030b 	ldhu	r4,12(r16)
 400a33c:	80000c15 	stw	zero,48(r16)
 400a340:	80c00417 	ldw	r3,16(r16)
 400a344:	00bff6c4 	movi	r2,-37
 400a348:	1108703a 	and	r4,r2,r4
 400a34c:	80000115 	stw	zero,4(r16)
 400a350:	80c00015 	stw	r3,0(r16)
 400a354:	003fd506 	br	400a2ac <__flash_rwdata_start+0xffffca0c>
 400a358:	00800244 	movi	r2,9
 400a35c:	88800015 	stw	r2,0(r17)
 400a360:	20801014 	ori	r2,r4,64
 400a364:	8080030d 	sth	r2,12(r16)
 400a368:	00bfffc4 	movi	r2,-1
 400a36c:	003fc506 	br	400a284 <__flash_rwdata_start+0xffffc9e4>

0400a370 <_close_r>:
 400a370:	defffd04 	addi	sp,sp,-12
 400a374:	dc000015 	stw	r16,0(sp)
 400a378:	04000034 	movhi	r16,0
 400a37c:	dc400115 	stw	r17,4(sp)
 400a380:	8406b204 	addi	r16,r16,6856
 400a384:	2023883a 	mov	r17,r4
 400a388:	2809883a 	mov	r4,r5
 400a38c:	dfc00215 	stw	ra,8(sp)
 400a390:	80000015 	stw	zero,0(r16)
 400a394:	400b0e80 	call	400b0e8 <close>
 400a398:	00ffffc4 	movi	r3,-1
 400a39c:	10c00526 	beq	r2,r3,400a3b4 <_close_r+0x44>
 400a3a0:	dfc00217 	ldw	ra,8(sp)
 400a3a4:	dc400117 	ldw	r17,4(sp)
 400a3a8:	dc000017 	ldw	r16,0(sp)
 400a3ac:	dec00304 	addi	sp,sp,12
 400a3b0:	f800283a 	ret
 400a3b4:	80c00017 	ldw	r3,0(r16)
 400a3b8:	183ff926 	beq	r3,zero,400a3a0 <__flash_rwdata_start+0xffffcb00>
 400a3bc:	88c00015 	stw	r3,0(r17)
 400a3c0:	003ff706 	br	400a3a0 <__flash_rwdata_start+0xffffcb00>

0400a3c4 <_fclose_r>:
 400a3c4:	28003926 	beq	r5,zero,400a4ac <_fclose_r+0xe8>
 400a3c8:	defffc04 	addi	sp,sp,-16
 400a3cc:	dc400115 	stw	r17,4(sp)
 400a3d0:	dc000015 	stw	r16,0(sp)
 400a3d4:	dfc00315 	stw	ra,12(sp)
 400a3d8:	dc800215 	stw	r18,8(sp)
 400a3dc:	2023883a 	mov	r17,r4
 400a3e0:	2821883a 	mov	r16,r5
 400a3e4:	20000226 	beq	r4,zero,400a3f0 <_fclose_r+0x2c>
 400a3e8:	20800e17 	ldw	r2,56(r4)
 400a3ec:	10002726 	beq	r2,zero,400a48c <_fclose_r+0xc8>
 400a3f0:	8080030f 	ldh	r2,12(r16)
 400a3f4:	1000071e 	bne	r2,zero,400a414 <_fclose_r+0x50>
 400a3f8:	0005883a 	mov	r2,zero
 400a3fc:	dfc00317 	ldw	ra,12(sp)
 400a400:	dc800217 	ldw	r18,8(sp)
 400a404:	dc400117 	ldw	r17,4(sp)
 400a408:	dc000017 	ldw	r16,0(sp)
 400a40c:	dec00404 	addi	sp,sp,16
 400a410:	f800283a 	ret
 400a414:	800b883a 	mov	r5,r16
 400a418:	8809883a 	mov	r4,r17
 400a41c:	400a4c80 	call	400a4c8 <__sflush_r>
 400a420:	1025883a 	mov	r18,r2
 400a424:	80800b17 	ldw	r2,44(r16)
 400a428:	10000426 	beq	r2,zero,400a43c <_fclose_r+0x78>
 400a42c:	81400717 	ldw	r5,28(r16)
 400a430:	8809883a 	mov	r4,r17
 400a434:	103ee83a 	callr	r2
 400a438:	10001616 	blt	r2,zero,400a494 <_fclose_r+0xd0>
 400a43c:	8080030b 	ldhu	r2,12(r16)
 400a440:	1080200c 	andi	r2,r2,128
 400a444:	1000151e 	bne	r2,zero,400a49c <_fclose_r+0xd8>
 400a448:	81400c17 	ldw	r5,48(r16)
 400a44c:	28000526 	beq	r5,zero,400a464 <_fclose_r+0xa0>
 400a450:	80801004 	addi	r2,r16,64
 400a454:	28800226 	beq	r5,r2,400a460 <_fclose_r+0x9c>
 400a458:	8809883a 	mov	r4,r17
 400a45c:	400a8940 	call	400a894 <_free_r>
 400a460:	80000c15 	stw	zero,48(r16)
 400a464:	81401117 	ldw	r5,68(r16)
 400a468:	28000326 	beq	r5,zero,400a478 <_fclose_r+0xb4>
 400a46c:	8809883a 	mov	r4,r17
 400a470:	400a8940 	call	400a894 <_free_r>
 400a474:	80001115 	stw	zero,68(r16)
 400a478:	400877c0 	call	400877c <__sfp_lock_acquire>
 400a47c:	8000030d 	sth	zero,12(r16)
 400a480:	40087800 	call	4008780 <__sfp_lock_release>
 400a484:	9005883a 	mov	r2,r18
 400a488:	003fdc06 	br	400a3fc <__flash_rwdata_start+0xffffcb5c>
 400a48c:	400876c0 	call	400876c <__sinit>
 400a490:	003fd706 	br	400a3f0 <__flash_rwdata_start+0xffffcb50>
 400a494:	04bfffc4 	movi	r18,-1
 400a498:	003fe806 	br	400a43c <__flash_rwdata_start+0xffffcb9c>
 400a49c:	81400417 	ldw	r5,16(r16)
 400a4a0:	8809883a 	mov	r4,r17
 400a4a4:	400a8940 	call	400a894 <_free_r>
 400a4a8:	003fe706 	br	400a448 <__flash_rwdata_start+0xffffcba8>
 400a4ac:	0005883a 	mov	r2,zero
 400a4b0:	f800283a 	ret

0400a4b4 <fclose>:
 400a4b4:	00800034 	movhi	r2,0
 400a4b8:	1086a204 	addi	r2,r2,6792
 400a4bc:	200b883a 	mov	r5,r4
 400a4c0:	11000017 	ldw	r4,0(r2)
 400a4c4:	400a3c41 	jmpi	400a3c4 <_fclose_r>

0400a4c8 <__sflush_r>:
 400a4c8:	2880030b 	ldhu	r2,12(r5)
 400a4cc:	defffb04 	addi	sp,sp,-20
 400a4d0:	dcc00315 	stw	r19,12(sp)
 400a4d4:	dc400115 	stw	r17,4(sp)
 400a4d8:	dfc00415 	stw	ra,16(sp)
 400a4dc:	dc800215 	stw	r18,8(sp)
 400a4e0:	dc000015 	stw	r16,0(sp)
 400a4e4:	10c0020c 	andi	r3,r2,8
 400a4e8:	2823883a 	mov	r17,r5
 400a4ec:	2027883a 	mov	r19,r4
 400a4f0:	1800311e 	bne	r3,zero,400a5b8 <__sflush_r+0xf0>
 400a4f4:	28c00117 	ldw	r3,4(r5)
 400a4f8:	10820014 	ori	r2,r2,2048
 400a4fc:	2880030d 	sth	r2,12(r5)
 400a500:	00c04b0e 	bge	zero,r3,400a630 <__sflush_r+0x168>
 400a504:	8a000a17 	ldw	r8,40(r17)
 400a508:	40002326 	beq	r8,zero,400a598 <__sflush_r+0xd0>
 400a50c:	9c000017 	ldw	r16,0(r19)
 400a510:	10c4000c 	andi	r3,r2,4096
 400a514:	98000015 	stw	zero,0(r19)
 400a518:	18004826 	beq	r3,zero,400a63c <__sflush_r+0x174>
 400a51c:	89801417 	ldw	r6,80(r17)
 400a520:	10c0010c 	andi	r3,r2,4
 400a524:	18000626 	beq	r3,zero,400a540 <__sflush_r+0x78>
 400a528:	88c00117 	ldw	r3,4(r17)
 400a52c:	88800c17 	ldw	r2,48(r17)
 400a530:	30cdc83a 	sub	r6,r6,r3
 400a534:	10000226 	beq	r2,zero,400a540 <__sflush_r+0x78>
 400a538:	88800f17 	ldw	r2,60(r17)
 400a53c:	308dc83a 	sub	r6,r6,r2
 400a540:	89400717 	ldw	r5,28(r17)
 400a544:	000f883a 	mov	r7,zero
 400a548:	9809883a 	mov	r4,r19
 400a54c:	403ee83a 	callr	r8
 400a550:	00ffffc4 	movi	r3,-1
 400a554:	10c04426 	beq	r2,r3,400a668 <__sflush_r+0x1a0>
 400a558:	88c0030b 	ldhu	r3,12(r17)
 400a55c:	89000417 	ldw	r4,16(r17)
 400a560:	88000115 	stw	zero,4(r17)
 400a564:	197dffcc 	andi	r5,r3,63487
 400a568:	8940030d 	sth	r5,12(r17)
 400a56c:	89000015 	stw	r4,0(r17)
 400a570:	18c4000c 	andi	r3,r3,4096
 400a574:	18002c1e 	bne	r3,zero,400a628 <__sflush_r+0x160>
 400a578:	89400c17 	ldw	r5,48(r17)
 400a57c:	9c000015 	stw	r16,0(r19)
 400a580:	28000526 	beq	r5,zero,400a598 <__sflush_r+0xd0>
 400a584:	88801004 	addi	r2,r17,64
 400a588:	28800226 	beq	r5,r2,400a594 <__sflush_r+0xcc>
 400a58c:	9809883a 	mov	r4,r19
 400a590:	400a8940 	call	400a894 <_free_r>
 400a594:	88000c15 	stw	zero,48(r17)
 400a598:	0005883a 	mov	r2,zero
 400a59c:	dfc00417 	ldw	ra,16(sp)
 400a5a0:	dcc00317 	ldw	r19,12(sp)
 400a5a4:	dc800217 	ldw	r18,8(sp)
 400a5a8:	dc400117 	ldw	r17,4(sp)
 400a5ac:	dc000017 	ldw	r16,0(sp)
 400a5b0:	dec00504 	addi	sp,sp,20
 400a5b4:	f800283a 	ret
 400a5b8:	2c800417 	ldw	r18,16(r5)
 400a5bc:	903ff626 	beq	r18,zero,400a598 <__flash_rwdata_start+0xffffccf8>
 400a5c0:	2c000017 	ldw	r16,0(r5)
 400a5c4:	108000cc 	andi	r2,r2,3
 400a5c8:	2c800015 	stw	r18,0(r5)
 400a5cc:	84a1c83a 	sub	r16,r16,r18
 400a5d0:	1000131e 	bne	r2,zero,400a620 <__sflush_r+0x158>
 400a5d4:	28800517 	ldw	r2,20(r5)
 400a5d8:	88800215 	stw	r2,8(r17)
 400a5dc:	04000316 	blt	zero,r16,400a5ec <__sflush_r+0x124>
 400a5e0:	003fed06 	br	400a598 <__flash_rwdata_start+0xffffccf8>
 400a5e4:	90a5883a 	add	r18,r18,r2
 400a5e8:	043feb0e 	bge	zero,r16,400a598 <__flash_rwdata_start+0xffffccf8>
 400a5ec:	88800917 	ldw	r2,36(r17)
 400a5f0:	89400717 	ldw	r5,28(r17)
 400a5f4:	800f883a 	mov	r7,r16
 400a5f8:	900d883a 	mov	r6,r18
 400a5fc:	9809883a 	mov	r4,r19
 400a600:	103ee83a 	callr	r2
 400a604:	80a1c83a 	sub	r16,r16,r2
 400a608:	00bff616 	blt	zero,r2,400a5e4 <__flash_rwdata_start+0xffffcd44>
 400a60c:	88c0030b 	ldhu	r3,12(r17)
 400a610:	00bfffc4 	movi	r2,-1
 400a614:	18c01014 	ori	r3,r3,64
 400a618:	88c0030d 	sth	r3,12(r17)
 400a61c:	003fdf06 	br	400a59c <__flash_rwdata_start+0xffffccfc>
 400a620:	0005883a 	mov	r2,zero
 400a624:	003fec06 	br	400a5d8 <__flash_rwdata_start+0xffffcd38>
 400a628:	88801415 	stw	r2,80(r17)
 400a62c:	003fd206 	br	400a578 <__flash_rwdata_start+0xffffccd8>
 400a630:	28c00f17 	ldw	r3,60(r5)
 400a634:	00ffb316 	blt	zero,r3,400a504 <__flash_rwdata_start+0xffffcc64>
 400a638:	003fd706 	br	400a598 <__flash_rwdata_start+0xffffccf8>
 400a63c:	89400717 	ldw	r5,28(r17)
 400a640:	000d883a 	mov	r6,zero
 400a644:	01c00044 	movi	r7,1
 400a648:	9809883a 	mov	r4,r19
 400a64c:	403ee83a 	callr	r8
 400a650:	100d883a 	mov	r6,r2
 400a654:	00bfffc4 	movi	r2,-1
 400a658:	30801426 	beq	r6,r2,400a6ac <__sflush_r+0x1e4>
 400a65c:	8880030b 	ldhu	r2,12(r17)
 400a660:	8a000a17 	ldw	r8,40(r17)
 400a664:	003fae06 	br	400a520 <__flash_rwdata_start+0xffffcc80>
 400a668:	98c00017 	ldw	r3,0(r19)
 400a66c:	183fba26 	beq	r3,zero,400a558 <__flash_rwdata_start+0xffffccb8>
 400a670:	01000744 	movi	r4,29
 400a674:	19000626 	beq	r3,r4,400a690 <__sflush_r+0x1c8>
 400a678:	01000584 	movi	r4,22
 400a67c:	19000426 	beq	r3,r4,400a690 <__sflush_r+0x1c8>
 400a680:	88c0030b 	ldhu	r3,12(r17)
 400a684:	18c01014 	ori	r3,r3,64
 400a688:	88c0030d 	sth	r3,12(r17)
 400a68c:	003fc306 	br	400a59c <__flash_rwdata_start+0xffffccfc>
 400a690:	8880030b 	ldhu	r2,12(r17)
 400a694:	88c00417 	ldw	r3,16(r17)
 400a698:	88000115 	stw	zero,4(r17)
 400a69c:	10bdffcc 	andi	r2,r2,63487
 400a6a0:	8880030d 	sth	r2,12(r17)
 400a6a4:	88c00015 	stw	r3,0(r17)
 400a6a8:	003fb306 	br	400a578 <__flash_rwdata_start+0xffffccd8>
 400a6ac:	98800017 	ldw	r2,0(r19)
 400a6b0:	103fea26 	beq	r2,zero,400a65c <__flash_rwdata_start+0xffffcdbc>
 400a6b4:	00c00744 	movi	r3,29
 400a6b8:	10c00226 	beq	r2,r3,400a6c4 <__sflush_r+0x1fc>
 400a6bc:	00c00584 	movi	r3,22
 400a6c0:	10c0031e 	bne	r2,r3,400a6d0 <__sflush_r+0x208>
 400a6c4:	9c000015 	stw	r16,0(r19)
 400a6c8:	0005883a 	mov	r2,zero
 400a6cc:	003fb306 	br	400a59c <__flash_rwdata_start+0xffffccfc>
 400a6d0:	88c0030b 	ldhu	r3,12(r17)
 400a6d4:	3005883a 	mov	r2,r6
 400a6d8:	18c01014 	ori	r3,r3,64
 400a6dc:	88c0030d 	sth	r3,12(r17)
 400a6e0:	003fae06 	br	400a59c <__flash_rwdata_start+0xffffccfc>

0400a6e4 <_fflush_r>:
 400a6e4:	defffd04 	addi	sp,sp,-12
 400a6e8:	dc000115 	stw	r16,4(sp)
 400a6ec:	dfc00215 	stw	ra,8(sp)
 400a6f0:	2021883a 	mov	r16,r4
 400a6f4:	20000226 	beq	r4,zero,400a700 <_fflush_r+0x1c>
 400a6f8:	20800e17 	ldw	r2,56(r4)
 400a6fc:	10000c26 	beq	r2,zero,400a730 <_fflush_r+0x4c>
 400a700:	2880030f 	ldh	r2,12(r5)
 400a704:	1000051e 	bne	r2,zero,400a71c <_fflush_r+0x38>
 400a708:	0005883a 	mov	r2,zero
 400a70c:	dfc00217 	ldw	ra,8(sp)
 400a710:	dc000117 	ldw	r16,4(sp)
 400a714:	dec00304 	addi	sp,sp,12
 400a718:	f800283a 	ret
 400a71c:	8009883a 	mov	r4,r16
 400a720:	dfc00217 	ldw	ra,8(sp)
 400a724:	dc000117 	ldw	r16,4(sp)
 400a728:	dec00304 	addi	sp,sp,12
 400a72c:	400a4c81 	jmpi	400a4c8 <__sflush_r>
 400a730:	d9400015 	stw	r5,0(sp)
 400a734:	400876c0 	call	400876c <__sinit>
 400a738:	d9400017 	ldw	r5,0(sp)
 400a73c:	003ff006 	br	400a700 <__flash_rwdata_start+0xffffce60>

0400a740 <fflush>:
 400a740:	20000526 	beq	r4,zero,400a758 <fflush+0x18>
 400a744:	00800034 	movhi	r2,0
 400a748:	1086a204 	addi	r2,r2,6792
 400a74c:	200b883a 	mov	r5,r4
 400a750:	11000017 	ldw	r4,0(r2)
 400a754:	400a6e41 	jmpi	400a6e4 <_fflush_r>
 400a758:	00800034 	movhi	r2,0
 400a75c:	1086a104 	addi	r2,r2,6788
 400a760:	11000017 	ldw	r4,0(r2)
 400a764:	01410074 	movhi	r5,1025
 400a768:	2969b904 	addi	r5,r5,-22812
 400a76c:	4008d481 	jmpi	4008d48 <_fwalk_reent>

0400a770 <_malloc_trim_r>:
 400a770:	defffb04 	addi	sp,sp,-20
 400a774:	dcc00315 	stw	r19,12(sp)
 400a778:	04c00034 	movhi	r19,0
 400a77c:	dc800215 	stw	r18,8(sp)
 400a780:	dc400115 	stw	r17,4(sp)
 400a784:	dc000015 	stw	r16,0(sp)
 400a788:	dfc00415 	stw	ra,16(sp)
 400a78c:	2821883a 	mov	r16,r5
 400a790:	9cc11d04 	addi	r19,r19,1140
 400a794:	2025883a 	mov	r18,r4
 400a798:	400b6480 	call	400b648 <__malloc_lock>
 400a79c:	98800217 	ldw	r2,8(r19)
 400a7a0:	14400117 	ldw	r17,4(r2)
 400a7a4:	00bfff04 	movi	r2,-4
 400a7a8:	88a2703a 	and	r17,r17,r2
 400a7ac:	8c21c83a 	sub	r16,r17,r16
 400a7b0:	8403fbc4 	addi	r16,r16,4079
 400a7b4:	8020d33a 	srli	r16,r16,12
 400a7b8:	0083ffc4 	movi	r2,4095
 400a7bc:	843fffc4 	addi	r16,r16,-1
 400a7c0:	8020933a 	slli	r16,r16,12
 400a7c4:	1400060e 	bge	r2,r16,400a7e0 <_malloc_trim_r+0x70>
 400a7c8:	000b883a 	mov	r5,zero
 400a7cc:	9009883a 	mov	r4,r18
 400a7d0:	400a02c0 	call	400a02c <_sbrk_r>
 400a7d4:	98c00217 	ldw	r3,8(r19)
 400a7d8:	1c47883a 	add	r3,r3,r17
 400a7dc:	10c00a26 	beq	r2,r3,400a808 <_malloc_trim_r+0x98>
 400a7e0:	9009883a 	mov	r4,r18
 400a7e4:	400b66c0 	call	400b66c <__malloc_unlock>
 400a7e8:	0005883a 	mov	r2,zero
 400a7ec:	dfc00417 	ldw	ra,16(sp)
 400a7f0:	dcc00317 	ldw	r19,12(sp)
 400a7f4:	dc800217 	ldw	r18,8(sp)
 400a7f8:	dc400117 	ldw	r17,4(sp)
 400a7fc:	dc000017 	ldw	r16,0(sp)
 400a800:	dec00504 	addi	sp,sp,20
 400a804:	f800283a 	ret
 400a808:	040bc83a 	sub	r5,zero,r16
 400a80c:	9009883a 	mov	r4,r18
 400a810:	400a02c0 	call	400a02c <_sbrk_r>
 400a814:	00ffffc4 	movi	r3,-1
 400a818:	10c00d26 	beq	r2,r3,400a850 <_malloc_trim_r+0xe0>
 400a81c:	00c00034 	movhi	r3,0
 400a820:	18c6ba04 	addi	r3,r3,6888
 400a824:	18800017 	ldw	r2,0(r3)
 400a828:	99000217 	ldw	r4,8(r19)
 400a82c:	8c23c83a 	sub	r17,r17,r16
 400a830:	8c400054 	ori	r17,r17,1
 400a834:	1421c83a 	sub	r16,r2,r16
 400a838:	24400115 	stw	r17,4(r4)
 400a83c:	9009883a 	mov	r4,r18
 400a840:	1c000015 	stw	r16,0(r3)
 400a844:	400b66c0 	call	400b66c <__malloc_unlock>
 400a848:	00800044 	movi	r2,1
 400a84c:	003fe706 	br	400a7ec <__flash_rwdata_start+0xffffcf4c>
 400a850:	000b883a 	mov	r5,zero
 400a854:	9009883a 	mov	r4,r18
 400a858:	400a02c0 	call	400a02c <_sbrk_r>
 400a85c:	99000217 	ldw	r4,8(r19)
 400a860:	014003c4 	movi	r5,15
 400a864:	1107c83a 	sub	r3,r2,r4
 400a868:	28ffdd0e 	bge	r5,r3,400a7e0 <__flash_rwdata_start+0xffffcf40>
 400a86c:	01400034 	movhi	r5,0
 400a870:	2946a304 	addi	r5,r5,6796
 400a874:	29400017 	ldw	r5,0(r5)
 400a878:	18c00054 	ori	r3,r3,1
 400a87c:	20c00115 	stw	r3,4(r4)
 400a880:	00c00034 	movhi	r3,0
 400a884:	1145c83a 	sub	r2,r2,r5
 400a888:	18c6ba04 	addi	r3,r3,6888
 400a88c:	18800015 	stw	r2,0(r3)
 400a890:	003fd306 	br	400a7e0 <__flash_rwdata_start+0xffffcf40>

0400a894 <_free_r>:
 400a894:	28004126 	beq	r5,zero,400a99c <_free_r+0x108>
 400a898:	defffd04 	addi	sp,sp,-12
 400a89c:	dc400115 	stw	r17,4(sp)
 400a8a0:	dc000015 	stw	r16,0(sp)
 400a8a4:	2023883a 	mov	r17,r4
 400a8a8:	2821883a 	mov	r16,r5
 400a8ac:	dfc00215 	stw	ra,8(sp)
 400a8b0:	400b6480 	call	400b648 <__malloc_lock>
 400a8b4:	81ffff17 	ldw	r7,-4(r16)
 400a8b8:	00bfff84 	movi	r2,-2
 400a8bc:	01000034 	movhi	r4,0
 400a8c0:	81bffe04 	addi	r6,r16,-8
 400a8c4:	3884703a 	and	r2,r7,r2
 400a8c8:	21011d04 	addi	r4,r4,1140
 400a8cc:	308b883a 	add	r5,r6,r2
 400a8d0:	2a400117 	ldw	r9,4(r5)
 400a8d4:	22000217 	ldw	r8,8(r4)
 400a8d8:	00ffff04 	movi	r3,-4
 400a8dc:	48c6703a 	and	r3,r9,r3
 400a8e0:	2a005726 	beq	r5,r8,400aa40 <_free_r+0x1ac>
 400a8e4:	28c00115 	stw	r3,4(r5)
 400a8e8:	39c0004c 	andi	r7,r7,1
 400a8ec:	3800091e 	bne	r7,zero,400a914 <_free_r+0x80>
 400a8f0:	823ffe17 	ldw	r8,-8(r16)
 400a8f4:	22400204 	addi	r9,r4,8
 400a8f8:	320dc83a 	sub	r6,r6,r8
 400a8fc:	31c00217 	ldw	r7,8(r6)
 400a900:	1205883a 	add	r2,r2,r8
 400a904:	3a406526 	beq	r7,r9,400aa9c <_free_r+0x208>
 400a908:	32000317 	ldw	r8,12(r6)
 400a90c:	3a000315 	stw	r8,12(r7)
 400a910:	41c00215 	stw	r7,8(r8)
 400a914:	28cf883a 	add	r7,r5,r3
 400a918:	39c00117 	ldw	r7,4(r7)
 400a91c:	39c0004c 	andi	r7,r7,1
 400a920:	38003a26 	beq	r7,zero,400aa0c <_free_r+0x178>
 400a924:	10c00054 	ori	r3,r2,1
 400a928:	30c00115 	stw	r3,4(r6)
 400a92c:	3087883a 	add	r3,r6,r2
 400a930:	18800015 	stw	r2,0(r3)
 400a934:	00c07fc4 	movi	r3,511
 400a938:	18801936 	bltu	r3,r2,400a9a0 <_free_r+0x10c>
 400a93c:	1004d0fa 	srli	r2,r2,3
 400a940:	01c00044 	movi	r7,1
 400a944:	21400117 	ldw	r5,4(r4)
 400a948:	10c00044 	addi	r3,r2,1
 400a94c:	18c7883a 	add	r3,r3,r3
 400a950:	1005d0ba 	srai	r2,r2,2
 400a954:	18c7883a 	add	r3,r3,r3
 400a958:	18c7883a 	add	r3,r3,r3
 400a95c:	1907883a 	add	r3,r3,r4
 400a960:	3884983a 	sll	r2,r7,r2
 400a964:	19c00017 	ldw	r7,0(r3)
 400a968:	1a3ffe04 	addi	r8,r3,-8
 400a96c:	1144b03a 	or	r2,r2,r5
 400a970:	32000315 	stw	r8,12(r6)
 400a974:	31c00215 	stw	r7,8(r6)
 400a978:	20800115 	stw	r2,4(r4)
 400a97c:	19800015 	stw	r6,0(r3)
 400a980:	39800315 	stw	r6,12(r7)
 400a984:	8809883a 	mov	r4,r17
 400a988:	dfc00217 	ldw	ra,8(sp)
 400a98c:	dc400117 	ldw	r17,4(sp)
 400a990:	dc000017 	ldw	r16,0(sp)
 400a994:	dec00304 	addi	sp,sp,12
 400a998:	400b66c1 	jmpi	400b66c <__malloc_unlock>
 400a99c:	f800283a 	ret
 400a9a0:	100ad27a 	srli	r5,r2,9
 400a9a4:	00c00104 	movi	r3,4
 400a9a8:	19404a36 	bltu	r3,r5,400aad4 <_free_r+0x240>
 400a9ac:	100ad1ba 	srli	r5,r2,6
 400a9b0:	28c00e44 	addi	r3,r5,57
 400a9b4:	18c7883a 	add	r3,r3,r3
 400a9b8:	29400e04 	addi	r5,r5,56
 400a9bc:	18c7883a 	add	r3,r3,r3
 400a9c0:	18c7883a 	add	r3,r3,r3
 400a9c4:	1909883a 	add	r4,r3,r4
 400a9c8:	20c00017 	ldw	r3,0(r4)
 400a9cc:	01c00034 	movhi	r7,0
 400a9d0:	213ffe04 	addi	r4,r4,-8
 400a9d4:	39c11d04 	addi	r7,r7,1140
 400a9d8:	20c04426 	beq	r4,r3,400aaec <_free_r+0x258>
 400a9dc:	01ffff04 	movi	r7,-4
 400a9e0:	19400117 	ldw	r5,4(r3)
 400a9e4:	29ca703a 	and	r5,r5,r7
 400a9e8:	1140022e 	bgeu	r2,r5,400a9f4 <_free_r+0x160>
 400a9ec:	18c00217 	ldw	r3,8(r3)
 400a9f0:	20fffb1e 	bne	r4,r3,400a9e0 <__flash_rwdata_start+0xffffd140>
 400a9f4:	19000317 	ldw	r4,12(r3)
 400a9f8:	31000315 	stw	r4,12(r6)
 400a9fc:	30c00215 	stw	r3,8(r6)
 400aa00:	21800215 	stw	r6,8(r4)
 400aa04:	19800315 	stw	r6,12(r3)
 400aa08:	003fde06 	br	400a984 <__flash_rwdata_start+0xffffd0e4>
 400aa0c:	29c00217 	ldw	r7,8(r5)
 400aa10:	10c5883a 	add	r2,r2,r3
 400aa14:	00c00034 	movhi	r3,0
 400aa18:	18c11f04 	addi	r3,r3,1148
 400aa1c:	38c03b26 	beq	r7,r3,400ab0c <_free_r+0x278>
 400aa20:	2a000317 	ldw	r8,12(r5)
 400aa24:	11400054 	ori	r5,r2,1
 400aa28:	3087883a 	add	r3,r6,r2
 400aa2c:	3a000315 	stw	r8,12(r7)
 400aa30:	41c00215 	stw	r7,8(r8)
 400aa34:	31400115 	stw	r5,4(r6)
 400aa38:	18800015 	stw	r2,0(r3)
 400aa3c:	003fbd06 	br	400a934 <__flash_rwdata_start+0xffffd094>
 400aa40:	39c0004c 	andi	r7,r7,1
 400aa44:	10c5883a 	add	r2,r2,r3
 400aa48:	3800071e 	bne	r7,zero,400aa68 <_free_r+0x1d4>
 400aa4c:	81fffe17 	ldw	r7,-8(r16)
 400aa50:	31cdc83a 	sub	r6,r6,r7
 400aa54:	30c00317 	ldw	r3,12(r6)
 400aa58:	31400217 	ldw	r5,8(r6)
 400aa5c:	11c5883a 	add	r2,r2,r7
 400aa60:	28c00315 	stw	r3,12(r5)
 400aa64:	19400215 	stw	r5,8(r3)
 400aa68:	10c00054 	ori	r3,r2,1
 400aa6c:	30c00115 	stw	r3,4(r6)
 400aa70:	00c00034 	movhi	r3,0
 400aa74:	18c6a404 	addi	r3,r3,6800
 400aa78:	18c00017 	ldw	r3,0(r3)
 400aa7c:	21800215 	stw	r6,8(r4)
 400aa80:	10ffc036 	bltu	r2,r3,400a984 <__flash_rwdata_start+0xffffd0e4>
 400aa84:	00800034 	movhi	r2,0
 400aa88:	1086b104 	addi	r2,r2,6852
 400aa8c:	11400017 	ldw	r5,0(r2)
 400aa90:	8809883a 	mov	r4,r17
 400aa94:	400a7700 	call	400a770 <_malloc_trim_r>
 400aa98:	003fba06 	br	400a984 <__flash_rwdata_start+0xffffd0e4>
 400aa9c:	28c9883a 	add	r4,r5,r3
 400aaa0:	21000117 	ldw	r4,4(r4)
 400aaa4:	2100004c 	andi	r4,r4,1
 400aaa8:	2000391e 	bne	r4,zero,400ab90 <_free_r+0x2fc>
 400aaac:	29c00217 	ldw	r7,8(r5)
 400aab0:	29000317 	ldw	r4,12(r5)
 400aab4:	1885883a 	add	r2,r3,r2
 400aab8:	10c00054 	ori	r3,r2,1
 400aabc:	39000315 	stw	r4,12(r7)
 400aac0:	21c00215 	stw	r7,8(r4)
 400aac4:	30c00115 	stw	r3,4(r6)
 400aac8:	308d883a 	add	r6,r6,r2
 400aacc:	30800015 	stw	r2,0(r6)
 400aad0:	003fac06 	br	400a984 <__flash_rwdata_start+0xffffd0e4>
 400aad4:	00c00504 	movi	r3,20
 400aad8:	19401536 	bltu	r3,r5,400ab30 <_free_r+0x29c>
 400aadc:	28c01704 	addi	r3,r5,92
 400aae0:	18c7883a 	add	r3,r3,r3
 400aae4:	294016c4 	addi	r5,r5,91
 400aae8:	003fb406 	br	400a9bc <__flash_rwdata_start+0xffffd11c>
 400aaec:	280bd0ba 	srai	r5,r5,2
 400aaf0:	00c00044 	movi	r3,1
 400aaf4:	38800117 	ldw	r2,4(r7)
 400aaf8:	194a983a 	sll	r5,r3,r5
 400aafc:	2007883a 	mov	r3,r4
 400ab00:	2884b03a 	or	r2,r5,r2
 400ab04:	38800115 	stw	r2,4(r7)
 400ab08:	003fbb06 	br	400a9f8 <__flash_rwdata_start+0xffffd158>
 400ab0c:	21800515 	stw	r6,20(r4)
 400ab10:	21800415 	stw	r6,16(r4)
 400ab14:	10c00054 	ori	r3,r2,1
 400ab18:	31c00315 	stw	r7,12(r6)
 400ab1c:	31c00215 	stw	r7,8(r6)
 400ab20:	30c00115 	stw	r3,4(r6)
 400ab24:	308d883a 	add	r6,r6,r2
 400ab28:	30800015 	stw	r2,0(r6)
 400ab2c:	003f9506 	br	400a984 <__flash_rwdata_start+0xffffd0e4>
 400ab30:	00c01504 	movi	r3,84
 400ab34:	19400536 	bltu	r3,r5,400ab4c <_free_r+0x2b8>
 400ab38:	100ad33a 	srli	r5,r2,12
 400ab3c:	28c01bc4 	addi	r3,r5,111
 400ab40:	18c7883a 	add	r3,r3,r3
 400ab44:	29401b84 	addi	r5,r5,110
 400ab48:	003f9c06 	br	400a9bc <__flash_rwdata_start+0xffffd11c>
 400ab4c:	00c05504 	movi	r3,340
 400ab50:	19400536 	bltu	r3,r5,400ab68 <_free_r+0x2d4>
 400ab54:	100ad3fa 	srli	r5,r2,15
 400ab58:	28c01e04 	addi	r3,r5,120
 400ab5c:	18c7883a 	add	r3,r3,r3
 400ab60:	29401dc4 	addi	r5,r5,119
 400ab64:	003f9506 	br	400a9bc <__flash_rwdata_start+0xffffd11c>
 400ab68:	00c15504 	movi	r3,1364
 400ab6c:	19400536 	bltu	r3,r5,400ab84 <_free_r+0x2f0>
 400ab70:	100ad4ba 	srli	r5,r2,18
 400ab74:	28c01f44 	addi	r3,r5,125
 400ab78:	18c7883a 	add	r3,r3,r3
 400ab7c:	29401f04 	addi	r5,r5,124
 400ab80:	003f8e06 	br	400a9bc <__flash_rwdata_start+0xffffd11c>
 400ab84:	00c03f84 	movi	r3,254
 400ab88:	01401f84 	movi	r5,126
 400ab8c:	003f8b06 	br	400a9bc <__flash_rwdata_start+0xffffd11c>
 400ab90:	10c00054 	ori	r3,r2,1
 400ab94:	30c00115 	stw	r3,4(r6)
 400ab98:	308d883a 	add	r6,r6,r2
 400ab9c:	30800015 	stw	r2,0(r6)
 400aba0:	003f7806 	br	400a984 <__flash_rwdata_start+0xffffd0e4>

0400aba4 <_lseek_r>:
 400aba4:	defffd04 	addi	sp,sp,-12
 400aba8:	2805883a 	mov	r2,r5
 400abac:	dc000015 	stw	r16,0(sp)
 400abb0:	04000034 	movhi	r16,0
 400abb4:	dc400115 	stw	r17,4(sp)
 400abb8:	300b883a 	mov	r5,r6
 400abbc:	8406b204 	addi	r16,r16,6856
 400abc0:	2023883a 	mov	r17,r4
 400abc4:	380d883a 	mov	r6,r7
 400abc8:	1009883a 	mov	r4,r2
 400abcc:	dfc00215 	stw	ra,8(sp)
 400abd0:	80000015 	stw	zero,0(r16)
 400abd4:	400b4f00 	call	400b4f0 <lseek>
 400abd8:	00ffffc4 	movi	r3,-1
 400abdc:	10c00526 	beq	r2,r3,400abf4 <_lseek_r+0x50>
 400abe0:	dfc00217 	ldw	ra,8(sp)
 400abe4:	dc400117 	ldw	r17,4(sp)
 400abe8:	dc000017 	ldw	r16,0(sp)
 400abec:	dec00304 	addi	sp,sp,12
 400abf0:	f800283a 	ret
 400abf4:	80c00017 	ldw	r3,0(r16)
 400abf8:	183ff926 	beq	r3,zero,400abe0 <__flash_rwdata_start+0xffffd340>
 400abfc:	88c00015 	stw	r3,0(r17)
 400ac00:	003ff706 	br	400abe0 <__flash_rwdata_start+0xffffd340>

0400ac04 <__smakebuf_r>:
 400ac04:	2880030b 	ldhu	r2,12(r5)
 400ac08:	10c0008c 	andi	r3,r2,2
 400ac0c:	1800411e 	bne	r3,zero,400ad14 <__smakebuf_r+0x110>
 400ac10:	deffec04 	addi	sp,sp,-80
 400ac14:	dc000f15 	stw	r16,60(sp)
 400ac18:	2821883a 	mov	r16,r5
 400ac1c:	2940038f 	ldh	r5,14(r5)
 400ac20:	dc401015 	stw	r17,64(sp)
 400ac24:	dfc01315 	stw	ra,76(sp)
 400ac28:	dcc01215 	stw	r19,72(sp)
 400ac2c:	dc801115 	stw	r18,68(sp)
 400ac30:	2023883a 	mov	r17,r4
 400ac34:	28001c16 	blt	r5,zero,400aca8 <__smakebuf_r+0xa4>
 400ac38:	d80d883a 	mov	r6,sp
 400ac3c:	400ae200 	call	400ae20 <_fstat_r>
 400ac40:	10001816 	blt	r2,zero,400aca4 <__smakebuf_r+0xa0>
 400ac44:	d8800117 	ldw	r2,4(sp)
 400ac48:	00e00014 	movui	r3,32768
 400ac4c:	10bc000c 	andi	r2,r2,61440
 400ac50:	14c80020 	cmpeqi	r19,r2,8192
 400ac54:	10c03726 	beq	r2,r3,400ad34 <__smakebuf_r+0x130>
 400ac58:	80c0030b 	ldhu	r3,12(r16)
 400ac5c:	18c20014 	ori	r3,r3,2048
 400ac60:	80c0030d 	sth	r3,12(r16)
 400ac64:	00c80004 	movi	r3,8192
 400ac68:	10c0521e 	bne	r2,r3,400adb4 <__smakebuf_r+0x1b0>
 400ac6c:	8140038f 	ldh	r5,14(r16)
 400ac70:	8809883a 	mov	r4,r17
 400ac74:	400ae7c0 	call	400ae7c <_isatty_r>
 400ac78:	10004c26 	beq	r2,zero,400adac <__smakebuf_r+0x1a8>
 400ac7c:	8080030b 	ldhu	r2,12(r16)
 400ac80:	80c010c4 	addi	r3,r16,67
 400ac84:	80c00015 	stw	r3,0(r16)
 400ac88:	10800054 	ori	r2,r2,1
 400ac8c:	8080030d 	sth	r2,12(r16)
 400ac90:	00800044 	movi	r2,1
 400ac94:	80c00415 	stw	r3,16(r16)
 400ac98:	80800515 	stw	r2,20(r16)
 400ac9c:	04810004 	movi	r18,1024
 400aca0:	00000706 	br	400acc0 <__smakebuf_r+0xbc>
 400aca4:	8080030b 	ldhu	r2,12(r16)
 400aca8:	10c0200c 	andi	r3,r2,128
 400acac:	18001f1e 	bne	r3,zero,400ad2c <__smakebuf_r+0x128>
 400acb0:	04810004 	movi	r18,1024
 400acb4:	10820014 	ori	r2,r2,2048
 400acb8:	8080030d 	sth	r2,12(r16)
 400acbc:	0027883a 	mov	r19,zero
 400acc0:	900b883a 	mov	r5,r18
 400acc4:	8809883a 	mov	r4,r17
 400acc8:	4008e0c0 	call	4008e0c <_malloc_r>
 400accc:	10002c26 	beq	r2,zero,400ad80 <__smakebuf_r+0x17c>
 400acd0:	80c0030b 	ldhu	r3,12(r16)
 400acd4:	01010074 	movhi	r4,1025
 400acd8:	21210504 	addi	r4,r4,-31724
 400acdc:	89000f15 	stw	r4,60(r17)
 400ace0:	18c02014 	ori	r3,r3,128
 400ace4:	80c0030d 	sth	r3,12(r16)
 400ace8:	80800015 	stw	r2,0(r16)
 400acec:	80800415 	stw	r2,16(r16)
 400acf0:	84800515 	stw	r18,20(r16)
 400acf4:	98001a1e 	bne	r19,zero,400ad60 <__smakebuf_r+0x15c>
 400acf8:	dfc01317 	ldw	ra,76(sp)
 400acfc:	dcc01217 	ldw	r19,72(sp)
 400ad00:	dc801117 	ldw	r18,68(sp)
 400ad04:	dc401017 	ldw	r17,64(sp)
 400ad08:	dc000f17 	ldw	r16,60(sp)
 400ad0c:	dec01404 	addi	sp,sp,80
 400ad10:	f800283a 	ret
 400ad14:	288010c4 	addi	r2,r5,67
 400ad18:	28800015 	stw	r2,0(r5)
 400ad1c:	28800415 	stw	r2,16(r5)
 400ad20:	00800044 	movi	r2,1
 400ad24:	28800515 	stw	r2,20(r5)
 400ad28:	f800283a 	ret
 400ad2c:	04801004 	movi	r18,64
 400ad30:	003fe006 	br	400acb4 <__flash_rwdata_start+0xffffd414>
 400ad34:	81000a17 	ldw	r4,40(r16)
 400ad38:	00c10074 	movhi	r3,1025
 400ad3c:	18e85604 	addi	r3,r3,-24232
 400ad40:	20ffc51e 	bne	r4,r3,400ac58 <__flash_rwdata_start+0xffffd3b8>
 400ad44:	8080030b 	ldhu	r2,12(r16)
 400ad48:	04810004 	movi	r18,1024
 400ad4c:	84801315 	stw	r18,76(r16)
 400ad50:	1484b03a 	or	r2,r2,r18
 400ad54:	8080030d 	sth	r2,12(r16)
 400ad58:	0027883a 	mov	r19,zero
 400ad5c:	003fd806 	br	400acc0 <__flash_rwdata_start+0xffffd420>
 400ad60:	8140038f 	ldh	r5,14(r16)
 400ad64:	8809883a 	mov	r4,r17
 400ad68:	400ae7c0 	call	400ae7c <_isatty_r>
 400ad6c:	103fe226 	beq	r2,zero,400acf8 <__flash_rwdata_start+0xffffd458>
 400ad70:	8080030b 	ldhu	r2,12(r16)
 400ad74:	10800054 	ori	r2,r2,1
 400ad78:	8080030d 	sth	r2,12(r16)
 400ad7c:	003fde06 	br	400acf8 <__flash_rwdata_start+0xffffd458>
 400ad80:	8080030b 	ldhu	r2,12(r16)
 400ad84:	10c0800c 	andi	r3,r2,512
 400ad88:	183fdb1e 	bne	r3,zero,400acf8 <__flash_rwdata_start+0xffffd458>
 400ad8c:	10800094 	ori	r2,r2,2
 400ad90:	80c010c4 	addi	r3,r16,67
 400ad94:	8080030d 	sth	r2,12(r16)
 400ad98:	00800044 	movi	r2,1
 400ad9c:	80c00015 	stw	r3,0(r16)
 400ada0:	80c00415 	stw	r3,16(r16)
 400ada4:	80800515 	stw	r2,20(r16)
 400ada8:	003fd306 	br	400acf8 <__flash_rwdata_start+0xffffd458>
 400adac:	04810004 	movi	r18,1024
 400adb0:	003fc306 	br	400acc0 <__flash_rwdata_start+0xffffd420>
 400adb4:	0027883a 	mov	r19,zero
 400adb8:	04810004 	movi	r18,1024
 400adbc:	003fc006 	br	400acc0 <__flash_rwdata_start+0xffffd420>

0400adc0 <_read_r>:
 400adc0:	defffd04 	addi	sp,sp,-12
 400adc4:	2805883a 	mov	r2,r5
 400adc8:	dc000015 	stw	r16,0(sp)
 400adcc:	04000034 	movhi	r16,0
 400add0:	dc400115 	stw	r17,4(sp)
 400add4:	300b883a 	mov	r5,r6
 400add8:	8406b204 	addi	r16,r16,6856
 400addc:	2023883a 	mov	r17,r4
 400ade0:	380d883a 	mov	r6,r7
 400ade4:	1009883a 	mov	r4,r2
 400ade8:	dfc00215 	stw	ra,8(sp)
 400adec:	80000015 	stw	zero,0(r16)
 400adf0:	400b6cc0 	call	400b6cc <read>
 400adf4:	00ffffc4 	movi	r3,-1
 400adf8:	10c00526 	beq	r2,r3,400ae10 <_read_r+0x50>
 400adfc:	dfc00217 	ldw	ra,8(sp)
 400ae00:	dc400117 	ldw	r17,4(sp)
 400ae04:	dc000017 	ldw	r16,0(sp)
 400ae08:	dec00304 	addi	sp,sp,12
 400ae0c:	f800283a 	ret
 400ae10:	80c00017 	ldw	r3,0(r16)
 400ae14:	183ff926 	beq	r3,zero,400adfc <__flash_rwdata_start+0xffffd55c>
 400ae18:	88c00015 	stw	r3,0(r17)
 400ae1c:	003ff706 	br	400adfc <__flash_rwdata_start+0xffffd55c>

0400ae20 <_fstat_r>:
 400ae20:	defffd04 	addi	sp,sp,-12
 400ae24:	2805883a 	mov	r2,r5
 400ae28:	dc000015 	stw	r16,0(sp)
 400ae2c:	04000034 	movhi	r16,0
 400ae30:	dc400115 	stw	r17,4(sp)
 400ae34:	8406b204 	addi	r16,r16,6856
 400ae38:	2023883a 	mov	r17,r4
 400ae3c:	300b883a 	mov	r5,r6
 400ae40:	1009883a 	mov	r4,r2
 400ae44:	dfc00215 	stw	ra,8(sp)
 400ae48:	80000015 	stw	zero,0(r16)
 400ae4c:	400b2280 	call	400b228 <fstat>
 400ae50:	00ffffc4 	movi	r3,-1
 400ae54:	10c00526 	beq	r2,r3,400ae6c <_fstat_r+0x4c>
 400ae58:	dfc00217 	ldw	ra,8(sp)
 400ae5c:	dc400117 	ldw	r17,4(sp)
 400ae60:	dc000017 	ldw	r16,0(sp)
 400ae64:	dec00304 	addi	sp,sp,12
 400ae68:	f800283a 	ret
 400ae6c:	80c00017 	ldw	r3,0(r16)
 400ae70:	183ff926 	beq	r3,zero,400ae58 <__flash_rwdata_start+0xffffd5b8>
 400ae74:	88c00015 	stw	r3,0(r17)
 400ae78:	003ff706 	br	400ae58 <__flash_rwdata_start+0xffffd5b8>

0400ae7c <_isatty_r>:
 400ae7c:	defffd04 	addi	sp,sp,-12
 400ae80:	dc000015 	stw	r16,0(sp)
 400ae84:	04000034 	movhi	r16,0
 400ae88:	dc400115 	stw	r17,4(sp)
 400ae8c:	8406b204 	addi	r16,r16,6856
 400ae90:	2023883a 	mov	r17,r4
 400ae94:	2809883a 	mov	r4,r5
 400ae98:	dfc00215 	stw	ra,8(sp)
 400ae9c:	80000015 	stw	zero,0(r16)
 400aea0:	400b31c0 	call	400b31c <isatty>
 400aea4:	00ffffc4 	movi	r3,-1
 400aea8:	10c00526 	beq	r2,r3,400aec0 <_isatty_r+0x44>
 400aeac:	dfc00217 	ldw	ra,8(sp)
 400aeb0:	dc400117 	ldw	r17,4(sp)
 400aeb4:	dc000017 	ldw	r16,0(sp)
 400aeb8:	dec00304 	addi	sp,sp,12
 400aebc:	f800283a 	ret
 400aec0:	80c00017 	ldw	r3,0(r16)
 400aec4:	183ff926 	beq	r3,zero,400aeac <__flash_rwdata_start+0xffffd60c>
 400aec8:	88c00015 	stw	r3,0(r17)
 400aecc:	003ff706 	br	400aeac <__flash_rwdata_start+0xffffd60c>

0400aed0 <__divsi3>:
 400aed0:	20001b16 	blt	r4,zero,400af40 <__divsi3+0x70>
 400aed4:	000f883a 	mov	r7,zero
 400aed8:	28001616 	blt	r5,zero,400af34 <__divsi3+0x64>
 400aedc:	200d883a 	mov	r6,r4
 400aee0:	29001a2e 	bgeu	r5,r4,400af4c <__divsi3+0x7c>
 400aee4:	00800804 	movi	r2,32
 400aee8:	00c00044 	movi	r3,1
 400aeec:	00000106 	br	400aef4 <__divsi3+0x24>
 400aef0:	10000d26 	beq	r2,zero,400af28 <__divsi3+0x58>
 400aef4:	294b883a 	add	r5,r5,r5
 400aef8:	10bfffc4 	addi	r2,r2,-1
 400aefc:	18c7883a 	add	r3,r3,r3
 400af00:	293ffb36 	bltu	r5,r4,400aef0 <__flash_rwdata_start+0xffffd650>
 400af04:	0005883a 	mov	r2,zero
 400af08:	18000726 	beq	r3,zero,400af28 <__divsi3+0x58>
 400af0c:	0005883a 	mov	r2,zero
 400af10:	31400236 	bltu	r6,r5,400af1c <__divsi3+0x4c>
 400af14:	314dc83a 	sub	r6,r6,r5
 400af18:	10c4b03a 	or	r2,r2,r3
 400af1c:	1806d07a 	srli	r3,r3,1
 400af20:	280ad07a 	srli	r5,r5,1
 400af24:	183ffa1e 	bne	r3,zero,400af10 <__flash_rwdata_start+0xffffd670>
 400af28:	38000126 	beq	r7,zero,400af30 <__divsi3+0x60>
 400af2c:	0085c83a 	sub	r2,zero,r2
 400af30:	f800283a 	ret
 400af34:	014bc83a 	sub	r5,zero,r5
 400af38:	39c0005c 	xori	r7,r7,1
 400af3c:	003fe706 	br	400aedc <__flash_rwdata_start+0xffffd63c>
 400af40:	0109c83a 	sub	r4,zero,r4
 400af44:	01c00044 	movi	r7,1
 400af48:	003fe306 	br	400aed8 <__flash_rwdata_start+0xffffd638>
 400af4c:	00c00044 	movi	r3,1
 400af50:	003fee06 	br	400af0c <__flash_rwdata_start+0xffffd66c>

0400af54 <__modsi3>:
 400af54:	20001716 	blt	r4,zero,400afb4 <__modsi3+0x60>
 400af58:	000f883a 	mov	r7,zero
 400af5c:	2005883a 	mov	r2,r4
 400af60:	28001216 	blt	r5,zero,400afac <__modsi3+0x58>
 400af64:	2900162e 	bgeu	r5,r4,400afc0 <__modsi3+0x6c>
 400af68:	01800804 	movi	r6,32
 400af6c:	00c00044 	movi	r3,1
 400af70:	00000106 	br	400af78 <__modsi3+0x24>
 400af74:	30000a26 	beq	r6,zero,400afa0 <__modsi3+0x4c>
 400af78:	294b883a 	add	r5,r5,r5
 400af7c:	31bfffc4 	addi	r6,r6,-1
 400af80:	18c7883a 	add	r3,r3,r3
 400af84:	293ffb36 	bltu	r5,r4,400af74 <__flash_rwdata_start+0xffffd6d4>
 400af88:	18000526 	beq	r3,zero,400afa0 <__modsi3+0x4c>
 400af8c:	1806d07a 	srli	r3,r3,1
 400af90:	11400136 	bltu	r2,r5,400af98 <__modsi3+0x44>
 400af94:	1145c83a 	sub	r2,r2,r5
 400af98:	280ad07a 	srli	r5,r5,1
 400af9c:	183ffb1e 	bne	r3,zero,400af8c <__flash_rwdata_start+0xffffd6ec>
 400afa0:	38000126 	beq	r7,zero,400afa8 <__modsi3+0x54>
 400afa4:	0085c83a 	sub	r2,zero,r2
 400afa8:	f800283a 	ret
 400afac:	014bc83a 	sub	r5,zero,r5
 400afb0:	003fec06 	br	400af64 <__flash_rwdata_start+0xffffd6c4>
 400afb4:	0109c83a 	sub	r4,zero,r4
 400afb8:	01c00044 	movi	r7,1
 400afbc:	003fe706 	br	400af5c <__flash_rwdata_start+0xffffd6bc>
 400afc0:	00c00044 	movi	r3,1
 400afc4:	003ff106 	br	400af8c <__flash_rwdata_start+0xffffd6ec>

0400afc8 <__udivsi3>:
 400afc8:	200d883a 	mov	r6,r4
 400afcc:	2900152e 	bgeu	r5,r4,400b024 <__udivsi3+0x5c>
 400afd0:	28001416 	blt	r5,zero,400b024 <__udivsi3+0x5c>
 400afd4:	00800804 	movi	r2,32
 400afd8:	00c00044 	movi	r3,1
 400afdc:	00000206 	br	400afe8 <__udivsi3+0x20>
 400afe0:	10000e26 	beq	r2,zero,400b01c <__udivsi3+0x54>
 400afe4:	28000516 	blt	r5,zero,400affc <__udivsi3+0x34>
 400afe8:	294b883a 	add	r5,r5,r5
 400afec:	10bfffc4 	addi	r2,r2,-1
 400aff0:	18c7883a 	add	r3,r3,r3
 400aff4:	293ffa36 	bltu	r5,r4,400afe0 <__flash_rwdata_start+0xffffd740>
 400aff8:	18000826 	beq	r3,zero,400b01c <__udivsi3+0x54>
 400affc:	0005883a 	mov	r2,zero
 400b000:	31400236 	bltu	r6,r5,400b00c <__udivsi3+0x44>
 400b004:	314dc83a 	sub	r6,r6,r5
 400b008:	10c4b03a 	or	r2,r2,r3
 400b00c:	1806d07a 	srli	r3,r3,1
 400b010:	280ad07a 	srli	r5,r5,1
 400b014:	183ffa1e 	bne	r3,zero,400b000 <__flash_rwdata_start+0xffffd760>
 400b018:	f800283a 	ret
 400b01c:	0005883a 	mov	r2,zero
 400b020:	f800283a 	ret
 400b024:	00c00044 	movi	r3,1
 400b028:	003ff406 	br	400affc <__flash_rwdata_start+0xffffd75c>

0400b02c <__umodsi3>:
 400b02c:	2005883a 	mov	r2,r4
 400b030:	2900122e 	bgeu	r5,r4,400b07c <__umodsi3+0x50>
 400b034:	28001116 	blt	r5,zero,400b07c <__umodsi3+0x50>
 400b038:	01800804 	movi	r6,32
 400b03c:	00c00044 	movi	r3,1
 400b040:	00000206 	br	400b04c <__umodsi3+0x20>
 400b044:	30000c26 	beq	r6,zero,400b078 <__umodsi3+0x4c>
 400b048:	28000516 	blt	r5,zero,400b060 <__umodsi3+0x34>
 400b04c:	294b883a 	add	r5,r5,r5
 400b050:	31bfffc4 	addi	r6,r6,-1
 400b054:	18c7883a 	add	r3,r3,r3
 400b058:	293ffa36 	bltu	r5,r4,400b044 <__flash_rwdata_start+0xffffd7a4>
 400b05c:	18000626 	beq	r3,zero,400b078 <__umodsi3+0x4c>
 400b060:	1806d07a 	srli	r3,r3,1
 400b064:	11400136 	bltu	r2,r5,400b06c <__umodsi3+0x40>
 400b068:	1145c83a 	sub	r2,r2,r5
 400b06c:	280ad07a 	srli	r5,r5,1
 400b070:	183ffb1e 	bne	r3,zero,400b060 <__flash_rwdata_start+0xffffd7c0>
 400b074:	f800283a 	ret
 400b078:	f800283a 	ret
 400b07c:	00c00044 	movi	r3,1
 400b080:	003ff706 	br	400b060 <__flash_rwdata_start+0xffffd7c0>

0400b084 <__mulsi3>:
 400b084:	0005883a 	mov	r2,zero
 400b088:	20000726 	beq	r4,zero,400b0a8 <__mulsi3+0x24>
 400b08c:	20c0004c 	andi	r3,r4,1
 400b090:	2008d07a 	srli	r4,r4,1
 400b094:	18000126 	beq	r3,zero,400b09c <__mulsi3+0x18>
 400b098:	1145883a 	add	r2,r2,r5
 400b09c:	294b883a 	add	r5,r5,r5
 400b0a0:	203ffa1e 	bne	r4,zero,400b08c <__flash_rwdata_start+0xffffd7ec>
 400b0a4:	f800283a 	ret
 400b0a8:	f800283a 	ret

0400b0ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b0ac:	defffe04 	addi	sp,sp,-8
 400b0b0:	dfc00115 	stw	ra,4(sp)
 400b0b4:	df000015 	stw	fp,0(sp)
 400b0b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b0bc:	d0a00917 	ldw	r2,-32732(gp)
 400b0c0:	10000326 	beq	r2,zero,400b0d0 <alt_get_errno+0x24>
 400b0c4:	d0a00917 	ldw	r2,-32732(gp)
 400b0c8:	103ee83a 	callr	r2
 400b0cc:	00000106 	br	400b0d4 <alt_get_errno+0x28>
 400b0d0:	d0a01104 	addi	r2,gp,-32700
}
 400b0d4:	e037883a 	mov	sp,fp
 400b0d8:	dfc00117 	ldw	ra,4(sp)
 400b0dc:	df000017 	ldw	fp,0(sp)
 400b0e0:	dec00204 	addi	sp,sp,8
 400b0e4:	f800283a 	ret

0400b0e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400b0e8:	defffb04 	addi	sp,sp,-20
 400b0ec:	dfc00415 	stw	ra,16(sp)
 400b0f0:	df000315 	stw	fp,12(sp)
 400b0f4:	df000304 	addi	fp,sp,12
 400b0f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400b0fc:	e0bfff17 	ldw	r2,-4(fp)
 400b100:	10000816 	blt	r2,zero,400b124 <close+0x3c>
 400b104:	01400304 	movi	r5,12
 400b108:	e13fff17 	ldw	r4,-4(fp)
 400b10c:	400b0840 	call	400b084 <__mulsi3>
 400b110:	1007883a 	mov	r3,r2
 400b114:	00800034 	movhi	r2,0
 400b118:	10822904 	addi	r2,r2,2212
 400b11c:	1885883a 	add	r2,r3,r2
 400b120:	00000106 	br	400b128 <close+0x40>
 400b124:	0005883a 	mov	r2,zero
 400b128:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400b12c:	e0bffd17 	ldw	r2,-12(fp)
 400b130:	10001926 	beq	r2,zero,400b198 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400b134:	e0bffd17 	ldw	r2,-12(fp)
 400b138:	10800017 	ldw	r2,0(r2)
 400b13c:	10800417 	ldw	r2,16(r2)
 400b140:	10000626 	beq	r2,zero,400b15c <close+0x74>
 400b144:	e0bffd17 	ldw	r2,-12(fp)
 400b148:	10800017 	ldw	r2,0(r2)
 400b14c:	10800417 	ldw	r2,16(r2)
 400b150:	e13ffd17 	ldw	r4,-12(fp)
 400b154:	103ee83a 	callr	r2
 400b158:	00000106 	br	400b160 <close+0x78>
 400b15c:	0005883a 	mov	r2,zero
 400b160:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400b164:	e13fff17 	ldw	r4,-4(fp)
 400b168:	400b7d00 	call	400b7d0 <alt_release_fd>
    if (rval < 0)
 400b16c:	e0bffe17 	ldw	r2,-8(fp)
 400b170:	1000070e 	bge	r2,zero,400b190 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 400b174:	400b0ac0 	call	400b0ac <alt_get_errno>
 400b178:	1007883a 	mov	r3,r2
 400b17c:	e0bffe17 	ldw	r2,-8(fp)
 400b180:	0085c83a 	sub	r2,zero,r2
 400b184:	18800015 	stw	r2,0(r3)
      return -1;
 400b188:	00bfffc4 	movi	r2,-1
 400b18c:	00000706 	br	400b1ac <close+0xc4>
    }
    return 0;
 400b190:	0005883a 	mov	r2,zero
 400b194:	00000506 	br	400b1ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400b198:	400b0ac0 	call	400b0ac <alt_get_errno>
 400b19c:	1007883a 	mov	r3,r2
 400b1a0:	00801444 	movi	r2,81
 400b1a4:	18800015 	stw	r2,0(r3)
    return -1;
 400b1a8:	00bfffc4 	movi	r2,-1
  }
}
 400b1ac:	e037883a 	mov	sp,fp
 400b1b0:	dfc00117 	ldw	ra,4(sp)
 400b1b4:	df000017 	ldw	fp,0(sp)
 400b1b8:	dec00204 	addi	sp,sp,8
 400b1bc:	f800283a 	ret

0400b1c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400b1c0:	defffc04 	addi	sp,sp,-16
 400b1c4:	df000315 	stw	fp,12(sp)
 400b1c8:	df000304 	addi	fp,sp,12
 400b1cc:	e13ffd15 	stw	r4,-12(fp)
 400b1d0:	e17ffe15 	stw	r5,-8(fp)
 400b1d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400b1d8:	e0bfff17 	ldw	r2,-4(fp)
}
 400b1dc:	e037883a 	mov	sp,fp
 400b1e0:	df000017 	ldw	fp,0(sp)
 400b1e4:	dec00104 	addi	sp,sp,4
 400b1e8:	f800283a 	ret

0400b1ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b1ec:	defffe04 	addi	sp,sp,-8
 400b1f0:	dfc00115 	stw	ra,4(sp)
 400b1f4:	df000015 	stw	fp,0(sp)
 400b1f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b1fc:	d0a00917 	ldw	r2,-32732(gp)
 400b200:	10000326 	beq	r2,zero,400b210 <alt_get_errno+0x24>
 400b204:	d0a00917 	ldw	r2,-32732(gp)
 400b208:	103ee83a 	callr	r2
 400b20c:	00000106 	br	400b214 <alt_get_errno+0x28>
 400b210:	d0a01104 	addi	r2,gp,-32700
}
 400b214:	e037883a 	mov	sp,fp
 400b218:	dfc00117 	ldw	ra,4(sp)
 400b21c:	df000017 	ldw	fp,0(sp)
 400b220:	dec00204 	addi	sp,sp,8
 400b224:	f800283a 	ret

0400b228 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400b228:	defffb04 	addi	sp,sp,-20
 400b22c:	dfc00415 	stw	ra,16(sp)
 400b230:	df000315 	stw	fp,12(sp)
 400b234:	df000304 	addi	fp,sp,12
 400b238:	e13ffe15 	stw	r4,-8(fp)
 400b23c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400b240:	e0bffe17 	ldw	r2,-8(fp)
 400b244:	10000816 	blt	r2,zero,400b268 <fstat+0x40>
 400b248:	01400304 	movi	r5,12
 400b24c:	e13ffe17 	ldw	r4,-8(fp)
 400b250:	400b0840 	call	400b084 <__mulsi3>
 400b254:	1007883a 	mov	r3,r2
 400b258:	00800034 	movhi	r2,0
 400b25c:	10822904 	addi	r2,r2,2212
 400b260:	1885883a 	add	r2,r3,r2
 400b264:	00000106 	br	400b26c <fstat+0x44>
 400b268:	0005883a 	mov	r2,zero
 400b26c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400b270:	e0bffd17 	ldw	r2,-12(fp)
 400b274:	10001026 	beq	r2,zero,400b2b8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400b278:	e0bffd17 	ldw	r2,-12(fp)
 400b27c:	10800017 	ldw	r2,0(r2)
 400b280:	10800817 	ldw	r2,32(r2)
 400b284:	10000726 	beq	r2,zero,400b2a4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 400b288:	e0bffd17 	ldw	r2,-12(fp)
 400b28c:	10800017 	ldw	r2,0(r2)
 400b290:	10800817 	ldw	r2,32(r2)
 400b294:	e17fff17 	ldw	r5,-4(fp)
 400b298:	e13ffd17 	ldw	r4,-12(fp)
 400b29c:	103ee83a 	callr	r2
 400b2a0:	00000a06 	br	400b2cc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400b2a4:	e0bfff17 	ldw	r2,-4(fp)
 400b2a8:	00c80004 	movi	r3,8192
 400b2ac:	10c00115 	stw	r3,4(r2)
      return 0;
 400b2b0:	0005883a 	mov	r2,zero
 400b2b4:	00000506 	br	400b2cc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400b2b8:	400b1ec0 	call	400b1ec <alt_get_errno>
 400b2bc:	1007883a 	mov	r3,r2
 400b2c0:	00801444 	movi	r2,81
 400b2c4:	18800015 	stw	r2,0(r3)
    return -1;
 400b2c8:	00bfffc4 	movi	r2,-1
  }
}
 400b2cc:	e037883a 	mov	sp,fp
 400b2d0:	dfc00117 	ldw	ra,4(sp)
 400b2d4:	df000017 	ldw	fp,0(sp)
 400b2d8:	dec00204 	addi	sp,sp,8
 400b2dc:	f800283a 	ret

0400b2e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b2e0:	defffe04 	addi	sp,sp,-8
 400b2e4:	dfc00115 	stw	ra,4(sp)
 400b2e8:	df000015 	stw	fp,0(sp)
 400b2ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b2f0:	d0a00917 	ldw	r2,-32732(gp)
 400b2f4:	10000326 	beq	r2,zero,400b304 <alt_get_errno+0x24>
 400b2f8:	d0a00917 	ldw	r2,-32732(gp)
 400b2fc:	103ee83a 	callr	r2
 400b300:	00000106 	br	400b308 <alt_get_errno+0x28>
 400b304:	d0a01104 	addi	r2,gp,-32700
}
 400b308:	e037883a 	mov	sp,fp
 400b30c:	dfc00117 	ldw	ra,4(sp)
 400b310:	df000017 	ldw	fp,0(sp)
 400b314:	dec00204 	addi	sp,sp,8
 400b318:	f800283a 	ret

0400b31c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400b31c:	deffed04 	addi	sp,sp,-76
 400b320:	dfc01215 	stw	ra,72(sp)
 400b324:	df001115 	stw	fp,68(sp)
 400b328:	df001104 	addi	fp,sp,68
 400b32c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400b330:	e0bfff17 	ldw	r2,-4(fp)
 400b334:	10000816 	blt	r2,zero,400b358 <isatty+0x3c>
 400b338:	01400304 	movi	r5,12
 400b33c:	e13fff17 	ldw	r4,-4(fp)
 400b340:	400b0840 	call	400b084 <__mulsi3>
 400b344:	1007883a 	mov	r3,r2
 400b348:	00800034 	movhi	r2,0
 400b34c:	10822904 	addi	r2,r2,2212
 400b350:	1885883a 	add	r2,r3,r2
 400b354:	00000106 	br	400b35c <isatty+0x40>
 400b358:	0005883a 	mov	r2,zero
 400b35c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400b360:	e0bfef17 	ldw	r2,-68(fp)
 400b364:	10000e26 	beq	r2,zero,400b3a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400b368:	e0bfef17 	ldw	r2,-68(fp)
 400b36c:	10800017 	ldw	r2,0(r2)
 400b370:	10800817 	ldw	r2,32(r2)
 400b374:	1000021e 	bne	r2,zero,400b380 <isatty+0x64>
    {
      return 1;
 400b378:	00800044 	movi	r2,1
 400b37c:	00000d06 	br	400b3b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400b380:	e0bff004 	addi	r2,fp,-64
 400b384:	100b883a 	mov	r5,r2
 400b388:	e13fff17 	ldw	r4,-4(fp)
 400b38c:	400b2280 	call	400b228 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400b390:	e0bff117 	ldw	r2,-60(fp)
 400b394:	10880020 	cmpeqi	r2,r2,8192
 400b398:	10803fcc 	andi	r2,r2,255
 400b39c:	00000506 	br	400b3b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400b3a0:	400b2e00 	call	400b2e0 <alt_get_errno>
 400b3a4:	1007883a 	mov	r3,r2
 400b3a8:	00801444 	movi	r2,81
 400b3ac:	18800015 	stw	r2,0(r3)
    return 0;
 400b3b0:	0005883a 	mov	r2,zero
  }
}
 400b3b4:	e037883a 	mov	sp,fp
 400b3b8:	dfc00117 	ldw	ra,4(sp)
 400b3bc:	df000017 	ldw	fp,0(sp)
 400b3c0:	dec00204 	addi	sp,sp,8
 400b3c4:	f800283a 	ret

0400b3c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400b3c8:	defffc04 	addi	sp,sp,-16
 400b3cc:	df000315 	stw	fp,12(sp)
 400b3d0:	df000304 	addi	fp,sp,12
 400b3d4:	e13ffd15 	stw	r4,-12(fp)
 400b3d8:	e17ffe15 	stw	r5,-8(fp)
 400b3dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400b3e0:	e0fffe17 	ldw	r3,-8(fp)
 400b3e4:	e0bffd17 	ldw	r2,-12(fp)
 400b3e8:	18800c26 	beq	r3,r2,400b41c <alt_load_section+0x54>
  {
    while( to != end )
 400b3ec:	00000806 	br	400b410 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400b3f0:	e0bffe17 	ldw	r2,-8(fp)
 400b3f4:	10c00104 	addi	r3,r2,4
 400b3f8:	e0fffe15 	stw	r3,-8(fp)
 400b3fc:	e0fffd17 	ldw	r3,-12(fp)
 400b400:	19000104 	addi	r4,r3,4
 400b404:	e13ffd15 	stw	r4,-12(fp)
 400b408:	18c00017 	ldw	r3,0(r3)
 400b40c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400b410:	e0fffe17 	ldw	r3,-8(fp)
 400b414:	e0bfff17 	ldw	r2,-4(fp)
 400b418:	18bff51e 	bne	r3,r2,400b3f0 <__flash_rwdata_start+0xffffdb50>
    {
      *to++ = *from++;
    }
  }
}
 400b41c:	0001883a 	nop
 400b420:	e037883a 	mov	sp,fp
 400b424:	df000017 	ldw	fp,0(sp)
 400b428:	dec00104 	addi	sp,sp,4
 400b42c:	f800283a 	ret

0400b430 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400b430:	defffe04 	addi	sp,sp,-8
 400b434:	dfc00115 	stw	ra,4(sp)
 400b438:	df000015 	stw	fp,0(sp)
 400b43c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400b440:	01800034 	movhi	r6,0
 400b444:	3186af04 	addi	r6,r6,6844
 400b448:	01400034 	movhi	r5,0
 400b44c:	29401404 	addi	r5,r5,80
 400b450:	01010074 	movhi	r4,1025
 400b454:	21362804 	addi	r4,r4,-10080
 400b458:	400b3c80 	call	400b3c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400b45c:	01810074 	movhi	r6,1025
 400b460:	31a08c04 	addi	r6,r6,-32208
 400b464:	01410074 	movhi	r5,1025
 400b468:	29600804 	addi	r5,r5,-32736
 400b46c:	01010074 	movhi	r4,1025
 400b470:	21200804 	addi	r4,r4,-32736
 400b474:	400b3c80 	call	400b3c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400b478:	01800034 	movhi	r6,0
 400b47c:	31801404 	addi	r6,r6,80
 400b480:	01400034 	movhi	r5,0
 400b484:	29400004 	addi	r5,r5,0
 400b488:	01010074 	movhi	r4,1025
 400b48c:	21361404 	addi	r4,r4,-10160
 400b490:	400b3c80 	call	400b3c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400b494:	400c7980 	call	400c798 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400b498:	400c9580 	call	400c958 <alt_icache_flush_all>
}
 400b49c:	0001883a 	nop
 400b4a0:	e037883a 	mov	sp,fp
 400b4a4:	dfc00117 	ldw	ra,4(sp)
 400b4a8:	df000017 	ldw	fp,0(sp)
 400b4ac:	dec00204 	addi	sp,sp,8
 400b4b0:	f800283a 	ret

0400b4b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b4b4:	defffe04 	addi	sp,sp,-8
 400b4b8:	dfc00115 	stw	ra,4(sp)
 400b4bc:	df000015 	stw	fp,0(sp)
 400b4c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b4c4:	d0a00917 	ldw	r2,-32732(gp)
 400b4c8:	10000326 	beq	r2,zero,400b4d8 <alt_get_errno+0x24>
 400b4cc:	d0a00917 	ldw	r2,-32732(gp)
 400b4d0:	103ee83a 	callr	r2
 400b4d4:	00000106 	br	400b4dc <alt_get_errno+0x28>
 400b4d8:	d0a01104 	addi	r2,gp,-32700
}
 400b4dc:	e037883a 	mov	sp,fp
 400b4e0:	dfc00117 	ldw	ra,4(sp)
 400b4e4:	df000017 	ldw	fp,0(sp)
 400b4e8:	dec00204 	addi	sp,sp,8
 400b4ec:	f800283a 	ret

0400b4f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400b4f0:	defff904 	addi	sp,sp,-28
 400b4f4:	dfc00615 	stw	ra,24(sp)
 400b4f8:	df000515 	stw	fp,20(sp)
 400b4fc:	df000504 	addi	fp,sp,20
 400b500:	e13ffd15 	stw	r4,-12(fp)
 400b504:	e17ffe15 	stw	r5,-8(fp)
 400b508:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400b50c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400b510:	e0bffd17 	ldw	r2,-12(fp)
 400b514:	10000816 	blt	r2,zero,400b538 <lseek+0x48>
 400b518:	01400304 	movi	r5,12
 400b51c:	e13ffd17 	ldw	r4,-12(fp)
 400b520:	400b0840 	call	400b084 <__mulsi3>
 400b524:	1007883a 	mov	r3,r2
 400b528:	00800034 	movhi	r2,0
 400b52c:	10822904 	addi	r2,r2,2212
 400b530:	1885883a 	add	r2,r3,r2
 400b534:	00000106 	br	400b53c <lseek+0x4c>
 400b538:	0005883a 	mov	r2,zero
 400b53c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400b540:	e0bffc17 	ldw	r2,-16(fp)
 400b544:	10001026 	beq	r2,zero,400b588 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400b548:	e0bffc17 	ldw	r2,-16(fp)
 400b54c:	10800017 	ldw	r2,0(r2)
 400b550:	10800717 	ldw	r2,28(r2)
 400b554:	10000926 	beq	r2,zero,400b57c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400b558:	e0bffc17 	ldw	r2,-16(fp)
 400b55c:	10800017 	ldw	r2,0(r2)
 400b560:	10800717 	ldw	r2,28(r2)
 400b564:	e1bfff17 	ldw	r6,-4(fp)
 400b568:	e17ffe17 	ldw	r5,-8(fp)
 400b56c:	e13ffc17 	ldw	r4,-16(fp)
 400b570:	103ee83a 	callr	r2
 400b574:	e0bffb15 	stw	r2,-20(fp)
 400b578:	00000506 	br	400b590 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400b57c:	00bfde84 	movi	r2,-134
 400b580:	e0bffb15 	stw	r2,-20(fp)
 400b584:	00000206 	br	400b590 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400b588:	00bfebc4 	movi	r2,-81
 400b58c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400b590:	e0bffb17 	ldw	r2,-20(fp)
 400b594:	1000070e 	bge	r2,zero,400b5b4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 400b598:	400b4b40 	call	400b4b4 <alt_get_errno>
 400b59c:	1007883a 	mov	r3,r2
 400b5a0:	e0bffb17 	ldw	r2,-20(fp)
 400b5a4:	0085c83a 	sub	r2,zero,r2
 400b5a8:	18800015 	stw	r2,0(r3)
    rc = -1;
 400b5ac:	00bfffc4 	movi	r2,-1
 400b5b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400b5b4:	e0bffb17 	ldw	r2,-20(fp)
}
 400b5b8:	e037883a 	mov	sp,fp
 400b5bc:	dfc00117 	ldw	ra,4(sp)
 400b5c0:	df000017 	ldw	fp,0(sp)
 400b5c4:	dec00204 	addi	sp,sp,8
 400b5c8:	f800283a 	ret

0400b5cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400b5cc:	defffd04 	addi	sp,sp,-12
 400b5d0:	dfc00215 	stw	ra,8(sp)
 400b5d4:	df000115 	stw	fp,4(sp)
 400b5d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400b5dc:	0009883a 	mov	r4,zero
 400b5e0:	400ba740 	call	400ba74 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400b5e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400b5e8:	400baac0 	call	400baac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400b5ec:	01800034 	movhi	r6,0
 400b5f0:	31800a04 	addi	r6,r6,40
 400b5f4:	01400034 	movhi	r5,0
 400b5f8:	29400a04 	addi	r5,r5,40
 400b5fc:	01000034 	movhi	r4,0
 400b600:	21000a04 	addi	r4,r4,40
 400b604:	400ccfc0 	call	400ccfc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400b608:	400c8980 	call	400c898 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400b60c:	01010074 	movhi	r4,1025
 400b610:	21323e04 	addi	r4,r4,-14088
 400b614:	400d4bc0 	call	400d4bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400b618:	d0a01217 	ldw	r2,-32696(gp)
 400b61c:	d0e01317 	ldw	r3,-32692(gp)
 400b620:	d1201417 	ldw	r4,-32688(gp)
 400b624:	200d883a 	mov	r6,r4
 400b628:	180b883a 	mov	r5,r3
 400b62c:	1009883a 	mov	r4,r2
 400b630:	400826c0 	call	400826c <main>
 400b634:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400b638:	01000044 	movi	r4,1
 400b63c:	400b0e80 	call	400b0e8 <close>
  exit (result);
 400b640:	e13fff17 	ldw	r4,-4(fp)
 400b644:	400d4d00 	call	400d4d0 <exit>

0400b648 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400b648:	defffe04 	addi	sp,sp,-8
 400b64c:	df000115 	stw	fp,4(sp)
 400b650:	df000104 	addi	fp,sp,4
 400b654:	e13fff15 	stw	r4,-4(fp)
}
 400b658:	0001883a 	nop
 400b65c:	e037883a 	mov	sp,fp
 400b660:	df000017 	ldw	fp,0(sp)
 400b664:	dec00104 	addi	sp,sp,4
 400b668:	f800283a 	ret

0400b66c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400b66c:	defffe04 	addi	sp,sp,-8
 400b670:	df000115 	stw	fp,4(sp)
 400b674:	df000104 	addi	fp,sp,4
 400b678:	e13fff15 	stw	r4,-4(fp)
}
 400b67c:	0001883a 	nop
 400b680:	e037883a 	mov	sp,fp
 400b684:	df000017 	ldw	fp,0(sp)
 400b688:	dec00104 	addi	sp,sp,4
 400b68c:	f800283a 	ret

0400b690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b690:	defffe04 	addi	sp,sp,-8
 400b694:	dfc00115 	stw	ra,4(sp)
 400b698:	df000015 	stw	fp,0(sp)
 400b69c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b6a0:	d0a00917 	ldw	r2,-32732(gp)
 400b6a4:	10000326 	beq	r2,zero,400b6b4 <alt_get_errno+0x24>
 400b6a8:	d0a00917 	ldw	r2,-32732(gp)
 400b6ac:	103ee83a 	callr	r2
 400b6b0:	00000106 	br	400b6b8 <alt_get_errno+0x28>
 400b6b4:	d0a01104 	addi	r2,gp,-32700
}
 400b6b8:	e037883a 	mov	sp,fp
 400b6bc:	dfc00117 	ldw	ra,4(sp)
 400b6c0:	df000017 	ldw	fp,0(sp)
 400b6c4:	dec00204 	addi	sp,sp,8
 400b6c8:	f800283a 	ret

0400b6cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400b6cc:	defff904 	addi	sp,sp,-28
 400b6d0:	dfc00615 	stw	ra,24(sp)
 400b6d4:	df000515 	stw	fp,20(sp)
 400b6d8:	df000504 	addi	fp,sp,20
 400b6dc:	e13ffd15 	stw	r4,-12(fp)
 400b6e0:	e17ffe15 	stw	r5,-8(fp)
 400b6e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400b6e8:	e0bffd17 	ldw	r2,-12(fp)
 400b6ec:	10000816 	blt	r2,zero,400b710 <read+0x44>
 400b6f0:	01400304 	movi	r5,12
 400b6f4:	e13ffd17 	ldw	r4,-12(fp)
 400b6f8:	400b0840 	call	400b084 <__mulsi3>
 400b6fc:	1007883a 	mov	r3,r2
 400b700:	00800034 	movhi	r2,0
 400b704:	10822904 	addi	r2,r2,2212
 400b708:	1885883a 	add	r2,r3,r2
 400b70c:	00000106 	br	400b714 <read+0x48>
 400b710:	0005883a 	mov	r2,zero
 400b714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400b718:	e0bffb17 	ldw	r2,-20(fp)
 400b71c:	10002226 	beq	r2,zero,400b7a8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400b720:	e0bffb17 	ldw	r2,-20(fp)
 400b724:	10800217 	ldw	r2,8(r2)
 400b728:	108000cc 	andi	r2,r2,3
 400b72c:	10800060 	cmpeqi	r2,r2,1
 400b730:	1000181e 	bne	r2,zero,400b794 <read+0xc8>
        (fd->dev->read))
 400b734:	e0bffb17 	ldw	r2,-20(fp)
 400b738:	10800017 	ldw	r2,0(r2)
 400b73c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400b740:	10001426 	beq	r2,zero,400b794 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400b744:	e0bffb17 	ldw	r2,-20(fp)
 400b748:	10800017 	ldw	r2,0(r2)
 400b74c:	10800517 	ldw	r2,20(r2)
 400b750:	e0ffff17 	ldw	r3,-4(fp)
 400b754:	180d883a 	mov	r6,r3
 400b758:	e17ffe17 	ldw	r5,-8(fp)
 400b75c:	e13ffb17 	ldw	r4,-20(fp)
 400b760:	103ee83a 	callr	r2
 400b764:	e0bffc15 	stw	r2,-16(fp)
 400b768:	e0bffc17 	ldw	r2,-16(fp)
 400b76c:	1000070e 	bge	r2,zero,400b78c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 400b770:	400b6900 	call	400b690 <alt_get_errno>
 400b774:	1007883a 	mov	r3,r2
 400b778:	e0bffc17 	ldw	r2,-16(fp)
 400b77c:	0085c83a 	sub	r2,zero,r2
 400b780:	18800015 	stw	r2,0(r3)
          return -1;
 400b784:	00bfffc4 	movi	r2,-1
 400b788:	00000c06 	br	400b7bc <read+0xf0>
        }
        return rval;
 400b78c:	e0bffc17 	ldw	r2,-16(fp)
 400b790:	00000a06 	br	400b7bc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400b794:	400b6900 	call	400b690 <alt_get_errno>
 400b798:	1007883a 	mov	r3,r2
 400b79c:	00800344 	movi	r2,13
 400b7a0:	18800015 	stw	r2,0(r3)
 400b7a4:	00000406 	br	400b7b8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400b7a8:	400b6900 	call	400b690 <alt_get_errno>
 400b7ac:	1007883a 	mov	r3,r2
 400b7b0:	00801444 	movi	r2,81
 400b7b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400b7b8:	00bfffc4 	movi	r2,-1
}
 400b7bc:	e037883a 	mov	sp,fp
 400b7c0:	dfc00117 	ldw	ra,4(sp)
 400b7c4:	df000017 	ldw	fp,0(sp)
 400b7c8:	dec00204 	addi	sp,sp,8
 400b7cc:	f800283a 	ret

0400b7d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400b7d0:	defffc04 	addi	sp,sp,-16
 400b7d4:	dfc00315 	stw	ra,12(sp)
 400b7d8:	df000215 	stw	fp,8(sp)
 400b7dc:	dc000115 	stw	r16,4(sp)
 400b7e0:	df000204 	addi	fp,sp,8
 400b7e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 400b7e8:	e0bffe17 	ldw	r2,-8(fp)
 400b7ec:	108000d0 	cmplti	r2,r2,3
 400b7f0:	1000111e 	bne	r2,zero,400b838 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400b7f4:	04000034 	movhi	r16,0
 400b7f8:	84022904 	addi	r16,r16,2212
 400b7fc:	e0bffe17 	ldw	r2,-8(fp)
 400b800:	01400304 	movi	r5,12
 400b804:	1009883a 	mov	r4,r2
 400b808:	400b0840 	call	400b084 <__mulsi3>
 400b80c:	8085883a 	add	r2,r16,r2
 400b810:	10800204 	addi	r2,r2,8
 400b814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400b818:	04000034 	movhi	r16,0
 400b81c:	84022904 	addi	r16,r16,2212
 400b820:	e0bffe17 	ldw	r2,-8(fp)
 400b824:	01400304 	movi	r5,12
 400b828:	1009883a 	mov	r4,r2
 400b82c:	400b0840 	call	400b084 <__mulsi3>
 400b830:	8085883a 	add	r2,r16,r2
 400b834:	10000015 	stw	zero,0(r2)
  }
}
 400b838:	0001883a 	nop
 400b83c:	e6ffff04 	addi	sp,fp,-4
 400b840:	dfc00217 	ldw	ra,8(sp)
 400b844:	df000117 	ldw	fp,4(sp)
 400b848:	dc000017 	ldw	r16,0(sp)
 400b84c:	dec00304 	addi	sp,sp,12
 400b850:	f800283a 	ret

0400b854 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400b854:	defff904 	addi	sp,sp,-28
 400b858:	df000615 	stw	fp,24(sp)
 400b85c:	df000604 	addi	fp,sp,24
 400b860:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b864:	0005303a 	rdctl	r2,status
 400b868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b86c:	e0fffe17 	ldw	r3,-8(fp)
 400b870:	00bfff84 	movi	r2,-2
 400b874:	1884703a 	and	r2,r3,r2
 400b878:	1001703a 	wrctl	status,r2
  
  return context;
 400b87c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400b880:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400b884:	d0a00a17 	ldw	r2,-32728(gp)
 400b888:	10c000c4 	addi	r3,r2,3
 400b88c:	00bfff04 	movi	r2,-4
 400b890:	1884703a 	and	r2,r3,r2
 400b894:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400b898:	d0e00a17 	ldw	r3,-32728(gp)
 400b89c:	e0bfff17 	ldw	r2,-4(fp)
 400b8a0:	1887883a 	add	r3,r3,r2
 400b8a4:	00810034 	movhi	r2,1024
 400b8a8:	10800004 	addi	r2,r2,0
 400b8ac:	10c0062e 	bgeu	r2,r3,400b8c8 <sbrk+0x74>
 400b8b0:	e0bffb17 	ldw	r2,-20(fp)
 400b8b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b8b8:	e0bffa17 	ldw	r2,-24(fp)
 400b8bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400b8c0:	00bfffc4 	movi	r2,-1
 400b8c4:	00000b06 	br	400b8f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400b8c8:	d0a00a17 	ldw	r2,-32728(gp)
 400b8cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400b8d0:	d0e00a17 	ldw	r3,-32728(gp)
 400b8d4:	e0bfff17 	ldw	r2,-4(fp)
 400b8d8:	1885883a 	add	r2,r3,r2
 400b8dc:	d0a00a15 	stw	r2,-32728(gp)
 400b8e0:	e0bffb17 	ldw	r2,-20(fp)
 400b8e4:	e0bffc15 	stw	r2,-16(fp)
 400b8e8:	e0bffc17 	ldw	r2,-16(fp)
 400b8ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400b8f0:	e0bffd17 	ldw	r2,-12(fp)
} 
 400b8f4:	e037883a 	mov	sp,fp
 400b8f8:	df000017 	ldw	fp,0(sp)
 400b8fc:	dec00104 	addi	sp,sp,4
 400b900:	f800283a 	ret

0400b904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b904:	defffe04 	addi	sp,sp,-8
 400b908:	dfc00115 	stw	ra,4(sp)
 400b90c:	df000015 	stw	fp,0(sp)
 400b910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b914:	d0a00917 	ldw	r2,-32732(gp)
 400b918:	10000326 	beq	r2,zero,400b928 <alt_get_errno+0x24>
 400b91c:	d0a00917 	ldw	r2,-32732(gp)
 400b920:	103ee83a 	callr	r2
 400b924:	00000106 	br	400b92c <alt_get_errno+0x28>
 400b928:	d0a01104 	addi	r2,gp,-32700
}
 400b92c:	e037883a 	mov	sp,fp
 400b930:	dfc00117 	ldw	ra,4(sp)
 400b934:	df000017 	ldw	fp,0(sp)
 400b938:	dec00204 	addi	sp,sp,8
 400b93c:	f800283a 	ret

0400b940 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400b940:	defff904 	addi	sp,sp,-28
 400b944:	dfc00615 	stw	ra,24(sp)
 400b948:	df000515 	stw	fp,20(sp)
 400b94c:	df000504 	addi	fp,sp,20
 400b950:	e13ffd15 	stw	r4,-12(fp)
 400b954:	e17ffe15 	stw	r5,-8(fp)
 400b958:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400b95c:	e0bffd17 	ldw	r2,-12(fp)
 400b960:	10000816 	blt	r2,zero,400b984 <write+0x44>
 400b964:	01400304 	movi	r5,12
 400b968:	e13ffd17 	ldw	r4,-12(fp)
 400b96c:	400b0840 	call	400b084 <__mulsi3>
 400b970:	1007883a 	mov	r3,r2
 400b974:	00800034 	movhi	r2,0
 400b978:	10822904 	addi	r2,r2,2212
 400b97c:	1885883a 	add	r2,r3,r2
 400b980:	00000106 	br	400b988 <write+0x48>
 400b984:	0005883a 	mov	r2,zero
 400b988:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400b98c:	e0bffb17 	ldw	r2,-20(fp)
 400b990:	10002126 	beq	r2,zero,400ba18 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400b994:	e0bffb17 	ldw	r2,-20(fp)
 400b998:	10800217 	ldw	r2,8(r2)
 400b99c:	108000cc 	andi	r2,r2,3
 400b9a0:	10001826 	beq	r2,zero,400ba04 <write+0xc4>
 400b9a4:	e0bffb17 	ldw	r2,-20(fp)
 400b9a8:	10800017 	ldw	r2,0(r2)
 400b9ac:	10800617 	ldw	r2,24(r2)
 400b9b0:	10001426 	beq	r2,zero,400ba04 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400b9b4:	e0bffb17 	ldw	r2,-20(fp)
 400b9b8:	10800017 	ldw	r2,0(r2)
 400b9bc:	10800617 	ldw	r2,24(r2)
 400b9c0:	e0ffff17 	ldw	r3,-4(fp)
 400b9c4:	180d883a 	mov	r6,r3
 400b9c8:	e17ffe17 	ldw	r5,-8(fp)
 400b9cc:	e13ffb17 	ldw	r4,-20(fp)
 400b9d0:	103ee83a 	callr	r2
 400b9d4:	e0bffc15 	stw	r2,-16(fp)
 400b9d8:	e0bffc17 	ldw	r2,-16(fp)
 400b9dc:	1000070e 	bge	r2,zero,400b9fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 400b9e0:	400b9040 	call	400b904 <alt_get_errno>
 400b9e4:	1007883a 	mov	r3,r2
 400b9e8:	e0bffc17 	ldw	r2,-16(fp)
 400b9ec:	0085c83a 	sub	r2,zero,r2
 400b9f0:	18800015 	stw	r2,0(r3)
        return -1;
 400b9f4:	00bfffc4 	movi	r2,-1
 400b9f8:	00000c06 	br	400ba2c <write+0xec>
      }
      return rval;
 400b9fc:	e0bffc17 	ldw	r2,-16(fp)
 400ba00:	00000a06 	br	400ba2c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400ba04:	400b9040 	call	400b904 <alt_get_errno>
 400ba08:	1007883a 	mov	r3,r2
 400ba0c:	00800344 	movi	r2,13
 400ba10:	18800015 	stw	r2,0(r3)
 400ba14:	00000406 	br	400ba28 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400ba18:	400b9040 	call	400b904 <alt_get_errno>
 400ba1c:	1007883a 	mov	r3,r2
 400ba20:	00801444 	movi	r2,81
 400ba24:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400ba28:	00bfffc4 	movi	r2,-1
}
 400ba2c:	e037883a 	mov	sp,fp
 400ba30:	dfc00117 	ldw	ra,4(sp)
 400ba34:	df000017 	ldw	fp,0(sp)
 400ba38:	dec00204 	addi	sp,sp,8
 400ba3c:	f800283a 	ret

0400ba40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400ba40:	defffd04 	addi	sp,sp,-12
 400ba44:	dfc00215 	stw	ra,8(sp)
 400ba48:	df000115 	stw	fp,4(sp)
 400ba4c:	df000104 	addi	fp,sp,4
 400ba50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400ba54:	d1600604 	addi	r5,gp,-32744
 400ba58:	e13fff17 	ldw	r4,-4(fp)
 400ba5c:	400c7f40 	call	400c7f4 <alt_dev_llist_insert>
}
 400ba60:	e037883a 	mov	sp,fp
 400ba64:	dfc00117 	ldw	ra,4(sp)
 400ba68:	df000017 	ldw	fp,0(sp)
 400ba6c:	dec00204 	addi	sp,sp,8
 400ba70:	f800283a 	ret

0400ba74 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400ba74:	defffd04 	addi	sp,sp,-12
 400ba78:	dfc00215 	stw	ra,8(sp)
 400ba7c:	df000115 	stw	fp,4(sp)
 400ba80:	df000104 	addi	fp,sp,4
 400ba84:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 400ba88:	400d1a00 	call	400d1a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400ba8c:	00800044 	movi	r2,1
 400ba90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400ba94:	0001883a 	nop
 400ba98:	e037883a 	mov	sp,fp
 400ba9c:	dfc00117 	ldw	ra,4(sp)
 400baa0:	df000017 	ldw	fp,0(sp)
 400baa4:	dec00204 	addi	sp,sp,8
 400baa8:	f800283a 	ret

0400baac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400baac:	defffe04 	addi	sp,sp,-8
 400bab0:	dfc00115 	stw	ra,4(sp)
 400bab4:	df000015 	stw	fp,0(sp)
 400bab8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 400babc:	01c0fa04 	movi	r7,1000
 400bac0:	01800044 	movi	r6,1
 400bac4:	000b883a 	mov	r5,zero
 400bac8:	01010074 	movhi	r4,1025
 400bacc:	21048804 	addi	r4,r4,4640
 400bad0:	400c5f00 	call	400c5f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400bad4:	000d883a 	mov	r6,zero
 400bad8:	000b883a 	mov	r5,zero
 400badc:	01000034 	movhi	r4,0
 400bae0:	21029304 	addi	r4,r4,2636
 400bae4:	400bc740 	call	400bc74 <altera_avalon_jtag_uart_init>
 400bae8:	01000034 	movhi	r4,0
 400baec:	21028904 	addi	r4,r4,2596
 400baf0:	400ba400 	call	400ba40 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 400baf4:	0001883a 	nop
}
 400baf8:	0001883a 	nop
 400bafc:	e037883a 	mov	sp,fp
 400bb00:	dfc00117 	ldw	ra,4(sp)
 400bb04:	df000017 	ldw	fp,0(sp)
 400bb08:	dec00204 	addi	sp,sp,8
 400bb0c:	f800283a 	ret

0400bb10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400bb10:	defffa04 	addi	sp,sp,-24
 400bb14:	dfc00515 	stw	ra,20(sp)
 400bb18:	df000415 	stw	fp,16(sp)
 400bb1c:	df000404 	addi	fp,sp,16
 400bb20:	e13ffd15 	stw	r4,-12(fp)
 400bb24:	e17ffe15 	stw	r5,-8(fp)
 400bb28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400bb2c:	e0bffd17 	ldw	r2,-12(fp)
 400bb30:	10800017 	ldw	r2,0(r2)
 400bb34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400bb38:	e0bffc17 	ldw	r2,-16(fp)
 400bb3c:	10c00a04 	addi	r3,r2,40
 400bb40:	e0bffd17 	ldw	r2,-12(fp)
 400bb44:	10800217 	ldw	r2,8(r2)
 400bb48:	100f883a 	mov	r7,r2
 400bb4c:	e1bfff17 	ldw	r6,-4(fp)
 400bb50:	e17ffe17 	ldw	r5,-8(fp)
 400bb54:	1809883a 	mov	r4,r3
 400bb58:	400c1380 	call	400c138 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400bb5c:	e037883a 	mov	sp,fp
 400bb60:	dfc00117 	ldw	ra,4(sp)
 400bb64:	df000017 	ldw	fp,0(sp)
 400bb68:	dec00204 	addi	sp,sp,8
 400bb6c:	f800283a 	ret

0400bb70 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400bb70:	defffa04 	addi	sp,sp,-24
 400bb74:	dfc00515 	stw	ra,20(sp)
 400bb78:	df000415 	stw	fp,16(sp)
 400bb7c:	df000404 	addi	fp,sp,16
 400bb80:	e13ffd15 	stw	r4,-12(fp)
 400bb84:	e17ffe15 	stw	r5,-8(fp)
 400bb88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400bb8c:	e0bffd17 	ldw	r2,-12(fp)
 400bb90:	10800017 	ldw	r2,0(r2)
 400bb94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400bb98:	e0bffc17 	ldw	r2,-16(fp)
 400bb9c:	10c00a04 	addi	r3,r2,40
 400bba0:	e0bffd17 	ldw	r2,-12(fp)
 400bba4:	10800217 	ldw	r2,8(r2)
 400bba8:	100f883a 	mov	r7,r2
 400bbac:	e1bfff17 	ldw	r6,-4(fp)
 400bbb0:	e17ffe17 	ldw	r5,-8(fp)
 400bbb4:	1809883a 	mov	r4,r3
 400bbb8:	400c3540 	call	400c354 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400bbbc:	e037883a 	mov	sp,fp
 400bbc0:	dfc00117 	ldw	ra,4(sp)
 400bbc4:	df000017 	ldw	fp,0(sp)
 400bbc8:	dec00204 	addi	sp,sp,8
 400bbcc:	f800283a 	ret

0400bbd0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400bbd0:	defffc04 	addi	sp,sp,-16
 400bbd4:	dfc00315 	stw	ra,12(sp)
 400bbd8:	df000215 	stw	fp,8(sp)
 400bbdc:	df000204 	addi	fp,sp,8
 400bbe0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400bbe4:	e0bfff17 	ldw	r2,-4(fp)
 400bbe8:	10800017 	ldw	r2,0(r2)
 400bbec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400bbf0:	e0bffe17 	ldw	r2,-8(fp)
 400bbf4:	10c00a04 	addi	r3,r2,40
 400bbf8:	e0bfff17 	ldw	r2,-4(fp)
 400bbfc:	10800217 	ldw	r2,8(r2)
 400bc00:	100b883a 	mov	r5,r2
 400bc04:	1809883a 	mov	r4,r3
 400bc08:	400bfe00 	call	400bfe0 <altera_avalon_jtag_uart_close>
}
 400bc0c:	e037883a 	mov	sp,fp
 400bc10:	dfc00117 	ldw	ra,4(sp)
 400bc14:	df000017 	ldw	fp,0(sp)
 400bc18:	dec00204 	addi	sp,sp,8
 400bc1c:	f800283a 	ret

0400bc20 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400bc20:	defffa04 	addi	sp,sp,-24
 400bc24:	dfc00515 	stw	ra,20(sp)
 400bc28:	df000415 	stw	fp,16(sp)
 400bc2c:	df000404 	addi	fp,sp,16
 400bc30:	e13ffd15 	stw	r4,-12(fp)
 400bc34:	e17ffe15 	stw	r5,-8(fp)
 400bc38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400bc3c:	e0bffd17 	ldw	r2,-12(fp)
 400bc40:	10800017 	ldw	r2,0(r2)
 400bc44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400bc48:	e0bffc17 	ldw	r2,-16(fp)
 400bc4c:	10800a04 	addi	r2,r2,40
 400bc50:	e1bfff17 	ldw	r6,-4(fp)
 400bc54:	e17ffe17 	ldw	r5,-8(fp)
 400bc58:	1009883a 	mov	r4,r2
 400bc5c:	400c0480 	call	400c048 <altera_avalon_jtag_uart_ioctl>
}
 400bc60:	e037883a 	mov	sp,fp
 400bc64:	dfc00117 	ldw	ra,4(sp)
 400bc68:	df000017 	ldw	fp,0(sp)
 400bc6c:	dec00204 	addi	sp,sp,8
 400bc70:	f800283a 	ret

0400bc74 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400bc74:	defffa04 	addi	sp,sp,-24
 400bc78:	dfc00515 	stw	ra,20(sp)
 400bc7c:	df000415 	stw	fp,16(sp)
 400bc80:	df000404 	addi	fp,sp,16
 400bc84:	e13ffd15 	stw	r4,-12(fp)
 400bc88:	e17ffe15 	stw	r5,-8(fp)
 400bc8c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400bc90:	e0bffd17 	ldw	r2,-12(fp)
 400bc94:	00c00044 	movi	r3,1
 400bc98:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400bc9c:	e0bffd17 	ldw	r2,-12(fp)
 400bca0:	10800017 	ldw	r2,0(r2)
 400bca4:	10800104 	addi	r2,r2,4
 400bca8:	1007883a 	mov	r3,r2
 400bcac:	e0bffd17 	ldw	r2,-12(fp)
 400bcb0:	10800817 	ldw	r2,32(r2)
 400bcb4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400bcb8:	e0bffe17 	ldw	r2,-8(fp)
 400bcbc:	e0ffff17 	ldw	r3,-4(fp)
 400bcc0:	d8000015 	stw	zero,0(sp)
 400bcc4:	e1fffd17 	ldw	r7,-12(fp)
 400bcc8:	01810074 	movhi	r6,1025
 400bccc:	31af4d04 	addi	r6,r6,-17100
 400bcd0:	180b883a 	mov	r5,r3
 400bcd4:	1009883a 	mov	r4,r2
 400bcd8:	400c9780 	call	400c978 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400bcdc:	e0bffd17 	ldw	r2,-12(fp)
 400bce0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400bce4:	e0bffd17 	ldw	r2,-12(fp)
 400bce8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400bcec:	d0e01617 	ldw	r3,-32680(gp)
 400bcf0:	e1fffd17 	ldw	r7,-12(fp)
 400bcf4:	01810074 	movhi	r6,1025
 400bcf8:	31afd004 	addi	r6,r6,-16576
 400bcfc:	180b883a 	mov	r5,r3
 400bd00:	1009883a 	mov	r4,r2
 400bd04:	400c66c0 	call	400c66c <alt_alarm_start>
 400bd08:	1000040e 	bge	r2,zero,400bd1c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400bd0c:	e0fffd17 	ldw	r3,-12(fp)
 400bd10:	00a00034 	movhi	r2,32768
 400bd14:	10bfffc4 	addi	r2,r2,-1
 400bd18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400bd1c:	0001883a 	nop
 400bd20:	e037883a 	mov	sp,fp
 400bd24:	dfc00117 	ldw	ra,4(sp)
 400bd28:	df000017 	ldw	fp,0(sp)
 400bd2c:	dec00204 	addi	sp,sp,8
 400bd30:	f800283a 	ret

0400bd34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400bd34:	defff804 	addi	sp,sp,-32
 400bd38:	df000715 	stw	fp,28(sp)
 400bd3c:	df000704 	addi	fp,sp,28
 400bd40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400bd44:	e0bfff17 	ldw	r2,-4(fp)
 400bd48:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400bd4c:	e0bffb17 	ldw	r2,-20(fp)
 400bd50:	10800017 	ldw	r2,0(r2)
 400bd54:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400bd58:	e0bffc17 	ldw	r2,-16(fp)
 400bd5c:	10800104 	addi	r2,r2,4
 400bd60:	10800037 	ldwio	r2,0(r2)
 400bd64:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400bd68:	e0bffd17 	ldw	r2,-12(fp)
 400bd6c:	1080c00c 	andi	r2,r2,768
 400bd70:	10006d26 	beq	r2,zero,400bf28 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400bd74:	e0bffd17 	ldw	r2,-12(fp)
 400bd78:	1080400c 	andi	r2,r2,256
 400bd7c:	10003526 	beq	r2,zero,400be54 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400bd80:	00800074 	movhi	r2,1
 400bd84:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400bd88:	e0bffb17 	ldw	r2,-20(fp)
 400bd8c:	10800a17 	ldw	r2,40(r2)
 400bd90:	10800044 	addi	r2,r2,1
 400bd94:	1081ffcc 	andi	r2,r2,2047
 400bd98:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400bd9c:	e0bffb17 	ldw	r2,-20(fp)
 400bda0:	10c00b17 	ldw	r3,44(r2)
 400bda4:	e0bffe17 	ldw	r2,-8(fp)
 400bda8:	18801526 	beq	r3,r2,400be00 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400bdac:	e0bffc17 	ldw	r2,-16(fp)
 400bdb0:	10800037 	ldwio	r2,0(r2)
 400bdb4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400bdb8:	e0bff917 	ldw	r2,-28(fp)
 400bdbc:	10a0000c 	andi	r2,r2,32768
 400bdc0:	10001126 	beq	r2,zero,400be08 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400bdc4:	e0bffb17 	ldw	r2,-20(fp)
 400bdc8:	10800a17 	ldw	r2,40(r2)
 400bdcc:	e0fff917 	ldw	r3,-28(fp)
 400bdd0:	1809883a 	mov	r4,r3
 400bdd4:	e0fffb17 	ldw	r3,-20(fp)
 400bdd8:	1885883a 	add	r2,r3,r2
 400bddc:	10800e04 	addi	r2,r2,56
 400bde0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400bde4:	e0bffb17 	ldw	r2,-20(fp)
 400bde8:	10800a17 	ldw	r2,40(r2)
 400bdec:	10800044 	addi	r2,r2,1
 400bdf0:	10c1ffcc 	andi	r3,r2,2047
 400bdf4:	e0bffb17 	ldw	r2,-20(fp)
 400bdf8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400bdfc:	003fe206 	br	400bd88 <__flash_rwdata_start+0xffffe4e8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400be00:	0001883a 	nop
 400be04:	00000106 	br	400be0c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400be08:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400be0c:	e0bff917 	ldw	r2,-28(fp)
 400be10:	10bfffec 	andhi	r2,r2,65535
 400be14:	10000f26 	beq	r2,zero,400be54 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400be18:	e0bffb17 	ldw	r2,-20(fp)
 400be1c:	10c00817 	ldw	r3,32(r2)
 400be20:	00bfff84 	movi	r2,-2
 400be24:	1886703a 	and	r3,r3,r2
 400be28:	e0bffb17 	ldw	r2,-20(fp)
 400be2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400be30:	e0bffc17 	ldw	r2,-16(fp)
 400be34:	10800104 	addi	r2,r2,4
 400be38:	1007883a 	mov	r3,r2
 400be3c:	e0bffb17 	ldw	r2,-20(fp)
 400be40:	10800817 	ldw	r2,32(r2)
 400be44:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400be48:	e0bffc17 	ldw	r2,-16(fp)
 400be4c:	10800104 	addi	r2,r2,4
 400be50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400be54:	e0bffd17 	ldw	r2,-12(fp)
 400be58:	1080800c 	andi	r2,r2,512
 400be5c:	103fbe26 	beq	r2,zero,400bd58 <__flash_rwdata_start+0xffffe4b8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400be60:	e0bffd17 	ldw	r2,-12(fp)
 400be64:	1004d43a 	srli	r2,r2,16
 400be68:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400be6c:	00001406 	br	400bec0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400be70:	e0bffc17 	ldw	r2,-16(fp)
 400be74:	e0fffb17 	ldw	r3,-20(fp)
 400be78:	18c00d17 	ldw	r3,52(r3)
 400be7c:	e13ffb17 	ldw	r4,-20(fp)
 400be80:	20c7883a 	add	r3,r4,r3
 400be84:	18c20e04 	addi	r3,r3,2104
 400be88:	18c00003 	ldbu	r3,0(r3)
 400be8c:	18c03fcc 	andi	r3,r3,255
 400be90:	18c0201c 	xori	r3,r3,128
 400be94:	18ffe004 	addi	r3,r3,-128
 400be98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400be9c:	e0bffb17 	ldw	r2,-20(fp)
 400bea0:	10800d17 	ldw	r2,52(r2)
 400bea4:	10800044 	addi	r2,r2,1
 400bea8:	10c1ffcc 	andi	r3,r2,2047
 400beac:	e0bffb17 	ldw	r2,-20(fp)
 400beb0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400beb4:	e0bffa17 	ldw	r2,-24(fp)
 400beb8:	10bfffc4 	addi	r2,r2,-1
 400bebc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400bec0:	e0bffa17 	ldw	r2,-24(fp)
 400bec4:	10000526 	beq	r2,zero,400bedc <altera_avalon_jtag_uart_irq+0x1a8>
 400bec8:	e0bffb17 	ldw	r2,-20(fp)
 400becc:	10c00d17 	ldw	r3,52(r2)
 400bed0:	e0bffb17 	ldw	r2,-20(fp)
 400bed4:	10800c17 	ldw	r2,48(r2)
 400bed8:	18bfe51e 	bne	r3,r2,400be70 <__flash_rwdata_start+0xffffe5d0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400bedc:	e0bffa17 	ldw	r2,-24(fp)
 400bee0:	103f9d26 	beq	r2,zero,400bd58 <__flash_rwdata_start+0xffffe4b8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400bee4:	e0bffb17 	ldw	r2,-20(fp)
 400bee8:	10c00817 	ldw	r3,32(r2)
 400beec:	00bfff44 	movi	r2,-3
 400bef0:	1886703a 	and	r3,r3,r2
 400bef4:	e0bffb17 	ldw	r2,-20(fp)
 400bef8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400befc:	e0bffb17 	ldw	r2,-20(fp)
 400bf00:	10800017 	ldw	r2,0(r2)
 400bf04:	10800104 	addi	r2,r2,4
 400bf08:	1007883a 	mov	r3,r2
 400bf0c:	e0bffb17 	ldw	r2,-20(fp)
 400bf10:	10800817 	ldw	r2,32(r2)
 400bf14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400bf18:	e0bffc17 	ldw	r2,-16(fp)
 400bf1c:	10800104 	addi	r2,r2,4
 400bf20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400bf24:	003f8c06 	br	400bd58 <__flash_rwdata_start+0xffffe4b8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400bf28:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400bf2c:	0001883a 	nop
 400bf30:	e037883a 	mov	sp,fp
 400bf34:	df000017 	ldw	fp,0(sp)
 400bf38:	dec00104 	addi	sp,sp,4
 400bf3c:	f800283a 	ret

0400bf40 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400bf40:	defff804 	addi	sp,sp,-32
 400bf44:	df000715 	stw	fp,28(sp)
 400bf48:	df000704 	addi	fp,sp,28
 400bf4c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400bf50:	e0bffb17 	ldw	r2,-20(fp)
 400bf54:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400bf58:	e0bff917 	ldw	r2,-28(fp)
 400bf5c:	10800017 	ldw	r2,0(r2)
 400bf60:	10800104 	addi	r2,r2,4
 400bf64:	10800037 	ldwio	r2,0(r2)
 400bf68:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400bf6c:	e0bffa17 	ldw	r2,-24(fp)
 400bf70:	1081000c 	andi	r2,r2,1024
 400bf74:	10000b26 	beq	r2,zero,400bfa4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400bf78:	e0bff917 	ldw	r2,-28(fp)
 400bf7c:	10800017 	ldw	r2,0(r2)
 400bf80:	10800104 	addi	r2,r2,4
 400bf84:	1007883a 	mov	r3,r2
 400bf88:	e0bff917 	ldw	r2,-28(fp)
 400bf8c:	10800817 	ldw	r2,32(r2)
 400bf90:	10810014 	ori	r2,r2,1024
 400bf94:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400bf98:	e0bff917 	ldw	r2,-28(fp)
 400bf9c:	10000915 	stw	zero,36(r2)
 400bfa0:	00000a06 	br	400bfcc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400bfa4:	e0bff917 	ldw	r2,-28(fp)
 400bfa8:	10c00917 	ldw	r3,36(r2)
 400bfac:	00a00034 	movhi	r2,32768
 400bfb0:	10bfff04 	addi	r2,r2,-4
 400bfb4:	10c00536 	bltu	r2,r3,400bfcc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400bfb8:	e0bff917 	ldw	r2,-28(fp)
 400bfbc:	10800917 	ldw	r2,36(r2)
 400bfc0:	10c00044 	addi	r3,r2,1
 400bfc4:	e0bff917 	ldw	r2,-28(fp)
 400bfc8:	10c00915 	stw	r3,36(r2)
 400bfcc:	d0a01617 	ldw	r2,-32680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400bfd0:	e037883a 	mov	sp,fp
 400bfd4:	df000017 	ldw	fp,0(sp)
 400bfd8:	dec00104 	addi	sp,sp,4
 400bfdc:	f800283a 	ret

0400bfe0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400bfe0:	defffd04 	addi	sp,sp,-12
 400bfe4:	df000215 	stw	fp,8(sp)
 400bfe8:	df000204 	addi	fp,sp,8
 400bfec:	e13ffe15 	stw	r4,-8(fp)
 400bff0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400bff4:	00000506 	br	400c00c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400bff8:	e0bfff17 	ldw	r2,-4(fp)
 400bffc:	1090000c 	andi	r2,r2,16384
 400c000:	10000226 	beq	r2,zero,400c00c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400c004:	00bffd44 	movi	r2,-11
 400c008:	00000b06 	br	400c038 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400c00c:	e0bffe17 	ldw	r2,-8(fp)
 400c010:	10c00d17 	ldw	r3,52(r2)
 400c014:	e0bffe17 	ldw	r2,-8(fp)
 400c018:	10800c17 	ldw	r2,48(r2)
 400c01c:	18800526 	beq	r3,r2,400c034 <altera_avalon_jtag_uart_close+0x54>
 400c020:	e0bffe17 	ldw	r2,-8(fp)
 400c024:	10c00917 	ldw	r3,36(r2)
 400c028:	e0bffe17 	ldw	r2,-8(fp)
 400c02c:	10800117 	ldw	r2,4(r2)
 400c030:	18bff136 	bltu	r3,r2,400bff8 <__flash_rwdata_start+0xffffe758>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400c034:	0005883a 	mov	r2,zero
}
 400c038:	e037883a 	mov	sp,fp
 400c03c:	df000017 	ldw	fp,0(sp)
 400c040:	dec00104 	addi	sp,sp,4
 400c044:	f800283a 	ret

0400c048 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400c048:	defffa04 	addi	sp,sp,-24
 400c04c:	df000515 	stw	fp,20(sp)
 400c050:	df000504 	addi	fp,sp,20
 400c054:	e13ffd15 	stw	r4,-12(fp)
 400c058:	e17ffe15 	stw	r5,-8(fp)
 400c05c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400c060:	00bff9c4 	movi	r2,-25
 400c064:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400c068:	e0bffe17 	ldw	r2,-8(fp)
 400c06c:	10da8060 	cmpeqi	r3,r2,27137
 400c070:	1800031e 	bne	r3,zero,400c080 <altera_avalon_jtag_uart_ioctl+0x38>
 400c074:	109a80a0 	cmpeqi	r2,r2,27138
 400c078:	1000181e 	bne	r2,zero,400c0dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400c07c:	00002906 	br	400c124 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400c080:	e0bffd17 	ldw	r2,-12(fp)
 400c084:	10c00117 	ldw	r3,4(r2)
 400c088:	00a00034 	movhi	r2,32768
 400c08c:	10bfffc4 	addi	r2,r2,-1
 400c090:	18802126 	beq	r3,r2,400c118 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400c094:	e0bfff17 	ldw	r2,-4(fp)
 400c098:	10800017 	ldw	r2,0(r2)
 400c09c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400c0a0:	e0bffc17 	ldw	r2,-16(fp)
 400c0a4:	10800090 	cmplti	r2,r2,2
 400c0a8:	1000061e 	bne	r2,zero,400c0c4 <altera_avalon_jtag_uart_ioctl+0x7c>
 400c0ac:	e0fffc17 	ldw	r3,-16(fp)
 400c0b0:	00a00034 	movhi	r2,32768
 400c0b4:	10bfffc4 	addi	r2,r2,-1
 400c0b8:	18800226 	beq	r3,r2,400c0c4 <altera_avalon_jtag_uart_ioctl+0x7c>
 400c0bc:	e0bffc17 	ldw	r2,-16(fp)
 400c0c0:	00000206 	br	400c0cc <altera_avalon_jtag_uart_ioctl+0x84>
 400c0c4:	00a00034 	movhi	r2,32768
 400c0c8:	10bfff84 	addi	r2,r2,-2
 400c0cc:	e0fffd17 	ldw	r3,-12(fp)
 400c0d0:	18800115 	stw	r2,4(r3)
      rc = 0;
 400c0d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400c0d8:	00000f06 	br	400c118 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400c0dc:	e0bffd17 	ldw	r2,-12(fp)
 400c0e0:	10c00117 	ldw	r3,4(r2)
 400c0e4:	00a00034 	movhi	r2,32768
 400c0e8:	10bfffc4 	addi	r2,r2,-1
 400c0ec:	18800c26 	beq	r3,r2,400c120 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400c0f0:	e0bffd17 	ldw	r2,-12(fp)
 400c0f4:	10c00917 	ldw	r3,36(r2)
 400c0f8:	e0bffd17 	ldw	r2,-12(fp)
 400c0fc:	10800117 	ldw	r2,4(r2)
 400c100:	1885803a 	cmpltu	r2,r3,r2
 400c104:	10c03fcc 	andi	r3,r2,255
 400c108:	e0bfff17 	ldw	r2,-4(fp)
 400c10c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400c110:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400c114:	00000206 	br	400c120 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400c118:	0001883a 	nop
 400c11c:	00000106 	br	400c124 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400c120:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400c124:	e0bffb17 	ldw	r2,-20(fp)
}
 400c128:	e037883a 	mov	sp,fp
 400c12c:	df000017 	ldw	fp,0(sp)
 400c130:	dec00104 	addi	sp,sp,4
 400c134:	f800283a 	ret

0400c138 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400c138:	defff304 	addi	sp,sp,-52
 400c13c:	dfc00c15 	stw	ra,48(sp)
 400c140:	df000b15 	stw	fp,44(sp)
 400c144:	df000b04 	addi	fp,sp,44
 400c148:	e13ffc15 	stw	r4,-16(fp)
 400c14c:	e17ffd15 	stw	r5,-12(fp)
 400c150:	e1bffe15 	stw	r6,-8(fp)
 400c154:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400c158:	e0bffd17 	ldw	r2,-12(fp)
 400c15c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400c160:	00004706 	br	400c280 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400c164:	e0bffc17 	ldw	r2,-16(fp)
 400c168:	10800a17 	ldw	r2,40(r2)
 400c16c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400c170:	e0bffc17 	ldw	r2,-16(fp)
 400c174:	10800b17 	ldw	r2,44(r2)
 400c178:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400c17c:	e0fff717 	ldw	r3,-36(fp)
 400c180:	e0bff817 	ldw	r2,-32(fp)
 400c184:	18800536 	bltu	r3,r2,400c19c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400c188:	e0fff717 	ldw	r3,-36(fp)
 400c18c:	e0bff817 	ldw	r2,-32(fp)
 400c190:	1885c83a 	sub	r2,r3,r2
 400c194:	e0bff615 	stw	r2,-40(fp)
 400c198:	00000406 	br	400c1ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400c19c:	00c20004 	movi	r3,2048
 400c1a0:	e0bff817 	ldw	r2,-32(fp)
 400c1a4:	1885c83a 	sub	r2,r3,r2
 400c1a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400c1ac:	e0bff617 	ldw	r2,-40(fp)
 400c1b0:	10001e26 	beq	r2,zero,400c22c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400c1b4:	e0fffe17 	ldw	r3,-8(fp)
 400c1b8:	e0bff617 	ldw	r2,-40(fp)
 400c1bc:	1880022e 	bgeu	r3,r2,400c1c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400c1c0:	e0bffe17 	ldw	r2,-8(fp)
 400c1c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400c1c8:	e0bffc17 	ldw	r2,-16(fp)
 400c1cc:	10c00e04 	addi	r3,r2,56
 400c1d0:	e0bff817 	ldw	r2,-32(fp)
 400c1d4:	1885883a 	add	r2,r3,r2
 400c1d8:	e1bff617 	ldw	r6,-40(fp)
 400c1dc:	100b883a 	mov	r5,r2
 400c1e0:	e13ff517 	ldw	r4,-44(fp)
 400c1e4:	40096fc0 	call	40096fc <memcpy>
      ptr   += n;
 400c1e8:	e0fff517 	ldw	r3,-44(fp)
 400c1ec:	e0bff617 	ldw	r2,-40(fp)
 400c1f0:	1885883a 	add	r2,r3,r2
 400c1f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400c1f8:	e0fffe17 	ldw	r3,-8(fp)
 400c1fc:	e0bff617 	ldw	r2,-40(fp)
 400c200:	1885c83a 	sub	r2,r3,r2
 400c204:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400c208:	e0fff817 	ldw	r3,-32(fp)
 400c20c:	e0bff617 	ldw	r2,-40(fp)
 400c210:	1885883a 	add	r2,r3,r2
 400c214:	10c1ffcc 	andi	r3,r2,2047
 400c218:	e0bffc17 	ldw	r2,-16(fp)
 400c21c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400c220:	e0bffe17 	ldw	r2,-8(fp)
 400c224:	00bfcf16 	blt	zero,r2,400c164 <__flash_rwdata_start+0xffffe8c4>
 400c228:	00000106 	br	400c230 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400c22c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400c230:	e0fff517 	ldw	r3,-44(fp)
 400c234:	e0bffd17 	ldw	r2,-12(fp)
 400c238:	1880141e 	bne	r3,r2,400c28c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400c23c:	e0bfff17 	ldw	r2,-4(fp)
 400c240:	1090000c 	andi	r2,r2,16384
 400c244:	1000131e 	bne	r2,zero,400c294 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400c248:	0001883a 	nop
 400c24c:	e0bffc17 	ldw	r2,-16(fp)
 400c250:	10c00a17 	ldw	r3,40(r2)
 400c254:	e0bff717 	ldw	r2,-36(fp)
 400c258:	1880051e 	bne	r3,r2,400c270 <altera_avalon_jtag_uart_read+0x138>
 400c25c:	e0bffc17 	ldw	r2,-16(fp)
 400c260:	10c00917 	ldw	r3,36(r2)
 400c264:	e0bffc17 	ldw	r2,-16(fp)
 400c268:	10800117 	ldw	r2,4(r2)
 400c26c:	18bff736 	bltu	r3,r2,400c24c <__flash_rwdata_start+0xffffe9ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400c270:	e0bffc17 	ldw	r2,-16(fp)
 400c274:	10c00a17 	ldw	r3,40(r2)
 400c278:	e0bff717 	ldw	r2,-36(fp)
 400c27c:	18800726 	beq	r3,r2,400c29c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400c280:	e0bffe17 	ldw	r2,-8(fp)
 400c284:	00bfb716 	blt	zero,r2,400c164 <__flash_rwdata_start+0xffffe8c4>
 400c288:	00000506 	br	400c2a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400c28c:	0001883a 	nop
 400c290:	00000306 	br	400c2a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400c294:	0001883a 	nop
 400c298:	00000106 	br	400c2a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400c29c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400c2a0:	e0fff517 	ldw	r3,-44(fp)
 400c2a4:	e0bffd17 	ldw	r2,-12(fp)
 400c2a8:	18801826 	beq	r3,r2,400c30c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c2ac:	0005303a 	rdctl	r2,status
 400c2b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c2b4:	e0fffb17 	ldw	r3,-20(fp)
 400c2b8:	00bfff84 	movi	r2,-2
 400c2bc:	1884703a 	and	r2,r3,r2
 400c2c0:	1001703a 	wrctl	status,r2
  
  return context;
 400c2c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400c2c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400c2cc:	e0bffc17 	ldw	r2,-16(fp)
 400c2d0:	10800817 	ldw	r2,32(r2)
 400c2d4:	10c00054 	ori	r3,r2,1
 400c2d8:	e0bffc17 	ldw	r2,-16(fp)
 400c2dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400c2e0:	e0bffc17 	ldw	r2,-16(fp)
 400c2e4:	10800017 	ldw	r2,0(r2)
 400c2e8:	10800104 	addi	r2,r2,4
 400c2ec:	1007883a 	mov	r3,r2
 400c2f0:	e0bffc17 	ldw	r2,-16(fp)
 400c2f4:	10800817 	ldw	r2,32(r2)
 400c2f8:	18800035 	stwio	r2,0(r3)
 400c2fc:	e0bffa17 	ldw	r2,-24(fp)
 400c300:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c304:	e0bff917 	ldw	r2,-28(fp)
 400c308:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400c30c:	e0fff517 	ldw	r3,-44(fp)
 400c310:	e0bffd17 	ldw	r2,-12(fp)
 400c314:	18800426 	beq	r3,r2,400c328 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400c318:	e0fff517 	ldw	r3,-44(fp)
 400c31c:	e0bffd17 	ldw	r2,-12(fp)
 400c320:	1885c83a 	sub	r2,r3,r2
 400c324:	00000606 	br	400c340 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400c328:	e0bfff17 	ldw	r2,-4(fp)
 400c32c:	1090000c 	andi	r2,r2,16384
 400c330:	10000226 	beq	r2,zero,400c33c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400c334:	00bffd44 	movi	r2,-11
 400c338:	00000106 	br	400c340 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400c33c:	00bffec4 	movi	r2,-5
}
 400c340:	e037883a 	mov	sp,fp
 400c344:	dfc00117 	ldw	ra,4(sp)
 400c348:	df000017 	ldw	fp,0(sp)
 400c34c:	dec00204 	addi	sp,sp,8
 400c350:	f800283a 	ret

0400c354 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400c354:	defff304 	addi	sp,sp,-52
 400c358:	dfc00c15 	stw	ra,48(sp)
 400c35c:	df000b15 	stw	fp,44(sp)
 400c360:	df000b04 	addi	fp,sp,44
 400c364:	e13ffc15 	stw	r4,-16(fp)
 400c368:	e17ffd15 	stw	r5,-12(fp)
 400c36c:	e1bffe15 	stw	r6,-8(fp)
 400c370:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400c374:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400c378:	e0bffd17 	ldw	r2,-12(fp)
 400c37c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400c380:	00003706 	br	400c460 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400c384:	e0bffc17 	ldw	r2,-16(fp)
 400c388:	10800c17 	ldw	r2,48(r2)
 400c38c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400c390:	e0bffc17 	ldw	r2,-16(fp)
 400c394:	10800d17 	ldw	r2,52(r2)
 400c398:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400c39c:	e0fff917 	ldw	r3,-28(fp)
 400c3a0:	e0bff517 	ldw	r2,-44(fp)
 400c3a4:	1880062e 	bgeu	r3,r2,400c3c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400c3a8:	e0fff517 	ldw	r3,-44(fp)
 400c3ac:	e0bff917 	ldw	r2,-28(fp)
 400c3b0:	1885c83a 	sub	r2,r3,r2
 400c3b4:	10bfffc4 	addi	r2,r2,-1
 400c3b8:	e0bff615 	stw	r2,-40(fp)
 400c3bc:	00000b06 	br	400c3ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400c3c0:	e0bff517 	ldw	r2,-44(fp)
 400c3c4:	10000526 	beq	r2,zero,400c3dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400c3c8:	00c20004 	movi	r3,2048
 400c3cc:	e0bff917 	ldw	r2,-28(fp)
 400c3d0:	1885c83a 	sub	r2,r3,r2
 400c3d4:	e0bff615 	stw	r2,-40(fp)
 400c3d8:	00000406 	br	400c3ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400c3dc:	00c1ffc4 	movi	r3,2047
 400c3e0:	e0bff917 	ldw	r2,-28(fp)
 400c3e4:	1885c83a 	sub	r2,r3,r2
 400c3e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400c3ec:	e0bff617 	ldw	r2,-40(fp)
 400c3f0:	10001e26 	beq	r2,zero,400c46c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400c3f4:	e0fffe17 	ldw	r3,-8(fp)
 400c3f8:	e0bff617 	ldw	r2,-40(fp)
 400c3fc:	1880022e 	bgeu	r3,r2,400c408 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400c400:	e0bffe17 	ldw	r2,-8(fp)
 400c404:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400c408:	e0bffc17 	ldw	r2,-16(fp)
 400c40c:	10c20e04 	addi	r3,r2,2104
 400c410:	e0bff917 	ldw	r2,-28(fp)
 400c414:	1885883a 	add	r2,r3,r2
 400c418:	e1bff617 	ldw	r6,-40(fp)
 400c41c:	e17ffd17 	ldw	r5,-12(fp)
 400c420:	1009883a 	mov	r4,r2
 400c424:	40096fc0 	call	40096fc <memcpy>
      ptr   += n;
 400c428:	e0fffd17 	ldw	r3,-12(fp)
 400c42c:	e0bff617 	ldw	r2,-40(fp)
 400c430:	1885883a 	add	r2,r3,r2
 400c434:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400c438:	e0fffe17 	ldw	r3,-8(fp)
 400c43c:	e0bff617 	ldw	r2,-40(fp)
 400c440:	1885c83a 	sub	r2,r3,r2
 400c444:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400c448:	e0fff917 	ldw	r3,-28(fp)
 400c44c:	e0bff617 	ldw	r2,-40(fp)
 400c450:	1885883a 	add	r2,r3,r2
 400c454:	10c1ffcc 	andi	r3,r2,2047
 400c458:	e0bffc17 	ldw	r2,-16(fp)
 400c45c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400c460:	e0bffe17 	ldw	r2,-8(fp)
 400c464:	00bfc716 	blt	zero,r2,400c384 <__flash_rwdata_start+0xffffeae4>
 400c468:	00000106 	br	400c470 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400c46c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c470:	0005303a 	rdctl	r2,status
 400c474:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c478:	e0fffb17 	ldw	r3,-20(fp)
 400c47c:	00bfff84 	movi	r2,-2
 400c480:	1884703a 	and	r2,r3,r2
 400c484:	1001703a 	wrctl	status,r2
  
  return context;
 400c488:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400c48c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400c490:	e0bffc17 	ldw	r2,-16(fp)
 400c494:	10800817 	ldw	r2,32(r2)
 400c498:	10c00094 	ori	r3,r2,2
 400c49c:	e0bffc17 	ldw	r2,-16(fp)
 400c4a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400c4a4:	e0bffc17 	ldw	r2,-16(fp)
 400c4a8:	10800017 	ldw	r2,0(r2)
 400c4ac:	10800104 	addi	r2,r2,4
 400c4b0:	1007883a 	mov	r3,r2
 400c4b4:	e0bffc17 	ldw	r2,-16(fp)
 400c4b8:	10800817 	ldw	r2,32(r2)
 400c4bc:	18800035 	stwio	r2,0(r3)
 400c4c0:	e0bffa17 	ldw	r2,-24(fp)
 400c4c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c4c8:	e0bff817 	ldw	r2,-32(fp)
 400c4cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400c4d0:	e0bffe17 	ldw	r2,-8(fp)
 400c4d4:	0080100e 	bge	zero,r2,400c518 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400c4d8:	e0bfff17 	ldw	r2,-4(fp)
 400c4dc:	1090000c 	andi	r2,r2,16384
 400c4e0:	1000101e 	bne	r2,zero,400c524 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400c4e4:	0001883a 	nop
 400c4e8:	e0bffc17 	ldw	r2,-16(fp)
 400c4ec:	10c00d17 	ldw	r3,52(r2)
 400c4f0:	e0bff517 	ldw	r2,-44(fp)
 400c4f4:	1880051e 	bne	r3,r2,400c50c <altera_avalon_jtag_uart_write+0x1b8>
 400c4f8:	e0bffc17 	ldw	r2,-16(fp)
 400c4fc:	10c00917 	ldw	r3,36(r2)
 400c500:	e0bffc17 	ldw	r2,-16(fp)
 400c504:	10800117 	ldw	r2,4(r2)
 400c508:	18bff736 	bltu	r3,r2,400c4e8 <__flash_rwdata_start+0xffffec48>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400c50c:	e0bffc17 	ldw	r2,-16(fp)
 400c510:	10800917 	ldw	r2,36(r2)
 400c514:	1000051e 	bne	r2,zero,400c52c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400c518:	e0bffe17 	ldw	r2,-8(fp)
 400c51c:	00bfd016 	blt	zero,r2,400c460 <__flash_rwdata_start+0xffffebc0>
 400c520:	00000306 	br	400c530 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400c524:	0001883a 	nop
 400c528:	00000106 	br	400c530 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400c52c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400c530:	e0fffd17 	ldw	r3,-12(fp)
 400c534:	e0bff717 	ldw	r2,-36(fp)
 400c538:	18800426 	beq	r3,r2,400c54c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400c53c:	e0fffd17 	ldw	r3,-12(fp)
 400c540:	e0bff717 	ldw	r2,-36(fp)
 400c544:	1885c83a 	sub	r2,r3,r2
 400c548:	00000606 	br	400c564 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400c54c:	e0bfff17 	ldw	r2,-4(fp)
 400c550:	1090000c 	andi	r2,r2,16384
 400c554:	10000226 	beq	r2,zero,400c560 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400c558:	00bffd44 	movi	r2,-11
 400c55c:	00000106 	br	400c564 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400c560:	00bffec4 	movi	r2,-5
}
 400c564:	e037883a 	mov	sp,fp
 400c568:	dfc00117 	ldw	ra,4(sp)
 400c56c:	df000017 	ldw	fp,0(sp)
 400c570:	dec00204 	addi	sp,sp,8
 400c574:	f800283a 	ret

0400c578 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400c578:	defffa04 	addi	sp,sp,-24
 400c57c:	dfc00515 	stw	ra,20(sp)
 400c580:	df000415 	stw	fp,16(sp)
 400c584:	df000404 	addi	fp,sp,16
 400c588:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 400c58c:	0007883a 	mov	r3,zero
 400c590:	e0bfff17 	ldw	r2,-4(fp)
 400c594:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400c598:	e0bfff17 	ldw	r2,-4(fp)
 400c59c:	10800104 	addi	r2,r2,4
 400c5a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c5a4:	0005303a 	rdctl	r2,status
 400c5a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c5ac:	e0fffd17 	ldw	r3,-12(fp)
 400c5b0:	00bfff84 	movi	r2,-2
 400c5b4:	1884703a 	and	r2,r3,r2
 400c5b8:	1001703a 	wrctl	status,r2
  
  return context;
 400c5bc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 400c5c0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 400c5c4:	400d0980 	call	400d098 <alt_tick>
 400c5c8:	e0bffc17 	ldw	r2,-16(fp)
 400c5cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c5d0:	e0bffe17 	ldw	r2,-8(fp)
 400c5d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 400c5d8:	0001883a 	nop
 400c5dc:	e037883a 	mov	sp,fp
 400c5e0:	dfc00117 	ldw	ra,4(sp)
 400c5e4:	df000017 	ldw	fp,0(sp)
 400c5e8:	dec00204 	addi	sp,sp,8
 400c5ec:	f800283a 	ret

0400c5f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 400c5f0:	defff804 	addi	sp,sp,-32
 400c5f4:	dfc00715 	stw	ra,28(sp)
 400c5f8:	df000615 	stw	fp,24(sp)
 400c5fc:	df000604 	addi	fp,sp,24
 400c600:	e13ffc15 	stw	r4,-16(fp)
 400c604:	e17ffd15 	stw	r5,-12(fp)
 400c608:	e1bffe15 	stw	r6,-8(fp)
 400c60c:	e1ffff15 	stw	r7,-4(fp)
 400c610:	e0bfff17 	ldw	r2,-4(fp)
 400c614:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 400c618:	d0a01617 	ldw	r2,-32680(gp)
 400c61c:	1000021e 	bne	r2,zero,400c628 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 400c620:	e0bffb17 	ldw	r2,-20(fp)
 400c624:	d0a01615 	stw	r2,-32680(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 400c628:	e0bffc17 	ldw	r2,-16(fp)
 400c62c:	10800104 	addi	r2,r2,4
 400c630:	00c001c4 	movi	r3,7
 400c634:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 400c638:	d8000015 	stw	zero,0(sp)
 400c63c:	e1fffc17 	ldw	r7,-16(fp)
 400c640:	01810074 	movhi	r6,1025
 400c644:	31b15e04 	addi	r6,r6,-14984
 400c648:	e17ffe17 	ldw	r5,-8(fp)
 400c64c:	e13ffd17 	ldw	r4,-12(fp)
 400c650:	400c9780 	call	400c978 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 400c654:	0001883a 	nop
 400c658:	e037883a 	mov	sp,fp
 400c65c:	dfc00117 	ldw	ra,4(sp)
 400c660:	df000017 	ldw	fp,0(sp)
 400c664:	dec00204 	addi	sp,sp,8
 400c668:	f800283a 	ret

0400c66c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400c66c:	defff504 	addi	sp,sp,-44
 400c670:	df000a15 	stw	fp,40(sp)
 400c674:	df000a04 	addi	fp,sp,40
 400c678:	e13ffc15 	stw	r4,-16(fp)
 400c67c:	e17ffd15 	stw	r5,-12(fp)
 400c680:	e1bffe15 	stw	r6,-8(fp)
 400c684:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400c688:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400c68c:	d0a01617 	ldw	r2,-32680(gp)
  
  if (alt_ticks_per_second ())
 400c690:	10003c26 	beq	r2,zero,400c784 <alt_alarm_start+0x118>
  {
    if (alarm)
 400c694:	e0bffc17 	ldw	r2,-16(fp)
 400c698:	10003826 	beq	r2,zero,400c77c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400c69c:	e0bffc17 	ldw	r2,-16(fp)
 400c6a0:	e0fffe17 	ldw	r3,-8(fp)
 400c6a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400c6a8:	e0bffc17 	ldw	r2,-16(fp)
 400c6ac:	e0ffff17 	ldw	r3,-4(fp)
 400c6b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c6b4:	0005303a 	rdctl	r2,status
 400c6b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c6bc:	e0fff917 	ldw	r3,-28(fp)
 400c6c0:	00bfff84 	movi	r2,-2
 400c6c4:	1884703a 	and	r2,r3,r2
 400c6c8:	1001703a 	wrctl	status,r2
  
  return context;
 400c6cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400c6d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400c6d4:	d0a01717 	ldw	r2,-32676(gp)
      
      current_nticks = alt_nticks();
 400c6d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400c6dc:	e0fffd17 	ldw	r3,-12(fp)
 400c6e0:	e0bff617 	ldw	r2,-40(fp)
 400c6e4:	1885883a 	add	r2,r3,r2
 400c6e8:	10c00044 	addi	r3,r2,1
 400c6ec:	e0bffc17 	ldw	r2,-16(fp)
 400c6f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400c6f4:	e0bffc17 	ldw	r2,-16(fp)
 400c6f8:	10c00217 	ldw	r3,8(r2)
 400c6fc:	e0bff617 	ldw	r2,-40(fp)
 400c700:	1880042e 	bgeu	r3,r2,400c714 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400c704:	e0bffc17 	ldw	r2,-16(fp)
 400c708:	00c00044 	movi	r3,1
 400c70c:	10c00405 	stb	r3,16(r2)
 400c710:	00000206 	br	400c71c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400c714:	e0bffc17 	ldw	r2,-16(fp)
 400c718:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400c71c:	e0bffc17 	ldw	r2,-16(fp)
 400c720:	d0e00c04 	addi	r3,gp,-32720
 400c724:	e0fffa15 	stw	r3,-24(fp)
 400c728:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400c72c:	e0bffb17 	ldw	r2,-20(fp)
 400c730:	e0fffa17 	ldw	r3,-24(fp)
 400c734:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400c738:	e0bffa17 	ldw	r2,-24(fp)
 400c73c:	10c00017 	ldw	r3,0(r2)
 400c740:	e0bffb17 	ldw	r2,-20(fp)
 400c744:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400c748:	e0bffa17 	ldw	r2,-24(fp)
 400c74c:	10800017 	ldw	r2,0(r2)
 400c750:	e0fffb17 	ldw	r3,-20(fp)
 400c754:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400c758:	e0bffa17 	ldw	r2,-24(fp)
 400c75c:	e0fffb17 	ldw	r3,-20(fp)
 400c760:	10c00015 	stw	r3,0(r2)
 400c764:	e0bff817 	ldw	r2,-32(fp)
 400c768:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c76c:	e0bff717 	ldw	r2,-36(fp)
 400c770:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400c774:	0005883a 	mov	r2,zero
 400c778:	00000306 	br	400c788 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400c77c:	00bffa84 	movi	r2,-22
 400c780:	00000106 	br	400c788 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400c784:	00bfde84 	movi	r2,-134
  }
}
 400c788:	e037883a 	mov	sp,fp
 400c78c:	df000017 	ldw	fp,0(sp)
 400c790:	dec00104 	addi	sp,sp,4
 400c794:	f800283a 	ret

0400c798 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400c798:	deffff04 	addi	sp,sp,-4
 400c79c:	df000015 	stw	fp,0(sp)
 400c7a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400c7a4:	0001883a 	nop
 400c7a8:	e037883a 	mov	sp,fp
 400c7ac:	df000017 	ldw	fp,0(sp)
 400c7b0:	dec00104 	addi	sp,sp,4
 400c7b4:	f800283a 	ret

0400c7b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400c7b8:	defffe04 	addi	sp,sp,-8
 400c7bc:	dfc00115 	stw	ra,4(sp)
 400c7c0:	df000015 	stw	fp,0(sp)
 400c7c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400c7c8:	d0a00917 	ldw	r2,-32732(gp)
 400c7cc:	10000326 	beq	r2,zero,400c7dc <alt_get_errno+0x24>
 400c7d0:	d0a00917 	ldw	r2,-32732(gp)
 400c7d4:	103ee83a 	callr	r2
 400c7d8:	00000106 	br	400c7e0 <alt_get_errno+0x28>
 400c7dc:	d0a01104 	addi	r2,gp,-32700
}
 400c7e0:	e037883a 	mov	sp,fp
 400c7e4:	dfc00117 	ldw	ra,4(sp)
 400c7e8:	df000017 	ldw	fp,0(sp)
 400c7ec:	dec00204 	addi	sp,sp,8
 400c7f0:	f800283a 	ret

0400c7f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400c7f4:	defffa04 	addi	sp,sp,-24
 400c7f8:	dfc00515 	stw	ra,20(sp)
 400c7fc:	df000415 	stw	fp,16(sp)
 400c800:	df000404 	addi	fp,sp,16
 400c804:	e13ffe15 	stw	r4,-8(fp)
 400c808:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400c80c:	e0bffe17 	ldw	r2,-8(fp)
 400c810:	10000326 	beq	r2,zero,400c820 <alt_dev_llist_insert+0x2c>
 400c814:	e0bffe17 	ldw	r2,-8(fp)
 400c818:	10800217 	ldw	r2,8(r2)
 400c81c:	1000061e 	bne	r2,zero,400c838 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400c820:	400c7b80 	call	400c7b8 <alt_get_errno>
 400c824:	1007883a 	mov	r3,r2
 400c828:	00800584 	movi	r2,22
 400c82c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400c830:	00bffa84 	movi	r2,-22
 400c834:	00001306 	br	400c884 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400c838:	e0bffe17 	ldw	r2,-8(fp)
 400c83c:	e0ffff17 	ldw	r3,-4(fp)
 400c840:	e0fffc15 	stw	r3,-16(fp)
 400c844:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400c848:	e0bffd17 	ldw	r2,-12(fp)
 400c84c:	e0fffc17 	ldw	r3,-16(fp)
 400c850:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400c854:	e0bffc17 	ldw	r2,-16(fp)
 400c858:	10c00017 	ldw	r3,0(r2)
 400c85c:	e0bffd17 	ldw	r2,-12(fp)
 400c860:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400c864:	e0bffc17 	ldw	r2,-16(fp)
 400c868:	10800017 	ldw	r2,0(r2)
 400c86c:	e0fffd17 	ldw	r3,-12(fp)
 400c870:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400c874:	e0bffc17 	ldw	r2,-16(fp)
 400c878:	e0fffd17 	ldw	r3,-12(fp)
 400c87c:	10c00015 	stw	r3,0(r2)

  return 0;  
 400c880:	0005883a 	mov	r2,zero
}
 400c884:	e037883a 	mov	sp,fp
 400c888:	dfc00117 	ldw	ra,4(sp)
 400c88c:	df000017 	ldw	fp,0(sp)
 400c890:	dec00204 	addi	sp,sp,8
 400c894:	f800283a 	ret

0400c898 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400c898:	defffd04 	addi	sp,sp,-12
 400c89c:	dfc00215 	stw	ra,8(sp)
 400c8a0:	df000115 	stw	fp,4(sp)
 400c8a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400c8a8:	00810074 	movhi	r2,1025
 400c8ac:	10b61304 	addi	r2,r2,-10164
 400c8b0:	e0bfff15 	stw	r2,-4(fp)
 400c8b4:	00000606 	br	400c8d0 <_do_ctors+0x38>
        (*ctor) (); 
 400c8b8:	e0bfff17 	ldw	r2,-4(fp)
 400c8bc:	10800017 	ldw	r2,0(r2)
 400c8c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400c8c4:	e0bfff17 	ldw	r2,-4(fp)
 400c8c8:	10bfff04 	addi	r2,r2,-4
 400c8cc:	e0bfff15 	stw	r2,-4(fp)
 400c8d0:	e0ffff17 	ldw	r3,-4(fp)
 400c8d4:	00810074 	movhi	r2,1025
 400c8d8:	10b61404 	addi	r2,r2,-10160
 400c8dc:	18bff62e 	bgeu	r3,r2,400c8b8 <__flash_rwdata_start+0xfffff018>
        (*ctor) (); 
}
 400c8e0:	0001883a 	nop
 400c8e4:	e037883a 	mov	sp,fp
 400c8e8:	dfc00117 	ldw	ra,4(sp)
 400c8ec:	df000017 	ldw	fp,0(sp)
 400c8f0:	dec00204 	addi	sp,sp,8
 400c8f4:	f800283a 	ret

0400c8f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400c8f8:	defffd04 	addi	sp,sp,-12
 400c8fc:	dfc00215 	stw	ra,8(sp)
 400c900:	df000115 	stw	fp,4(sp)
 400c904:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400c908:	00810074 	movhi	r2,1025
 400c90c:	10b61304 	addi	r2,r2,-10164
 400c910:	e0bfff15 	stw	r2,-4(fp)
 400c914:	00000606 	br	400c930 <_do_dtors+0x38>
        (*dtor) (); 
 400c918:	e0bfff17 	ldw	r2,-4(fp)
 400c91c:	10800017 	ldw	r2,0(r2)
 400c920:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400c924:	e0bfff17 	ldw	r2,-4(fp)
 400c928:	10bfff04 	addi	r2,r2,-4
 400c92c:	e0bfff15 	stw	r2,-4(fp)
 400c930:	e0ffff17 	ldw	r3,-4(fp)
 400c934:	00810074 	movhi	r2,1025
 400c938:	10b61404 	addi	r2,r2,-10160
 400c93c:	18bff62e 	bgeu	r3,r2,400c918 <__flash_rwdata_start+0xfffff078>
        (*dtor) (); 
}
 400c940:	0001883a 	nop
 400c944:	e037883a 	mov	sp,fp
 400c948:	dfc00117 	ldw	ra,4(sp)
 400c94c:	df000017 	ldw	fp,0(sp)
 400c950:	dec00204 	addi	sp,sp,8
 400c954:	f800283a 	ret

0400c958 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400c958:	deffff04 	addi	sp,sp,-4
 400c95c:	df000015 	stw	fp,0(sp)
 400c960:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400c964:	0001883a 	nop
 400c968:	e037883a 	mov	sp,fp
 400c96c:	df000017 	ldw	fp,0(sp)
 400c970:	dec00104 	addi	sp,sp,4
 400c974:	f800283a 	ret

0400c978 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400c978:	defff904 	addi	sp,sp,-28
 400c97c:	dfc00615 	stw	ra,24(sp)
 400c980:	df000515 	stw	fp,20(sp)
 400c984:	df000504 	addi	fp,sp,20
 400c988:	e13ffc15 	stw	r4,-16(fp)
 400c98c:	e17ffd15 	stw	r5,-12(fp)
 400c990:	e1bffe15 	stw	r6,-8(fp)
 400c994:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400c998:	e0800217 	ldw	r2,8(fp)
 400c99c:	d8800015 	stw	r2,0(sp)
 400c9a0:	e1ffff17 	ldw	r7,-4(fp)
 400c9a4:	e1bffe17 	ldw	r6,-8(fp)
 400c9a8:	e17ffd17 	ldw	r5,-12(fp)
 400c9ac:	e13ffc17 	ldw	r4,-16(fp)
 400c9b0:	400cb280 	call	400cb28 <alt_iic_isr_register>
}  
 400c9b4:	e037883a 	mov	sp,fp
 400c9b8:	dfc00117 	ldw	ra,4(sp)
 400c9bc:	df000017 	ldw	fp,0(sp)
 400c9c0:	dec00204 	addi	sp,sp,8
 400c9c4:	f800283a 	ret

0400c9c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400c9c8:	defff904 	addi	sp,sp,-28
 400c9cc:	df000615 	stw	fp,24(sp)
 400c9d0:	df000604 	addi	fp,sp,24
 400c9d4:	e13ffe15 	stw	r4,-8(fp)
 400c9d8:	e17fff15 	stw	r5,-4(fp)
 400c9dc:	e0bfff17 	ldw	r2,-4(fp)
 400c9e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c9e4:	0005303a 	rdctl	r2,status
 400c9e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c9ec:	e0fffb17 	ldw	r3,-20(fp)
 400c9f0:	00bfff84 	movi	r2,-2
 400c9f4:	1884703a 	and	r2,r3,r2
 400c9f8:	1001703a 	wrctl	status,r2
  
  return context;
 400c9fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400ca00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400ca04:	00c00044 	movi	r3,1
 400ca08:	e0bffa17 	ldw	r2,-24(fp)
 400ca0c:	1884983a 	sll	r2,r3,r2
 400ca10:	1007883a 	mov	r3,r2
 400ca14:	d0a01517 	ldw	r2,-32684(gp)
 400ca18:	1884b03a 	or	r2,r3,r2
 400ca1c:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400ca20:	d0a01517 	ldw	r2,-32684(gp)
 400ca24:	100170fa 	wrctl	ienable,r2
 400ca28:	e0bffc17 	ldw	r2,-16(fp)
 400ca2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ca30:	e0bffd17 	ldw	r2,-12(fp)
 400ca34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400ca38:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400ca3c:	0001883a 	nop
}
 400ca40:	e037883a 	mov	sp,fp
 400ca44:	df000017 	ldw	fp,0(sp)
 400ca48:	dec00104 	addi	sp,sp,4
 400ca4c:	f800283a 	ret

0400ca50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400ca50:	defff904 	addi	sp,sp,-28
 400ca54:	df000615 	stw	fp,24(sp)
 400ca58:	df000604 	addi	fp,sp,24
 400ca5c:	e13ffe15 	stw	r4,-8(fp)
 400ca60:	e17fff15 	stw	r5,-4(fp)
 400ca64:	e0bfff17 	ldw	r2,-4(fp)
 400ca68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ca6c:	0005303a 	rdctl	r2,status
 400ca70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ca74:	e0fffb17 	ldw	r3,-20(fp)
 400ca78:	00bfff84 	movi	r2,-2
 400ca7c:	1884703a 	and	r2,r3,r2
 400ca80:	1001703a 	wrctl	status,r2
  
  return context;
 400ca84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400ca88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400ca8c:	00c00044 	movi	r3,1
 400ca90:	e0bffa17 	ldw	r2,-24(fp)
 400ca94:	1884983a 	sll	r2,r3,r2
 400ca98:	0084303a 	nor	r2,zero,r2
 400ca9c:	1007883a 	mov	r3,r2
 400caa0:	d0a01517 	ldw	r2,-32684(gp)
 400caa4:	1884703a 	and	r2,r3,r2
 400caa8:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400caac:	d0a01517 	ldw	r2,-32684(gp)
 400cab0:	100170fa 	wrctl	ienable,r2
 400cab4:	e0bffc17 	ldw	r2,-16(fp)
 400cab8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cabc:	e0bffd17 	ldw	r2,-12(fp)
 400cac0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400cac4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400cac8:	0001883a 	nop
}
 400cacc:	e037883a 	mov	sp,fp
 400cad0:	df000017 	ldw	fp,0(sp)
 400cad4:	dec00104 	addi	sp,sp,4
 400cad8:	f800283a 	ret

0400cadc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400cadc:	defffc04 	addi	sp,sp,-16
 400cae0:	df000315 	stw	fp,12(sp)
 400cae4:	df000304 	addi	fp,sp,12
 400cae8:	e13ffe15 	stw	r4,-8(fp)
 400caec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400caf0:	000530fa 	rdctl	r2,ienable
 400caf4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400caf8:	00c00044 	movi	r3,1
 400cafc:	e0bfff17 	ldw	r2,-4(fp)
 400cb00:	1884983a 	sll	r2,r3,r2
 400cb04:	1007883a 	mov	r3,r2
 400cb08:	e0bffd17 	ldw	r2,-12(fp)
 400cb0c:	1884703a 	and	r2,r3,r2
 400cb10:	1004c03a 	cmpne	r2,r2,zero
 400cb14:	10803fcc 	andi	r2,r2,255
}
 400cb18:	e037883a 	mov	sp,fp
 400cb1c:	df000017 	ldw	fp,0(sp)
 400cb20:	dec00104 	addi	sp,sp,4
 400cb24:	f800283a 	ret

0400cb28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400cb28:	defff504 	addi	sp,sp,-44
 400cb2c:	dfc00a15 	stw	ra,40(sp)
 400cb30:	df000915 	stw	fp,36(sp)
 400cb34:	df000904 	addi	fp,sp,36
 400cb38:	e13ffc15 	stw	r4,-16(fp)
 400cb3c:	e17ffd15 	stw	r5,-12(fp)
 400cb40:	e1bffe15 	stw	r6,-8(fp)
 400cb44:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400cb48:	00bffa84 	movi	r2,-22
 400cb4c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400cb50:	e0bffd17 	ldw	r2,-12(fp)
 400cb54:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400cb58:	e0bff817 	ldw	r2,-32(fp)
 400cb5c:	10800808 	cmpgei	r2,r2,32
 400cb60:	1000271e 	bne	r2,zero,400cc00 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cb64:	0005303a 	rdctl	r2,status
 400cb68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cb6c:	e0fffb17 	ldw	r3,-20(fp)
 400cb70:	00bfff84 	movi	r2,-2
 400cb74:	1884703a 	and	r2,r3,r2
 400cb78:	1001703a 	wrctl	status,r2
  
  return context;
 400cb7c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400cb80:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400cb84:	00800034 	movhi	r2,0
 400cb88:	1086c404 	addi	r2,r2,6928
 400cb8c:	e0fff817 	ldw	r3,-32(fp)
 400cb90:	180690fa 	slli	r3,r3,3
 400cb94:	10c5883a 	add	r2,r2,r3
 400cb98:	e0fffe17 	ldw	r3,-8(fp)
 400cb9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400cba0:	00800034 	movhi	r2,0
 400cba4:	1086c404 	addi	r2,r2,6928
 400cba8:	e0fff817 	ldw	r3,-32(fp)
 400cbac:	180690fa 	slli	r3,r3,3
 400cbb0:	10c5883a 	add	r2,r2,r3
 400cbb4:	10800104 	addi	r2,r2,4
 400cbb8:	e0ffff17 	ldw	r3,-4(fp)
 400cbbc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400cbc0:	e0bffe17 	ldw	r2,-8(fp)
 400cbc4:	10000526 	beq	r2,zero,400cbdc <alt_iic_isr_register+0xb4>
 400cbc8:	e0bff817 	ldw	r2,-32(fp)
 400cbcc:	100b883a 	mov	r5,r2
 400cbd0:	e13ffc17 	ldw	r4,-16(fp)
 400cbd4:	400c9c80 	call	400c9c8 <alt_ic_irq_enable>
 400cbd8:	00000406 	br	400cbec <alt_iic_isr_register+0xc4>
 400cbdc:	e0bff817 	ldw	r2,-32(fp)
 400cbe0:	100b883a 	mov	r5,r2
 400cbe4:	e13ffc17 	ldw	r4,-16(fp)
 400cbe8:	400ca500 	call	400ca50 <alt_ic_irq_disable>
 400cbec:	e0bff715 	stw	r2,-36(fp)
 400cbf0:	e0bffa17 	ldw	r2,-24(fp)
 400cbf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cbf8:	e0bff917 	ldw	r2,-28(fp)
 400cbfc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400cc00:	e0bff717 	ldw	r2,-36(fp)
}
 400cc04:	e037883a 	mov	sp,fp
 400cc08:	dfc00117 	ldw	ra,4(sp)
 400cc0c:	df000017 	ldw	fp,0(sp)
 400cc10:	dec00204 	addi	sp,sp,8
 400cc14:	f800283a 	ret

0400cc18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400cc18:	defff804 	addi	sp,sp,-32
 400cc1c:	dfc00715 	stw	ra,28(sp)
 400cc20:	df000615 	stw	fp,24(sp)
 400cc24:	dc000515 	stw	r16,20(sp)
 400cc28:	df000604 	addi	fp,sp,24
 400cc2c:	e13ffb15 	stw	r4,-20(fp)
 400cc30:	e17ffc15 	stw	r5,-16(fp)
 400cc34:	e1bffd15 	stw	r6,-12(fp)
 400cc38:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 400cc3c:	e1bffe17 	ldw	r6,-8(fp)
 400cc40:	e17ffd17 	ldw	r5,-12(fp)
 400cc44:	e13ffc17 	ldw	r4,-16(fp)
 400cc48:	400cea00 	call	400cea0 <open>
 400cc4c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 400cc50:	e0bffa17 	ldw	r2,-24(fp)
 400cc54:	10002216 	blt	r2,zero,400cce0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 400cc58:	04000034 	movhi	r16,0
 400cc5c:	84022904 	addi	r16,r16,2212
 400cc60:	e0bffa17 	ldw	r2,-24(fp)
 400cc64:	01400304 	movi	r5,12
 400cc68:	1009883a 	mov	r4,r2
 400cc6c:	400b0840 	call	400b084 <__mulsi3>
 400cc70:	8085883a 	add	r2,r16,r2
 400cc74:	10c00017 	ldw	r3,0(r2)
 400cc78:	e0bffb17 	ldw	r2,-20(fp)
 400cc7c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400cc80:	04000034 	movhi	r16,0
 400cc84:	84022904 	addi	r16,r16,2212
 400cc88:	e0bffa17 	ldw	r2,-24(fp)
 400cc8c:	01400304 	movi	r5,12
 400cc90:	1009883a 	mov	r4,r2
 400cc94:	400b0840 	call	400b084 <__mulsi3>
 400cc98:	8085883a 	add	r2,r16,r2
 400cc9c:	10800104 	addi	r2,r2,4
 400cca0:	10c00017 	ldw	r3,0(r2)
 400cca4:	e0bffb17 	ldw	r2,-20(fp)
 400cca8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400ccac:	04000034 	movhi	r16,0
 400ccb0:	84022904 	addi	r16,r16,2212
 400ccb4:	e0bffa17 	ldw	r2,-24(fp)
 400ccb8:	01400304 	movi	r5,12
 400ccbc:	1009883a 	mov	r4,r2
 400ccc0:	400b0840 	call	400b084 <__mulsi3>
 400ccc4:	8085883a 	add	r2,r16,r2
 400ccc8:	10800204 	addi	r2,r2,8
 400cccc:	10c00017 	ldw	r3,0(r2)
 400ccd0:	e0bffb17 	ldw	r2,-20(fp)
 400ccd4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400ccd8:	e13ffa17 	ldw	r4,-24(fp)
 400ccdc:	400b7d00 	call	400b7d0 <alt_release_fd>
  }
} 
 400cce0:	0001883a 	nop
 400cce4:	e6ffff04 	addi	sp,fp,-4
 400cce8:	dfc00217 	ldw	ra,8(sp)
 400ccec:	df000117 	ldw	fp,4(sp)
 400ccf0:	dc000017 	ldw	r16,0(sp)
 400ccf4:	dec00304 	addi	sp,sp,12
 400ccf8:	f800283a 	ret

0400ccfc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400ccfc:	defffb04 	addi	sp,sp,-20
 400cd00:	dfc00415 	stw	ra,16(sp)
 400cd04:	df000315 	stw	fp,12(sp)
 400cd08:	df000304 	addi	fp,sp,12
 400cd0c:	e13ffd15 	stw	r4,-12(fp)
 400cd10:	e17ffe15 	stw	r5,-8(fp)
 400cd14:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400cd18:	01c07fc4 	movi	r7,511
 400cd1c:	01800044 	movi	r6,1
 400cd20:	e17ffd17 	ldw	r5,-12(fp)
 400cd24:	01000034 	movhi	r4,0
 400cd28:	21022c04 	addi	r4,r4,2224
 400cd2c:	400cc180 	call	400cc18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400cd30:	01c07fc4 	movi	r7,511
 400cd34:	000d883a 	mov	r6,zero
 400cd38:	e17ffe17 	ldw	r5,-8(fp)
 400cd3c:	01000034 	movhi	r4,0
 400cd40:	21022904 	addi	r4,r4,2212
 400cd44:	400cc180 	call	400cc18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400cd48:	01c07fc4 	movi	r7,511
 400cd4c:	01800044 	movi	r6,1
 400cd50:	e17fff17 	ldw	r5,-4(fp)
 400cd54:	01000034 	movhi	r4,0
 400cd58:	21022f04 	addi	r4,r4,2236
 400cd5c:	400cc180 	call	400cc18 <alt_open_fd>
}  
 400cd60:	0001883a 	nop
 400cd64:	e037883a 	mov	sp,fp
 400cd68:	dfc00117 	ldw	ra,4(sp)
 400cd6c:	df000017 	ldw	fp,0(sp)
 400cd70:	dec00204 	addi	sp,sp,8
 400cd74:	f800283a 	ret

0400cd78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400cd78:	defffe04 	addi	sp,sp,-8
 400cd7c:	dfc00115 	stw	ra,4(sp)
 400cd80:	df000015 	stw	fp,0(sp)
 400cd84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400cd88:	d0a00917 	ldw	r2,-32732(gp)
 400cd8c:	10000326 	beq	r2,zero,400cd9c <alt_get_errno+0x24>
 400cd90:	d0a00917 	ldw	r2,-32732(gp)
 400cd94:	103ee83a 	callr	r2
 400cd98:	00000106 	br	400cda0 <alt_get_errno+0x28>
 400cd9c:	d0a01104 	addi	r2,gp,-32700
}
 400cda0:	e037883a 	mov	sp,fp
 400cda4:	dfc00117 	ldw	ra,4(sp)
 400cda8:	df000017 	ldw	fp,0(sp)
 400cdac:	dec00204 	addi	sp,sp,8
 400cdb0:	f800283a 	ret

0400cdb4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400cdb4:	defffb04 	addi	sp,sp,-20
 400cdb8:	dfc00415 	stw	ra,16(sp)
 400cdbc:	df000315 	stw	fp,12(sp)
 400cdc0:	dc000215 	stw	r16,8(sp)
 400cdc4:	df000304 	addi	fp,sp,12
 400cdc8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400cdcc:	e0bffe17 	ldw	r2,-8(fp)
 400cdd0:	10800217 	ldw	r2,8(r2)
 400cdd4:	10d00034 	orhi	r3,r2,16384
 400cdd8:	e0bffe17 	ldw	r2,-8(fp)
 400cddc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400cde0:	e03ffd15 	stw	zero,-12(fp)
 400cde4:	00002306 	br	400ce74 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400cde8:	04000034 	movhi	r16,0
 400cdec:	84022904 	addi	r16,r16,2212
 400cdf0:	e0bffd17 	ldw	r2,-12(fp)
 400cdf4:	01400304 	movi	r5,12
 400cdf8:	1009883a 	mov	r4,r2
 400cdfc:	400b0840 	call	400b084 <__mulsi3>
 400ce00:	8085883a 	add	r2,r16,r2
 400ce04:	10c00017 	ldw	r3,0(r2)
 400ce08:	e0bffe17 	ldw	r2,-8(fp)
 400ce0c:	10800017 	ldw	r2,0(r2)
 400ce10:	1880151e 	bne	r3,r2,400ce68 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400ce14:	04000034 	movhi	r16,0
 400ce18:	84022904 	addi	r16,r16,2212
 400ce1c:	e0bffd17 	ldw	r2,-12(fp)
 400ce20:	01400304 	movi	r5,12
 400ce24:	1009883a 	mov	r4,r2
 400ce28:	400b0840 	call	400b084 <__mulsi3>
 400ce2c:	8085883a 	add	r2,r16,r2
 400ce30:	10800204 	addi	r2,r2,8
 400ce34:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400ce38:	10000b0e 	bge	r2,zero,400ce68 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400ce3c:	01400304 	movi	r5,12
 400ce40:	e13ffd17 	ldw	r4,-12(fp)
 400ce44:	400b0840 	call	400b084 <__mulsi3>
 400ce48:	1007883a 	mov	r3,r2
 400ce4c:	00800034 	movhi	r2,0
 400ce50:	10822904 	addi	r2,r2,2212
 400ce54:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400ce58:	e0bffe17 	ldw	r2,-8(fp)
 400ce5c:	18800226 	beq	r3,r2,400ce68 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400ce60:	00bffcc4 	movi	r2,-13
 400ce64:	00000806 	br	400ce88 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400ce68:	e0bffd17 	ldw	r2,-12(fp)
 400ce6c:	10800044 	addi	r2,r2,1
 400ce70:	e0bffd15 	stw	r2,-12(fp)
 400ce74:	d0a00817 	ldw	r2,-32736(gp)
 400ce78:	1007883a 	mov	r3,r2
 400ce7c:	e0bffd17 	ldw	r2,-12(fp)
 400ce80:	18bfd92e 	bgeu	r3,r2,400cde8 <__flash_rwdata_start+0xfffff548>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400ce84:	0005883a 	mov	r2,zero
}
 400ce88:	e6ffff04 	addi	sp,fp,-4
 400ce8c:	dfc00217 	ldw	ra,8(sp)
 400ce90:	df000117 	ldw	fp,4(sp)
 400ce94:	dc000017 	ldw	r16,0(sp)
 400ce98:	dec00304 	addi	sp,sp,12
 400ce9c:	f800283a 	ret

0400cea0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400cea0:	defff604 	addi	sp,sp,-40
 400cea4:	dfc00915 	stw	ra,36(sp)
 400cea8:	df000815 	stw	fp,32(sp)
 400ceac:	df000804 	addi	fp,sp,32
 400ceb0:	e13ffd15 	stw	r4,-12(fp)
 400ceb4:	e17ffe15 	stw	r5,-8(fp)
 400ceb8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400cebc:	00bfffc4 	movi	r2,-1
 400cec0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400cec4:	00bffb44 	movi	r2,-19
 400cec8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400cecc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400ced0:	d1600604 	addi	r5,gp,-32744
 400ced4:	e13ffd17 	ldw	r4,-12(fp)
 400ced8:	400d1c40 	call	400d1c4 <alt_find_dev>
 400cedc:	e0bff815 	stw	r2,-32(fp)
 400cee0:	e0bff817 	ldw	r2,-32(fp)
 400cee4:	1000051e 	bne	r2,zero,400cefc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400cee8:	e13ffd17 	ldw	r4,-12(fp)
 400ceec:	400d2540 	call	400d254 <alt_find_file>
 400cef0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400cef4:	00800044 	movi	r2,1
 400cef8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400cefc:	e0bff817 	ldw	r2,-32(fp)
 400cf00:	10002b26 	beq	r2,zero,400cfb0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400cf04:	e13ff817 	ldw	r4,-32(fp)
 400cf08:	400d35c0 	call	400d35c <alt_get_fd>
 400cf0c:	e0bff915 	stw	r2,-28(fp)
 400cf10:	e0bff917 	ldw	r2,-28(fp)
 400cf14:	1000030e 	bge	r2,zero,400cf24 <open+0x84>
    {
      status = index;
 400cf18:	e0bff917 	ldw	r2,-28(fp)
 400cf1c:	e0bffa15 	stw	r2,-24(fp)
 400cf20:	00002506 	br	400cfb8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 400cf24:	01400304 	movi	r5,12
 400cf28:	e13ff917 	ldw	r4,-28(fp)
 400cf2c:	400b0840 	call	400b084 <__mulsi3>
 400cf30:	1007883a 	mov	r3,r2
 400cf34:	00800034 	movhi	r2,0
 400cf38:	10822904 	addi	r2,r2,2212
 400cf3c:	1885883a 	add	r2,r3,r2
 400cf40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400cf44:	e0fffe17 	ldw	r3,-8(fp)
 400cf48:	00900034 	movhi	r2,16384
 400cf4c:	10bfffc4 	addi	r2,r2,-1
 400cf50:	1886703a 	and	r3,r3,r2
 400cf54:	e0bffc17 	ldw	r2,-16(fp)
 400cf58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400cf5c:	e0bffb17 	ldw	r2,-20(fp)
 400cf60:	1000051e 	bne	r2,zero,400cf78 <open+0xd8>
 400cf64:	e13ffc17 	ldw	r4,-16(fp)
 400cf68:	400cdb40 	call	400cdb4 <alt_file_locked>
 400cf6c:	e0bffa15 	stw	r2,-24(fp)
 400cf70:	e0bffa17 	ldw	r2,-24(fp)
 400cf74:	10001016 	blt	r2,zero,400cfb8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400cf78:	e0bff817 	ldw	r2,-32(fp)
 400cf7c:	10800317 	ldw	r2,12(r2)
 400cf80:	10000826 	beq	r2,zero,400cfa4 <open+0x104>
 400cf84:	e0bff817 	ldw	r2,-32(fp)
 400cf88:	10800317 	ldw	r2,12(r2)
 400cf8c:	e1ffff17 	ldw	r7,-4(fp)
 400cf90:	e1bffe17 	ldw	r6,-8(fp)
 400cf94:	e17ffd17 	ldw	r5,-12(fp)
 400cf98:	e13ffc17 	ldw	r4,-16(fp)
 400cf9c:	103ee83a 	callr	r2
 400cfa0:	00000106 	br	400cfa8 <open+0x108>
 400cfa4:	0005883a 	mov	r2,zero
 400cfa8:	e0bffa15 	stw	r2,-24(fp)
 400cfac:	00000206 	br	400cfb8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400cfb0:	00bffb44 	movi	r2,-19
 400cfb4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400cfb8:	e0bffa17 	ldw	r2,-24(fp)
 400cfbc:	1000090e 	bge	r2,zero,400cfe4 <open+0x144>
  {
    alt_release_fd (index);  
 400cfc0:	e13ff917 	ldw	r4,-28(fp)
 400cfc4:	400b7d00 	call	400b7d0 <alt_release_fd>
    ALT_ERRNO = -status;
 400cfc8:	400cd780 	call	400cd78 <alt_get_errno>
 400cfcc:	1007883a 	mov	r3,r2
 400cfd0:	e0bffa17 	ldw	r2,-24(fp)
 400cfd4:	0085c83a 	sub	r2,zero,r2
 400cfd8:	18800015 	stw	r2,0(r3)
    return -1;
 400cfdc:	00bfffc4 	movi	r2,-1
 400cfe0:	00000106 	br	400cfe8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 400cfe4:	e0bff917 	ldw	r2,-28(fp)
}
 400cfe8:	e037883a 	mov	sp,fp
 400cfec:	dfc00117 	ldw	ra,4(sp)
 400cff0:	df000017 	ldw	fp,0(sp)
 400cff4:	dec00204 	addi	sp,sp,8
 400cff8:	f800283a 	ret

0400cffc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400cffc:	defffa04 	addi	sp,sp,-24
 400d000:	df000515 	stw	fp,20(sp)
 400d004:	df000504 	addi	fp,sp,20
 400d008:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d00c:	0005303a 	rdctl	r2,status
 400d010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d014:	e0fffc17 	ldw	r3,-16(fp)
 400d018:	00bfff84 	movi	r2,-2
 400d01c:	1884703a 	and	r2,r3,r2
 400d020:	1001703a 	wrctl	status,r2
  
  return context;
 400d024:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400d028:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400d02c:	e0bfff17 	ldw	r2,-4(fp)
 400d030:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400d034:	e0bffd17 	ldw	r2,-12(fp)
 400d038:	10800017 	ldw	r2,0(r2)
 400d03c:	e0fffd17 	ldw	r3,-12(fp)
 400d040:	18c00117 	ldw	r3,4(r3)
 400d044:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400d048:	e0bffd17 	ldw	r2,-12(fp)
 400d04c:	10800117 	ldw	r2,4(r2)
 400d050:	e0fffd17 	ldw	r3,-12(fp)
 400d054:	18c00017 	ldw	r3,0(r3)
 400d058:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400d05c:	e0bffd17 	ldw	r2,-12(fp)
 400d060:	e0fffd17 	ldw	r3,-12(fp)
 400d064:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400d068:	e0bffd17 	ldw	r2,-12(fp)
 400d06c:	e0fffd17 	ldw	r3,-12(fp)
 400d070:	10c00015 	stw	r3,0(r2)
 400d074:	e0bffb17 	ldw	r2,-20(fp)
 400d078:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d07c:	e0bffe17 	ldw	r2,-8(fp)
 400d080:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400d084:	0001883a 	nop
 400d088:	e037883a 	mov	sp,fp
 400d08c:	df000017 	ldw	fp,0(sp)
 400d090:	dec00104 	addi	sp,sp,4
 400d094:	f800283a 	ret

0400d098 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400d098:	defffb04 	addi	sp,sp,-20
 400d09c:	dfc00415 	stw	ra,16(sp)
 400d0a0:	df000315 	stw	fp,12(sp)
 400d0a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400d0a8:	d0a00c17 	ldw	r2,-32720(gp)
 400d0ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400d0b0:	d0a01717 	ldw	r2,-32676(gp)
 400d0b4:	10800044 	addi	r2,r2,1
 400d0b8:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400d0bc:	00002e06 	br	400d178 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400d0c0:	e0bffd17 	ldw	r2,-12(fp)
 400d0c4:	10800017 	ldw	r2,0(r2)
 400d0c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400d0cc:	e0bffd17 	ldw	r2,-12(fp)
 400d0d0:	10800403 	ldbu	r2,16(r2)
 400d0d4:	10803fcc 	andi	r2,r2,255
 400d0d8:	10000426 	beq	r2,zero,400d0ec <alt_tick+0x54>
 400d0dc:	d0a01717 	ldw	r2,-32676(gp)
 400d0e0:	1000021e 	bne	r2,zero,400d0ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400d0e4:	e0bffd17 	ldw	r2,-12(fp)
 400d0e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400d0ec:	e0bffd17 	ldw	r2,-12(fp)
 400d0f0:	10800217 	ldw	r2,8(r2)
 400d0f4:	d0e01717 	ldw	r3,-32676(gp)
 400d0f8:	18801d36 	bltu	r3,r2,400d170 <alt_tick+0xd8>
 400d0fc:	e0bffd17 	ldw	r2,-12(fp)
 400d100:	10800403 	ldbu	r2,16(r2)
 400d104:	10803fcc 	andi	r2,r2,255
 400d108:	1000191e 	bne	r2,zero,400d170 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400d10c:	e0bffd17 	ldw	r2,-12(fp)
 400d110:	10800317 	ldw	r2,12(r2)
 400d114:	e0fffd17 	ldw	r3,-12(fp)
 400d118:	18c00517 	ldw	r3,20(r3)
 400d11c:	1809883a 	mov	r4,r3
 400d120:	103ee83a 	callr	r2
 400d124:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400d128:	e0bfff17 	ldw	r2,-4(fp)
 400d12c:	1000031e 	bne	r2,zero,400d13c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400d130:	e13ffd17 	ldw	r4,-12(fp)
 400d134:	400cffc0 	call	400cffc <alt_alarm_stop>
 400d138:	00000d06 	br	400d170 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400d13c:	e0bffd17 	ldw	r2,-12(fp)
 400d140:	10c00217 	ldw	r3,8(r2)
 400d144:	e0bfff17 	ldw	r2,-4(fp)
 400d148:	1887883a 	add	r3,r3,r2
 400d14c:	e0bffd17 	ldw	r2,-12(fp)
 400d150:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400d154:	e0bffd17 	ldw	r2,-12(fp)
 400d158:	10c00217 	ldw	r3,8(r2)
 400d15c:	d0a01717 	ldw	r2,-32676(gp)
 400d160:	1880032e 	bgeu	r3,r2,400d170 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400d164:	e0bffd17 	ldw	r2,-12(fp)
 400d168:	00c00044 	movi	r3,1
 400d16c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400d170:	e0bffe17 	ldw	r2,-8(fp)
 400d174:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400d178:	e0fffd17 	ldw	r3,-12(fp)
 400d17c:	d0a00c04 	addi	r2,gp,-32720
 400d180:	18bfcf1e 	bne	r3,r2,400d0c0 <__flash_rwdata_start+0xfffff820>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400d184:	0001883a 	nop
}
 400d188:	0001883a 	nop
 400d18c:	e037883a 	mov	sp,fp
 400d190:	dfc00117 	ldw	ra,4(sp)
 400d194:	df000017 	ldw	fp,0(sp)
 400d198:	dec00204 	addi	sp,sp,8
 400d19c:	f800283a 	ret

0400d1a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400d1a0:	deffff04 	addi	sp,sp,-4
 400d1a4:	df000015 	stw	fp,0(sp)
 400d1a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400d1ac:	000170fa 	wrctl	ienable,zero
}
 400d1b0:	0001883a 	nop
 400d1b4:	e037883a 	mov	sp,fp
 400d1b8:	df000017 	ldw	fp,0(sp)
 400d1bc:	dec00104 	addi	sp,sp,4
 400d1c0:	f800283a 	ret

0400d1c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400d1c4:	defffa04 	addi	sp,sp,-24
 400d1c8:	dfc00515 	stw	ra,20(sp)
 400d1cc:	df000415 	stw	fp,16(sp)
 400d1d0:	df000404 	addi	fp,sp,16
 400d1d4:	e13ffe15 	stw	r4,-8(fp)
 400d1d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400d1dc:	e0bfff17 	ldw	r2,-4(fp)
 400d1e0:	10800017 	ldw	r2,0(r2)
 400d1e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400d1e8:	e13ffe17 	ldw	r4,-8(fp)
 400d1ec:	40083740 	call	4008374 <strlen>
 400d1f0:	10800044 	addi	r2,r2,1
 400d1f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400d1f8:	00000d06 	br	400d230 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400d1fc:	e0bffc17 	ldw	r2,-16(fp)
 400d200:	10800217 	ldw	r2,8(r2)
 400d204:	e0fffd17 	ldw	r3,-12(fp)
 400d208:	180d883a 	mov	r6,r3
 400d20c:	e17ffe17 	ldw	r5,-8(fp)
 400d210:	1009883a 	mov	r4,r2
 400d214:	400d5080 	call	400d508 <memcmp>
 400d218:	1000021e 	bne	r2,zero,400d224 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400d21c:	e0bffc17 	ldw	r2,-16(fp)
 400d220:	00000706 	br	400d240 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400d224:	e0bffc17 	ldw	r2,-16(fp)
 400d228:	10800017 	ldw	r2,0(r2)
 400d22c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400d230:	e0fffc17 	ldw	r3,-16(fp)
 400d234:	e0bfff17 	ldw	r2,-4(fp)
 400d238:	18bff01e 	bne	r3,r2,400d1fc <__flash_rwdata_start+0xfffff95c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400d23c:	0005883a 	mov	r2,zero
}
 400d240:	e037883a 	mov	sp,fp
 400d244:	dfc00117 	ldw	ra,4(sp)
 400d248:	df000017 	ldw	fp,0(sp)
 400d24c:	dec00204 	addi	sp,sp,8
 400d250:	f800283a 	ret

0400d254 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400d254:	defffb04 	addi	sp,sp,-20
 400d258:	dfc00415 	stw	ra,16(sp)
 400d25c:	df000315 	stw	fp,12(sp)
 400d260:	df000304 	addi	fp,sp,12
 400d264:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400d268:	d0a00417 	ldw	r2,-32752(gp)
 400d26c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400d270:	00003106 	br	400d338 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400d274:	e0bffd17 	ldw	r2,-12(fp)
 400d278:	10800217 	ldw	r2,8(r2)
 400d27c:	1009883a 	mov	r4,r2
 400d280:	40083740 	call	4008374 <strlen>
 400d284:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400d288:	e0bffd17 	ldw	r2,-12(fp)
 400d28c:	10c00217 	ldw	r3,8(r2)
 400d290:	e0bffe17 	ldw	r2,-8(fp)
 400d294:	10bfffc4 	addi	r2,r2,-1
 400d298:	1885883a 	add	r2,r3,r2
 400d29c:	10800003 	ldbu	r2,0(r2)
 400d2a0:	10803fcc 	andi	r2,r2,255
 400d2a4:	1080201c 	xori	r2,r2,128
 400d2a8:	10bfe004 	addi	r2,r2,-128
 400d2ac:	10800bd8 	cmpnei	r2,r2,47
 400d2b0:	1000031e 	bne	r2,zero,400d2c0 <alt_find_file+0x6c>
    {
      len -= 1;
 400d2b4:	e0bffe17 	ldw	r2,-8(fp)
 400d2b8:	10bfffc4 	addi	r2,r2,-1
 400d2bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400d2c0:	e0bffe17 	ldw	r2,-8(fp)
 400d2c4:	e0ffff17 	ldw	r3,-4(fp)
 400d2c8:	1885883a 	add	r2,r3,r2
 400d2cc:	10800003 	ldbu	r2,0(r2)
 400d2d0:	10803fcc 	andi	r2,r2,255
 400d2d4:	1080201c 	xori	r2,r2,128
 400d2d8:	10bfe004 	addi	r2,r2,-128
 400d2dc:	10800be0 	cmpeqi	r2,r2,47
 400d2e0:	1000081e 	bne	r2,zero,400d304 <alt_find_file+0xb0>
 400d2e4:	e0bffe17 	ldw	r2,-8(fp)
 400d2e8:	e0ffff17 	ldw	r3,-4(fp)
 400d2ec:	1885883a 	add	r2,r3,r2
 400d2f0:	10800003 	ldbu	r2,0(r2)
 400d2f4:	10803fcc 	andi	r2,r2,255
 400d2f8:	1080201c 	xori	r2,r2,128
 400d2fc:	10bfe004 	addi	r2,r2,-128
 400d300:	10000a1e 	bne	r2,zero,400d32c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400d304:	e0bffd17 	ldw	r2,-12(fp)
 400d308:	10800217 	ldw	r2,8(r2)
 400d30c:	e0fffe17 	ldw	r3,-8(fp)
 400d310:	180d883a 	mov	r6,r3
 400d314:	e17fff17 	ldw	r5,-4(fp)
 400d318:	1009883a 	mov	r4,r2
 400d31c:	400d5080 	call	400d508 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400d320:	1000021e 	bne	r2,zero,400d32c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400d324:	e0bffd17 	ldw	r2,-12(fp)
 400d328:	00000706 	br	400d348 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400d32c:	e0bffd17 	ldw	r2,-12(fp)
 400d330:	10800017 	ldw	r2,0(r2)
 400d334:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400d338:	e0fffd17 	ldw	r3,-12(fp)
 400d33c:	d0a00404 	addi	r2,gp,-32752
 400d340:	18bfcc1e 	bne	r3,r2,400d274 <__flash_rwdata_start+0xfffff9d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400d344:	0005883a 	mov	r2,zero
}
 400d348:	e037883a 	mov	sp,fp
 400d34c:	dfc00117 	ldw	ra,4(sp)
 400d350:	df000017 	ldw	fp,0(sp)
 400d354:	dec00204 	addi	sp,sp,8
 400d358:	f800283a 	ret

0400d35c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400d35c:	defffa04 	addi	sp,sp,-24
 400d360:	dfc00515 	stw	ra,20(sp)
 400d364:	df000415 	stw	fp,16(sp)
 400d368:	dc000315 	stw	r16,12(sp)
 400d36c:	df000404 	addi	fp,sp,16
 400d370:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 400d374:	00bffa04 	movi	r2,-24
 400d378:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400d37c:	e03ffc15 	stw	zero,-16(fp)
 400d380:	00001d06 	br	400d3f8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 400d384:	04000034 	movhi	r16,0
 400d388:	84022904 	addi	r16,r16,2212
 400d38c:	e0bffc17 	ldw	r2,-16(fp)
 400d390:	01400304 	movi	r5,12
 400d394:	1009883a 	mov	r4,r2
 400d398:	400b0840 	call	400b084 <__mulsi3>
 400d39c:	8085883a 	add	r2,r16,r2
 400d3a0:	10800017 	ldw	r2,0(r2)
 400d3a4:	1000111e 	bne	r2,zero,400d3ec <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 400d3a8:	04000034 	movhi	r16,0
 400d3ac:	84022904 	addi	r16,r16,2212
 400d3b0:	e0bffc17 	ldw	r2,-16(fp)
 400d3b4:	01400304 	movi	r5,12
 400d3b8:	1009883a 	mov	r4,r2
 400d3bc:	400b0840 	call	400b084 <__mulsi3>
 400d3c0:	8085883a 	add	r2,r16,r2
 400d3c4:	e0fffe17 	ldw	r3,-8(fp)
 400d3c8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400d3cc:	d0e00817 	ldw	r3,-32736(gp)
 400d3d0:	e0bffc17 	ldw	r2,-16(fp)
 400d3d4:	1880020e 	bge	r3,r2,400d3e0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 400d3d8:	e0bffc17 	ldw	r2,-16(fp)
 400d3dc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 400d3e0:	e0bffc17 	ldw	r2,-16(fp)
 400d3e4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 400d3e8:	00000606 	br	400d404 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400d3ec:	e0bffc17 	ldw	r2,-16(fp)
 400d3f0:	10800044 	addi	r2,r2,1
 400d3f4:	e0bffc15 	stw	r2,-16(fp)
 400d3f8:	e0bffc17 	ldw	r2,-16(fp)
 400d3fc:	10800810 	cmplti	r2,r2,32
 400d400:	103fe01e 	bne	r2,zero,400d384 <__flash_rwdata_start+0xfffffae4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400d404:	e0bffd17 	ldw	r2,-12(fp)
}
 400d408:	e6ffff04 	addi	sp,fp,-4
 400d40c:	dfc00217 	ldw	ra,8(sp)
 400d410:	df000117 	ldw	fp,4(sp)
 400d414:	dc000017 	ldw	r16,0(sp)
 400d418:	dec00304 	addi	sp,sp,12
 400d41c:	f800283a 	ret

0400d420 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400d420:	defffe04 	addi	sp,sp,-8
 400d424:	df000115 	stw	fp,4(sp)
 400d428:	df000104 	addi	fp,sp,4
 400d42c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400d430:	e0bfff17 	ldw	r2,-4(fp)
 400d434:	10bffe84 	addi	r2,r2,-6
 400d438:	10c00428 	cmpgeui	r3,r2,16
 400d43c:	18001a1e 	bne	r3,zero,400d4a8 <alt_exception_cause_generated_bad_addr+0x88>
 400d440:	100690ba 	slli	r3,r2,2
 400d444:	00810074 	movhi	r2,1025
 400d448:	10b51604 	addi	r2,r2,-11176
 400d44c:	1885883a 	add	r2,r3,r2
 400d450:	10800017 	ldw	r2,0(r2)
 400d454:	1000683a 	jmp	r2
 400d458:	0400d498 	cmpnei	r16,zero,850
 400d45c:	0400d498 	cmpnei	r16,zero,850
 400d460:	0400d4a8 	cmpgeui	r16,zero,850
 400d464:	0400d4a8 	cmpgeui	r16,zero,850
 400d468:	0400d4a8 	cmpgeui	r16,zero,850
 400d46c:	0400d498 	cmpnei	r16,zero,850
 400d470:	0400d4a0 	cmpeqi	r16,zero,850
 400d474:	0400d4a8 	cmpgeui	r16,zero,850
 400d478:	0400d498 	cmpnei	r16,zero,850
 400d47c:	0400d498 	cmpnei	r16,zero,850
 400d480:	0400d4a8 	cmpgeui	r16,zero,850
 400d484:	0400d498 	cmpnei	r16,zero,850
 400d488:	0400d4a0 	cmpeqi	r16,zero,850
 400d48c:	0400d4a8 	cmpgeui	r16,zero,850
 400d490:	0400d4a8 	cmpgeui	r16,zero,850
 400d494:	0400d498 	cmpnei	r16,zero,850
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400d498:	00800044 	movi	r2,1
 400d49c:	00000306 	br	400d4ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400d4a0:	0005883a 	mov	r2,zero
 400d4a4:	00000106 	br	400d4ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400d4a8:	0005883a 	mov	r2,zero
  }
}
 400d4ac:	e037883a 	mov	sp,fp
 400d4b0:	df000017 	ldw	fp,0(sp)
 400d4b4:	dec00104 	addi	sp,sp,4
 400d4b8:	f800283a 	ret

0400d4bc <atexit>:
 400d4bc:	200b883a 	mov	r5,r4
 400d4c0:	000f883a 	mov	r7,zero
 400d4c4:	000d883a 	mov	r6,zero
 400d4c8:	0009883a 	mov	r4,zero
 400d4cc:	400d5841 	jmpi	400d584 <__register_exitproc>

0400d4d0 <exit>:
 400d4d0:	defffe04 	addi	sp,sp,-8
 400d4d4:	000b883a 	mov	r5,zero
 400d4d8:	dc000015 	stw	r16,0(sp)
 400d4dc:	dfc00115 	stw	ra,4(sp)
 400d4e0:	2021883a 	mov	r16,r4
 400d4e4:	400d69c0 	call	400d69c <__call_exitprocs>
 400d4e8:	00800034 	movhi	r2,0
 400d4ec:	1086a104 	addi	r2,r2,6788
 400d4f0:	11000017 	ldw	r4,0(r2)
 400d4f4:	20800f17 	ldw	r2,60(r4)
 400d4f8:	10000126 	beq	r2,zero,400d500 <exit+0x30>
 400d4fc:	103ee83a 	callr	r2
 400d500:	8009883a 	mov	r4,r16
 400d504:	400d81c0 	call	400d81c <_exit>

0400d508 <memcmp>:
 400d508:	01c000c4 	movi	r7,3
 400d50c:	3980192e 	bgeu	r7,r6,400d574 <memcmp+0x6c>
 400d510:	2144b03a 	or	r2,r4,r5
 400d514:	11c4703a 	and	r2,r2,r7
 400d518:	10000f26 	beq	r2,zero,400d558 <memcmp+0x50>
 400d51c:	20800003 	ldbu	r2,0(r4)
 400d520:	28c00003 	ldbu	r3,0(r5)
 400d524:	10c0151e 	bne	r2,r3,400d57c <memcmp+0x74>
 400d528:	31bfff84 	addi	r6,r6,-2
 400d52c:	01ffffc4 	movi	r7,-1
 400d530:	00000406 	br	400d544 <memcmp+0x3c>
 400d534:	20800003 	ldbu	r2,0(r4)
 400d538:	28c00003 	ldbu	r3,0(r5)
 400d53c:	31bfffc4 	addi	r6,r6,-1
 400d540:	10c00e1e 	bne	r2,r3,400d57c <memcmp+0x74>
 400d544:	21000044 	addi	r4,r4,1
 400d548:	29400044 	addi	r5,r5,1
 400d54c:	31fff91e 	bne	r6,r7,400d534 <__flash_rwdata_start+0xfffffc94>
 400d550:	0005883a 	mov	r2,zero
 400d554:	f800283a 	ret
 400d558:	20c00017 	ldw	r3,0(r4)
 400d55c:	28800017 	ldw	r2,0(r5)
 400d560:	18bfee1e 	bne	r3,r2,400d51c <__flash_rwdata_start+0xfffffc7c>
 400d564:	31bfff04 	addi	r6,r6,-4
 400d568:	21000104 	addi	r4,r4,4
 400d56c:	29400104 	addi	r5,r5,4
 400d570:	39bff936 	bltu	r7,r6,400d558 <__flash_rwdata_start+0xfffffcb8>
 400d574:	303fe91e 	bne	r6,zero,400d51c <__flash_rwdata_start+0xfffffc7c>
 400d578:	003ff506 	br	400d550 <__flash_rwdata_start+0xfffffcb0>
 400d57c:	10c5c83a 	sub	r2,r2,r3
 400d580:	f800283a 	ret

0400d584 <__register_exitproc>:
 400d584:	defffa04 	addi	sp,sp,-24
 400d588:	dc000315 	stw	r16,12(sp)
 400d58c:	04000034 	movhi	r16,0
 400d590:	8406a104 	addi	r16,r16,6788
 400d594:	80c00017 	ldw	r3,0(r16)
 400d598:	dc400415 	stw	r17,16(sp)
 400d59c:	dfc00515 	stw	ra,20(sp)
 400d5a0:	18805217 	ldw	r2,328(r3)
 400d5a4:	2023883a 	mov	r17,r4
 400d5a8:	10003726 	beq	r2,zero,400d688 <__register_exitproc+0x104>
 400d5ac:	10c00117 	ldw	r3,4(r2)
 400d5b0:	010007c4 	movi	r4,31
 400d5b4:	20c00e16 	blt	r4,r3,400d5f0 <__register_exitproc+0x6c>
 400d5b8:	1a000044 	addi	r8,r3,1
 400d5bc:	8800221e 	bne	r17,zero,400d648 <__register_exitproc+0xc4>
 400d5c0:	18c00084 	addi	r3,r3,2
 400d5c4:	18c7883a 	add	r3,r3,r3
 400d5c8:	18c7883a 	add	r3,r3,r3
 400d5cc:	12000115 	stw	r8,4(r2)
 400d5d0:	10c7883a 	add	r3,r2,r3
 400d5d4:	19400015 	stw	r5,0(r3)
 400d5d8:	0005883a 	mov	r2,zero
 400d5dc:	dfc00517 	ldw	ra,20(sp)
 400d5e0:	dc400417 	ldw	r17,16(sp)
 400d5e4:	dc000317 	ldw	r16,12(sp)
 400d5e8:	dec00604 	addi	sp,sp,24
 400d5ec:	f800283a 	ret
 400d5f0:	00800034 	movhi	r2,0
 400d5f4:	10800004 	addi	r2,r2,0
 400d5f8:	10002626 	beq	r2,zero,400d694 <__register_exitproc+0x110>
 400d5fc:	01006404 	movi	r4,400
 400d600:	d9400015 	stw	r5,0(sp)
 400d604:	d9800115 	stw	r6,4(sp)
 400d608:	d9c00215 	stw	r7,8(sp)
 400d60c:	00000000 	call	0 <__alt_mem_fpga_sdram>
 400d610:	d9400017 	ldw	r5,0(sp)
 400d614:	d9800117 	ldw	r6,4(sp)
 400d618:	d9c00217 	ldw	r7,8(sp)
 400d61c:	10001d26 	beq	r2,zero,400d694 <__register_exitproc+0x110>
 400d620:	81000017 	ldw	r4,0(r16)
 400d624:	10000115 	stw	zero,4(r2)
 400d628:	02000044 	movi	r8,1
 400d62c:	22405217 	ldw	r9,328(r4)
 400d630:	0007883a 	mov	r3,zero
 400d634:	12400015 	stw	r9,0(r2)
 400d638:	20805215 	stw	r2,328(r4)
 400d63c:	10006215 	stw	zero,392(r2)
 400d640:	10006315 	stw	zero,396(r2)
 400d644:	883fde26 	beq	r17,zero,400d5c0 <__flash_rwdata_start+0xfffffd20>
 400d648:	18c9883a 	add	r4,r3,r3
 400d64c:	2109883a 	add	r4,r4,r4
 400d650:	1109883a 	add	r4,r2,r4
 400d654:	21802215 	stw	r6,136(r4)
 400d658:	01800044 	movi	r6,1
 400d65c:	12406217 	ldw	r9,392(r2)
 400d660:	30cc983a 	sll	r6,r6,r3
 400d664:	4992b03a 	or	r9,r9,r6
 400d668:	12406215 	stw	r9,392(r2)
 400d66c:	21c04215 	stw	r7,264(r4)
 400d670:	01000084 	movi	r4,2
 400d674:	893fd21e 	bne	r17,r4,400d5c0 <__flash_rwdata_start+0xfffffd20>
 400d678:	11006317 	ldw	r4,396(r2)
 400d67c:	218cb03a 	or	r6,r4,r6
 400d680:	11806315 	stw	r6,396(r2)
 400d684:	003fce06 	br	400d5c0 <__flash_rwdata_start+0xfffffd20>
 400d688:	18805304 	addi	r2,r3,332
 400d68c:	18805215 	stw	r2,328(r3)
 400d690:	003fc606 	br	400d5ac <__flash_rwdata_start+0xfffffd0c>
 400d694:	00bfffc4 	movi	r2,-1
 400d698:	003fd006 	br	400d5dc <__flash_rwdata_start+0xfffffd3c>

0400d69c <__call_exitprocs>:
 400d69c:	defff504 	addi	sp,sp,-44
 400d6a0:	df000915 	stw	fp,36(sp)
 400d6a4:	dd400615 	stw	r21,24(sp)
 400d6a8:	dc800315 	stw	r18,12(sp)
 400d6ac:	dfc00a15 	stw	ra,40(sp)
 400d6b0:	ddc00815 	stw	r23,32(sp)
 400d6b4:	dd800715 	stw	r22,28(sp)
 400d6b8:	dd000515 	stw	r20,20(sp)
 400d6bc:	dcc00415 	stw	r19,16(sp)
 400d6c0:	dc400215 	stw	r17,8(sp)
 400d6c4:	dc000115 	stw	r16,4(sp)
 400d6c8:	d9000015 	stw	r4,0(sp)
 400d6cc:	2839883a 	mov	fp,r5
 400d6d0:	04800044 	movi	r18,1
 400d6d4:	057fffc4 	movi	r21,-1
 400d6d8:	00800034 	movhi	r2,0
 400d6dc:	1086a104 	addi	r2,r2,6788
 400d6e0:	12000017 	ldw	r8,0(r2)
 400d6e4:	45005217 	ldw	r20,328(r8)
 400d6e8:	44c05204 	addi	r19,r8,328
 400d6ec:	a0001c26 	beq	r20,zero,400d760 <__call_exitprocs+0xc4>
 400d6f0:	a0800117 	ldw	r2,4(r20)
 400d6f4:	15ffffc4 	addi	r23,r2,-1
 400d6f8:	b8000d16 	blt	r23,zero,400d730 <__call_exitprocs+0x94>
 400d6fc:	14000044 	addi	r16,r2,1
 400d700:	8421883a 	add	r16,r16,r16
 400d704:	8421883a 	add	r16,r16,r16
 400d708:	84402004 	addi	r17,r16,128
 400d70c:	a463883a 	add	r17,r20,r17
 400d710:	a421883a 	add	r16,r20,r16
 400d714:	e0001e26 	beq	fp,zero,400d790 <__call_exitprocs+0xf4>
 400d718:	80804017 	ldw	r2,256(r16)
 400d71c:	e0801c26 	beq	fp,r2,400d790 <__call_exitprocs+0xf4>
 400d720:	bdffffc4 	addi	r23,r23,-1
 400d724:	843fff04 	addi	r16,r16,-4
 400d728:	8c7fff04 	addi	r17,r17,-4
 400d72c:	bd7ff91e 	bne	r23,r21,400d714 <__flash_rwdata_start+0xfffffe74>
 400d730:	00800034 	movhi	r2,0
 400d734:	10800004 	addi	r2,r2,0
 400d738:	10000926 	beq	r2,zero,400d760 <__call_exitprocs+0xc4>
 400d73c:	a0800117 	ldw	r2,4(r20)
 400d740:	1000301e 	bne	r2,zero,400d804 <__call_exitprocs+0x168>
 400d744:	a0800017 	ldw	r2,0(r20)
 400d748:	10003226 	beq	r2,zero,400d814 <__call_exitprocs+0x178>
 400d74c:	a009883a 	mov	r4,r20
 400d750:	98800015 	stw	r2,0(r19)
 400d754:	00000000 	call	0 <__alt_mem_fpga_sdram>
 400d758:	9d000017 	ldw	r20,0(r19)
 400d75c:	a03fe41e 	bne	r20,zero,400d6f0 <__flash_rwdata_start+0xfffffe50>
 400d760:	dfc00a17 	ldw	ra,40(sp)
 400d764:	df000917 	ldw	fp,36(sp)
 400d768:	ddc00817 	ldw	r23,32(sp)
 400d76c:	dd800717 	ldw	r22,28(sp)
 400d770:	dd400617 	ldw	r21,24(sp)
 400d774:	dd000517 	ldw	r20,20(sp)
 400d778:	dcc00417 	ldw	r19,16(sp)
 400d77c:	dc800317 	ldw	r18,12(sp)
 400d780:	dc400217 	ldw	r17,8(sp)
 400d784:	dc000117 	ldw	r16,4(sp)
 400d788:	dec00b04 	addi	sp,sp,44
 400d78c:	f800283a 	ret
 400d790:	a0800117 	ldw	r2,4(r20)
 400d794:	80c00017 	ldw	r3,0(r16)
 400d798:	10bfffc4 	addi	r2,r2,-1
 400d79c:	15c01426 	beq	r2,r23,400d7f0 <__call_exitprocs+0x154>
 400d7a0:	80000015 	stw	zero,0(r16)
 400d7a4:	183fde26 	beq	r3,zero,400d720 <__flash_rwdata_start+0xfffffe80>
 400d7a8:	95c8983a 	sll	r4,r18,r23
 400d7ac:	a0806217 	ldw	r2,392(r20)
 400d7b0:	a5800117 	ldw	r22,4(r20)
 400d7b4:	2084703a 	and	r2,r4,r2
 400d7b8:	10000b26 	beq	r2,zero,400d7e8 <__call_exitprocs+0x14c>
 400d7bc:	a0806317 	ldw	r2,396(r20)
 400d7c0:	2088703a 	and	r4,r4,r2
 400d7c4:	20000c1e 	bne	r4,zero,400d7f8 <__call_exitprocs+0x15c>
 400d7c8:	89400017 	ldw	r5,0(r17)
 400d7cc:	d9000017 	ldw	r4,0(sp)
 400d7d0:	183ee83a 	callr	r3
 400d7d4:	a0800117 	ldw	r2,4(r20)
 400d7d8:	15bfbf1e 	bne	r2,r22,400d6d8 <__flash_rwdata_start+0xfffffe38>
 400d7dc:	98800017 	ldw	r2,0(r19)
 400d7e0:	153fcf26 	beq	r2,r20,400d720 <__flash_rwdata_start+0xfffffe80>
 400d7e4:	003fbc06 	br	400d6d8 <__flash_rwdata_start+0xfffffe38>
 400d7e8:	183ee83a 	callr	r3
 400d7ec:	003ff906 	br	400d7d4 <__flash_rwdata_start+0xffffff34>
 400d7f0:	a5c00115 	stw	r23,4(r20)
 400d7f4:	003feb06 	br	400d7a4 <__flash_rwdata_start+0xffffff04>
 400d7f8:	89000017 	ldw	r4,0(r17)
 400d7fc:	183ee83a 	callr	r3
 400d800:	003ff406 	br	400d7d4 <__flash_rwdata_start+0xffffff34>
 400d804:	a0800017 	ldw	r2,0(r20)
 400d808:	a027883a 	mov	r19,r20
 400d80c:	1029883a 	mov	r20,r2
 400d810:	003fb606 	br	400d6ec <__flash_rwdata_start+0xfffffe4c>
 400d814:	0005883a 	mov	r2,zero
 400d818:	003ffb06 	br	400d808 <__flash_rwdata_start+0xffffff68>

0400d81c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400d81c:	defffd04 	addi	sp,sp,-12
 400d820:	df000215 	stw	fp,8(sp)
 400d824:	df000204 	addi	fp,sp,8
 400d828:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400d82c:	0001883a 	nop
 400d830:	e0bfff17 	ldw	r2,-4(fp)
 400d834:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400d838:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400d83c:	10000226 	beq	r2,zero,400d848 <_exit+0x2c>
    ALT_SIM_FAIL();
 400d840:	002af070 	cmpltui	zero,zero,43969
 400d844:	00000106 	br	400d84c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400d848:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400d84c:	003fff06 	br	400d84c <__flash_rwdata_start+0xffffffac>
